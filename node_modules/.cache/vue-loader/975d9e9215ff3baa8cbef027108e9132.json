{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Common/FilterSort.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Common/FilterSort.vue","mtime":1605259983000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"FilterSort\",\n  props: {\n    filterId: {\n      type: Number,\n      default: 1\n    },\n    useSort: {       // Sort 사용 여부\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      formTypeData: {\n        input: 'round',         // round, underline\n        button: 'round',\n        box: 'round',\n        list: 'vertical',\n        label: false,\n        align: 'block',  // block, center, space-between, flex-start, flex-end\n        inputIcon: false,\n        dropdown: 'list'      // list, modal\n      },\n      categories: [],\n      filterData: [],\n      sortData: undefined,\n      typeList: {\n        'choice_checkbox': 'c-input-checkboxGroup',\n        'choice_radio': 'c-input-radiobuttonGroup',\n        'address': 'c-input-regionForm',\n        'number_range': 'c-input-rangeDual',\n        'date_range': 'c-input-dateRange',\n        'date': 'c-input-date',\n        'date_time': ['c-input-date', 'c-input-time'],\n        'date_time_range': 'c-input-dateTimeRange',\n        'category': 'c-input-cascadingDropdown'\n      }\n    }\n  },\n  created() {\n    // 카테고리 내용 미리 받아두기\n    this.setCategories();\n  },\n  methods: {\n    setCategories() {\n      this.$axios.get('public/category?depth=2').then(res => {\n        this.categories = [];\n        for(let i=0; i<res.data.length; i++) {\n          let cat1 = res.data[i];\n          let child = [];\n          if (cat1.child) {\n            for (let j = 0; j < cat1.child.length; j++) {\n              let cat2 = cat1.child[j];\n              let child2 = [];\n              for (let k = 0; k < cat2.child.length; k++) {\n                let cat3 = cat2.child[k];\n                child2.push({id: cat3.id, label: cat3.name, value: cat3.id});\n              }\n              cat2 = {id: cat2.id, label: cat2.name, value: cat2.id, child: child2};\n              child.push(cat2);\n            }\n          }\n          cat1 = {id: cat1.id, label: cat1.name, value: cat1.id, child: child};\n          this.categories.push(cat1);\n        }\n\n        // 백엔드에서 필터 가져와서 적용\n        this.setFilters();\n      });\n    },\n    setFilters() {\n      this.$axios.get('public/service/set/filter/'+this.filterId).then(res =>{\n        res.data.filter.forEach(filter => {\n          filter.visible = true;\n          filter.elType = this.typeList[filter.type];\n          filter.selectedValue = '';\n\n          let type = filter.elType;\n\n          // 기존에 vuex에 저장된 필터 내용 가져오기\n          let store = find(this.$store.getters.filtered, 'keyword', filter.keyword);\n          if(store === undefined) {\n            store = find(this.$store.getters.filtered, 'param_id', filter.param_id);\n          }\n\n          filter.formType = {\n            input: 'round',\n            button: 'round',\n            box: 'round',\n            list: 'horizontal',\n            label: false\n          };\n\n          // 체크박스 그룹\n          if(type === 'c-input-checkboxGroup') {\n            // 버튼 모양 변경 - 'full'\n            if (this.$store.getters.commonStyle.filter &&\n              this.$store.getters.commonStyle.filter.checkbox &&\n              this.$store.getters.commonStyle.filter.checkbox === 'full') {\n              filter.elType = 'c-input-checkbox-full-group';\n            }\n\n            filter.options = this.computedCheckbox(filter.options);\n\n            if(store!==undefined) {\n              filter.value = store.set[0].value;\n            }\n          }\n          // 라디오버튼 그룹\n          else if(type === 'c-input-radiobuttonGroup') {\n            let options = [];\n            filter.options.forEach(item => {\n              options.push({\n                id: item.id,\n                value: item.id,\n                label: item.name\n              });\n            });\n\n            filter.options = options;\n\n            if(store!==undefined && store.value!==undefined) {\n              filter.value = store.value.value;\n            }\n\n            // 라디오버튼 모양 변경 - 'full'\n            if (this.$store.getters.commonStyle.filter &&\n              this.$store.getters.commonStyle.filter.radio &&\n              this.$store.getters.commonStyle.filter.radio === 'full') {\n              filter.elType = 'c-input-radio-full-buttonGroup';\n            }\n          }\n          // 지역\n          else if(type === 'c-input-regionForm') {\n            filter.placeholder = '지역을 선택해주세요';\n\n            if(store!==undefined) {\n              filter.value = {\n                sido: {\n                  id: store.set[0].value,\n                  label:store.set[0].label,\n                  name: store.set[0].label,\n                  value: store.set[0].value\n                },\n                sigungu: {\n                  id: store.set[1].value,\n                  name: store.set[1].label,\n                  label: store.set[1].label,\n                  value: store.set[1].value\n                }\n              };\n            }\n          }\n          // 레인지 듀얼\n          else if(type === 'c-input-rangeDual') {\n            let min = filter.options.min === 0 ? 1 : filter.options.min;\n            filter.value= [filter.options.min, filter.options.max];\n            filter.min= filter.options.min;\n            filter.max= filter.options.max;\n            filter.unit= filter.options.unit;\n            filter.interval= (filter.options.max / min) / 100 * min;\n\n            if(store!==undefined) {\n              let min = store.set[0].value === '' ? filter.min : store.set[0].value;\n              let max = store.set[1].value === '' ? filter.max : store.set[1].value;\n              filter.set[0].value = store.set[0].value;\n              filter.set[1].value = store.set[1].value;\n              filter.value = [min, max];\n            }\n          }\n\n          //카테고리\n          else if(filter.type === 'category') {\n            // 캐스캐이딩 드롭다운 내 드롭다운의 options 초기화\n            filter.dropdown = this.categories;\n            if(store!==undefined) {\n              filter.set[0].value = store.set[0].value;\n              filter.set[1].value = store.set[1].value;\n              filter.set[2].value = store.set[2].value;\n              filter.set[0].label = store.set[0].label;\n              filter.set[1].label = store.set[1].label;\n              filter.set[2].label = store.set[2].label;\n\n              if(store.set[0].value && store.set[0].value!=='') {\n                filter.selectedValue = store.set[0].label;\n                filter.value = {\n                  dropdown1: store.set[0].value,\n                  dropdown2: undefined\n                };\n\n                if(store.set[1].value && store.set[1].value!=='') {\n                  filter.selectedValue += \" \" + store.set[1].label;\n                  filter.value.dropdown2 = store.set[1].value;\n                }\n              }\n            }\n          }\n        });\n\n        this.filterData = res.data.filter;\n\n        // 정렬 설정\n\n        let elType = 'c-input-radiobuttonGroup';\n        // 라디오버튼 모양 변경 - 'full'\n        if (this.$store.getters.commonStyle.filter &&\n          this.$store.getters.commonStyle.filter.radio &&\n          this.$store.getters.commonStyle.filter.radio === 'full') {\n          elType = 'c-input-radio-full-buttonGroup';\n        }\n\n        // 정렬 (only active)\n        let sortsData = res.data.sort;\n        let sorts = sortsData.filter(srt => srt.is_active===true);\n        this.sortData = {\n          label: '정렬',\n          visible: true,\n          elType : elType,\n          selectedValue: '',\n          value: '',\n          options: sorts,\n          formType: {\n            list: 'vertical',\n          }\n        };\n        let sorted = this.$store.getters.sorted;\n        if(sorted) {\n          this.sortData.value = sorted.value;\n        }\n      });\n    },\n    computedCheckbox(items) {\n      let res = [];\n      for(let i=0; i<items.length; i++) {\n        let item = items[i];\n        res.push({\n          id: item.id,\n          checked: false,\n          label: item.name\n        });\n      }\n\n      return res;\n    },\n    updateValue(item, res) {\n      this.selectedValue = '';\n      if(item.type === 'number_range') {\n        item.set[0].value = res[0];\n        item.set[1].value = res[1];\n      }\n\n      else if(item.type === \"choice_radio\") {\n        item.set[0].value = res;\n      }\n\n      else if(item.type === 'address' && res.sido) {\n        item.set[0].value = res.sido.id;\n        item.set[0].label = res.sido.label;\n        item.set[1].value = res.sigungu ? res.sigungu.id : '';\n        item.set[1].label = res.sigungu ? res.sigungu.label : '';\n\n      }\n\n      else if(item.type === 'category') {\n        if(res.dropdown1) {\n          item.set[0].value = res.dropdown1;\n          item.set[0].label = find(item.dropdown,'id', res.dropdown1).label;\n        }\n        if(res.dropdown2) {\n          item.set[1].value = res.dropdown2;\n          item.set[1].label = find(item.dropdown,'id', res.dropdown2).label;\n        }\n      }\n\n      else if(item.type === \"choice_checkbox\") {\n        item.set[0].value = res;\n      }\n\n    }\n  }\n}\n",{"version":3,"sources":["FilterSort.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"FilterSort.vue","sourceRoot":"src/components/Components/Common","sourcesContent":["<template>\r\n  <div>\r\n    <!-- 아코디언 -->\r\n    <div v-for=\"(item,idx) in filterData\" :key=\"'filter-'+idx\">\r\n      <div class=\"grid-box unselect\" @click=\"item.visible = !item.visible\" style=\"padding:12px 16px\" :style=\"brandBgColor.sub\">\r\n        <div class=\"col-11 flex-between\">\r\n          <div :style=\"brandColor.help\">{{ item.label }}</div>\r\n          <div :style=\"brandColor.brand\" style=\"font-size:13px\">{{ item.selectedValue }}</div>\r\n        </div>\r\n        <div class=\"col-1 flex-end\">\r\n          <i class=\"material-icons\" :style=\"brandColor.sub\">{{ item.visible ? 'arrow_drop_up' : 'arrow_drop_down' }}</i>\r\n        </div>\r\n      </div>\r\n      <!-- 컨텐트 영역 -->\r\n      <div v-if=\"item.visible\" style=\"padding:20px\">\r\n        <component :is=\"item.elType\" v-bind=\"item\" :gutter=\"0\"\r\n                   :selectedValue.sync=\"item.selectedValue\"\r\n                   :formType=\"formTypeData\"\r\n                   :value.sync=\"item.value\"\r\n                   @update:value=\"res => updateValue(item, res)\"\r\n                   :radioButtonFull=\"{col: 4, gutter: 4}\"\r\n        ></component>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 정렬 -->\r\n    <div v-if=\"sortData && useSort\">\r\n      <div class=\"grid-box unselect\" @click=\"sortData.visible = !sortData.visible\" style=\"padding:16px\" :style=\"brandBgColor.sub\">\r\n        <div class=\"col-11 flex-between\">\r\n          <div :style=\"brandColor.help\">{{ sortData.label }}</div>\r\n          <div :style=\"brandColor.brand\" style=\"font-size:13px\">{{ sortData.selectedValue }}</div>\r\n        </div>\r\n        <div class=\"col-1 flex-end\">\r\n          <i class=\"material-icons\" :style=\"brandColor.sub\">{{ sortData.visible ? 'arrow_drop_up' : 'arrow_drop_down' }}</i>\r\n        </div>\r\n      </div>\r\n      <!-- 컨텐트 영역 -->\r\n      <div v-if=\"sortData.visible\" style=\"padding:20px\">\r\n        <component :is=\"sortData.elType\" v-bind=\"sortData\" :gutter=\"0\"\r\n                   :selectedValue.sync=\"sortData.selectedValue\"\r\n                   :value.sync=\"sortData.value\" @update:value=\"res => updateValue(sortData, res)\"></component>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: \"FilterSort\",\r\n    props: {\r\n      filterId: {\r\n        type: Number,\r\n        default: 1\r\n      },\r\n      useSort: {       // Sort 사용 여부\r\n        type: Boolean,\r\n        default: true\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        formTypeData: {\r\n          input: 'round',         // round, underline\r\n          button: 'round',\r\n          box: 'round',\r\n          list: 'vertical',\r\n          label: false,\r\n          align: 'block',  // block, center, space-between, flex-start, flex-end\r\n          inputIcon: false,\r\n          dropdown: 'list'      // list, modal\r\n        },\r\n        categories: [],\r\n        filterData: [],\r\n        sortData: undefined,\r\n        typeList: {\r\n          'choice_checkbox': 'c-input-checkboxGroup',\r\n          'choice_radio': 'c-input-radiobuttonGroup',\r\n          'address': 'c-input-regionForm',\r\n          'number_range': 'c-input-rangeDual',\r\n          'date_range': 'c-input-dateRange',\r\n          'date': 'c-input-date',\r\n          'date_time': ['c-input-date', 'c-input-time'],\r\n          'date_time_range': 'c-input-dateTimeRange',\r\n          'category': 'c-input-cascadingDropdown'\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      // 카테고리 내용 미리 받아두기\r\n      this.setCategories();\r\n    },\r\n    methods: {\r\n      setCategories() {\r\n        this.$axios.get('public/category?depth=2').then(res => {\r\n          this.categories = [];\r\n          for(let i=0; i<res.data.length; i++) {\r\n            let cat1 = res.data[i];\r\n            let child = [];\r\n            if (cat1.child) {\r\n              for (let j = 0; j < cat1.child.length; j++) {\r\n                let cat2 = cat1.child[j];\r\n                let child2 = [];\r\n                for (let k = 0; k < cat2.child.length; k++) {\r\n                  let cat3 = cat2.child[k];\r\n                  child2.push({id: cat3.id, label: cat3.name, value: cat3.id});\r\n                }\r\n                cat2 = {id: cat2.id, label: cat2.name, value: cat2.id, child: child2};\r\n                child.push(cat2);\r\n              }\r\n            }\r\n            cat1 = {id: cat1.id, label: cat1.name, value: cat1.id, child: child};\r\n            this.categories.push(cat1);\r\n          }\r\n\r\n          // 백엔드에서 필터 가져와서 적용\r\n          this.setFilters();\r\n        });\r\n      },\r\n      setFilters() {\r\n        this.$axios.get('public/service/set/filter/'+this.filterId).then(res =>{\r\n          res.data.filter.forEach(filter => {\r\n            filter.visible = true;\r\n            filter.elType = this.typeList[filter.type];\r\n            filter.selectedValue = '';\r\n\r\n            let type = filter.elType;\r\n\r\n            // 기존에 vuex에 저장된 필터 내용 가져오기\r\n            let store = find(this.$store.getters.filtered, 'keyword', filter.keyword);\r\n            if(store === undefined) {\r\n              store = find(this.$store.getters.filtered, 'param_id', filter.param_id);\r\n            }\r\n\r\n            filter.formType = {\r\n              input: 'round',\r\n              button: 'round',\r\n              box: 'round',\r\n              list: 'horizontal',\r\n              label: false\r\n            };\r\n\r\n            // 체크박스 그룹\r\n            if(type === 'c-input-checkboxGroup') {\r\n              // 버튼 모양 변경 - 'full'\r\n              if (this.$store.getters.commonStyle.filter &&\r\n                this.$store.getters.commonStyle.filter.checkbox &&\r\n                this.$store.getters.commonStyle.filter.checkbox === 'full') {\r\n                filter.elType = 'c-input-checkbox-full-group';\r\n              }\r\n\r\n              filter.options = this.computedCheckbox(filter.options);\r\n\r\n              if(store!==undefined) {\r\n                filter.value = store.set[0].value;\r\n              }\r\n            }\r\n            // 라디오버튼 그룹\r\n            else if(type === 'c-input-radiobuttonGroup') {\r\n              let options = [];\r\n              filter.options.forEach(item => {\r\n                options.push({\r\n                  id: item.id,\r\n                  value: item.id,\r\n                  label: item.name\r\n                });\r\n              });\r\n\r\n              filter.options = options;\r\n\r\n              if(store!==undefined && store.value!==undefined) {\r\n                filter.value = store.value.value;\r\n              }\r\n\r\n              // 라디오버튼 모양 변경 - 'full'\r\n              if (this.$store.getters.commonStyle.filter &&\r\n                this.$store.getters.commonStyle.filter.radio &&\r\n                this.$store.getters.commonStyle.filter.radio === 'full') {\r\n                filter.elType = 'c-input-radio-full-buttonGroup';\r\n              }\r\n            }\r\n            // 지역\r\n            else if(type === 'c-input-regionForm') {\r\n              filter.placeholder = '지역을 선택해주세요';\r\n\r\n              if(store!==undefined) {\r\n                filter.value = {\r\n                  sido: {\r\n                    id: store.set[0].value,\r\n                    label:store.set[0].label,\r\n                    name: store.set[0].label,\r\n                    value: store.set[0].value\r\n                  },\r\n                  sigungu: {\r\n                    id: store.set[1].value,\r\n                    name: store.set[1].label,\r\n                    label: store.set[1].label,\r\n                    value: store.set[1].value\r\n                  }\r\n                };\r\n              }\r\n            }\r\n            // 레인지 듀얼\r\n            else if(type === 'c-input-rangeDual') {\r\n              let min = filter.options.min === 0 ? 1 : filter.options.min;\r\n              filter.value= [filter.options.min, filter.options.max];\r\n              filter.min= filter.options.min;\r\n              filter.max= filter.options.max;\r\n              filter.unit= filter.options.unit;\r\n              filter.interval= (filter.options.max / min) / 100 * min;\r\n\r\n              if(store!==undefined) {\r\n                let min = store.set[0].value === '' ? filter.min : store.set[0].value;\r\n                let max = store.set[1].value === '' ? filter.max : store.set[1].value;\r\n                filter.set[0].value = store.set[0].value;\r\n                filter.set[1].value = store.set[1].value;\r\n                filter.value = [min, max];\r\n              }\r\n            }\r\n\r\n            //카테고리\r\n            else if(filter.type === 'category') {\r\n              // 캐스캐이딩 드롭다운 내 드롭다운의 options 초기화\r\n              filter.dropdown = this.categories;\r\n              if(store!==undefined) {\r\n                filter.set[0].value = store.set[0].value;\r\n                filter.set[1].value = store.set[1].value;\r\n                filter.set[2].value = store.set[2].value;\r\n                filter.set[0].label = store.set[0].label;\r\n                filter.set[1].label = store.set[1].label;\r\n                filter.set[2].label = store.set[2].label;\r\n\r\n                if(store.set[0].value && store.set[0].value!=='') {\r\n                  filter.selectedValue = store.set[0].label;\r\n                  filter.value = {\r\n                    dropdown1: store.set[0].value,\r\n                    dropdown2: undefined\r\n                  };\r\n\r\n                  if(store.set[1].value && store.set[1].value!=='') {\r\n                    filter.selectedValue += \" \" + store.set[1].label;\r\n                    filter.value.dropdown2 = store.set[1].value;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          });\r\n\r\n          this.filterData = res.data.filter;\r\n\r\n          // 정렬 설정\r\n\r\n          let elType = 'c-input-radiobuttonGroup';\r\n          // 라디오버튼 모양 변경 - 'full'\r\n          if (this.$store.getters.commonStyle.filter &&\r\n            this.$store.getters.commonStyle.filter.radio &&\r\n            this.$store.getters.commonStyle.filter.radio === 'full') {\r\n            elType = 'c-input-radio-full-buttonGroup';\r\n          }\r\n\r\n          // 정렬 (only active)\r\n          let sortsData = res.data.sort;\r\n          let sorts = sortsData.filter(srt => srt.is_active===true);\r\n          this.sortData = {\r\n            label: '정렬',\r\n            visible: true,\r\n            elType : elType,\r\n            selectedValue: '',\r\n            value: '',\r\n            options: sorts,\r\n            formType: {\r\n              list: 'vertical',\r\n            }\r\n          };\r\n          let sorted = this.$store.getters.sorted;\r\n          if(sorted) {\r\n            this.sortData.value = sorted.value;\r\n          }\r\n        });\r\n      },\r\n      computedCheckbox(items) {\r\n        let res = [];\r\n        for(let i=0; i<items.length; i++) {\r\n          let item = items[i];\r\n          res.push({\r\n            id: item.id,\r\n            checked: false,\r\n            label: item.name\r\n          });\r\n        }\r\n\r\n        return res;\r\n      },\r\n      updateValue(item, res) {\r\n        this.selectedValue = '';\r\n        if(item.type === 'number_range') {\r\n          item.set[0].value = res[0];\r\n          item.set[1].value = res[1];\r\n        }\r\n\r\n        else if(item.type === \"choice_radio\") {\r\n          item.set[0].value = res;\r\n        }\r\n\r\n        else if(item.type === 'address' && res.sido) {\r\n          item.set[0].value = res.sido.id;\r\n          item.set[0].label = res.sido.label;\r\n          item.set[1].value = res.sigungu ? res.sigungu.id : '';\r\n          item.set[1].label = res.sigungu ? res.sigungu.label : '';\r\n\r\n        }\r\n\r\n        else if(item.type === 'category') {\r\n          if(res.dropdown1) {\r\n            item.set[0].value = res.dropdown1;\r\n            item.set[0].label = find(item.dropdown,'id', res.dropdown1).label;\r\n          }\r\n          if(res.dropdown2) {\r\n            item.set[1].value = res.dropdown2;\r\n            item.set[1].label = find(item.dropdown,'id', res.dropdown2).label;\r\n          }\r\n        }\r\n\r\n        else if(item.type === \"choice_checkbox\") {\r\n          item.set[0].value = res;\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n</script>\r\n"]}]}