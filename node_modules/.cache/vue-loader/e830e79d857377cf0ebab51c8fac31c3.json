{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Slot/ListVertical.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Slot/ListVertical.vue","mtime":1605259990000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SearchList from \"@/components/Components/Common/SearchList\"\nimport Pagination from \"@/components/Components/Common/Pagination\"\nimport ClickOutside from 'vue-click-outside'\nexport default {\n  name: \"ListVertical\",\n  components: {\n    Pagination,\n    SearchList\n  },\n  directives: {\n    ClickOutside\n  },\n  props: {\n    sortOptions: {\n      type: Array,\n      required: false\n    },\n    sortStraight: {\n      type: Array,\n      required: false\n    },\n    pagingData: {\n      type: Object,\n      required: false\n    },\n    pageNum: {\n      type: Number,\n      required: false,\n      default: 10\n    },\n    search: {\n      type: Boolean,\n      required: false\n    },\n    sortOptionsStyle: {\n      type: Object,\n      required: false\n    },\n    selectedLabelStyle: {\n      type: Object,\n      required: false\n    },\n    unselectedLabelStyle: {\n      type: Object,\n      required: false\n    },\n    hideList: {\n      type: Boolean,\n      required: false,\n      default: false\n    }      \n  },\n  created() {\n    this.init();\n  },\n  data() {\n    return {\n      PrimaryColor: '',\n      borderRadius: '12px',\n      dropdown: {\n        selected: {\n          label: '',\n          value: ''\n        },\n        options: [],\n        isOpen: false,\n        mouseOverIndex: -1\n      },\n      selectedSort: {\n        label: '',\n        value: ''\n      }\n    }\n  },\n  computed: {\n    arrowStyle() {\n      return {\n        color: this.getColor('브랜드 강조 색상')\n      }\n    },\n    selItemStyle() {\n      return {\n        fontSize: '13px',\n        padding: '6px 8px',\n        color: this.getColor('보조 내용 색상')\n      }\n    },\n    itemStyle() {\n      return {\n        fontSize: '13px',\n        padding: '6px 8px',\n        backgroundColor: this.getColor('기본 배경 색상'),\n        color: this.getColor('보조 내용 색상')\n      }\n    },\n  },\n  methods: {\n    init() {\n      if(this.sortOptions && this.sortOptions.length>0) {\n        this.dropdown.selected =this.sortOptions[0];\n        this.dropdown.options =this.sortOptions;\n      }\n      if(this.sortStraight) {\n        this.selectedSort = this.sortStraight[0];\n      }\n    },\n    mouseOverStyle(idx) {\n      let deco = {};\n      if ( this.dropdown.mouseOverIndex === idx ) {\n        deco.backgroundColor = this.getColor('보조 배경 색상');\n      }\n      return deco;\n    },\n    toggleList() {\n      this.dropdown.isOpen = !this.dropdown.isOpen;\n    },\n    closeDropdown() {\n      this.dropdown.isOpen = false;\n    },\n    clickItem(item) {\n      this.dropdown.selected = item;\n      this.dropdown.isOpen = false;\n      this.$emit('selectSorted', item.value);\n    },\n    clickSort(item) {\n      this.selectedSort = item;\n      this.$emit('selectSorted', item.value);\n    },\n    getPaginationNum(num) {\n      this.$emit('curPaginationNum', num)\n    },\n    getSearch(type, word) {\n      this.$emit('getSearch', type, word);\n    },\n    labelStyle(idx) {\n      let deco = {\n        padding: '8px',\n        fontSize: '16px',\n\n      };\n\n      if(idx===this.sortStraight.indexOf(this.selectedSort)) {\n        deco.fontFamily = 'Arita Dotum SemiBold';\n        deco.color = `${this.getColor('기본 내용 색상')}`\n        if (this.selectedLabelStyle) return this.selectedLabelStyle;          \n      }\n      else {\n        deco.fontFamily = 'Arita Dotum Medium';\n        deco.color = `${this.getColor('도움말 및 비활성내용 색상')}`\n        if (this.unselectedLabelStyle) return this.unselectedLabelStyle;          \n      }\n\n      return deco;\n    },\n  },\n  watch: {\n    sortOptions() {\n      this.dropdown.selected =this.sortOptions[0];\n      this.dropdown.options =this.sortOptions;\n    },\n    sortStraight(n) {\n      this.selectedSort = this.sortStraight[0];\n    }\n  }\n}\n",{"version":3,"sources":["ListVertical.vue"],"names":[],"mappingsfile":"ListVertical.vue","sourceRoot":"src/components/Components/Slot","sourcesContent":["<template>\r\n<div>\r\n  <!--<div class=\"flex-between full-width\" style=\"margin-bottom:8px\">-->\r\n  <div class=\"flex-between full-width wrap\">\r\n    <div class=\"full-width\">\r\n      <slot name=\"title\"></slot>\r\n    </div>\r\n    <div class=\"full-width\">\r\n      <search-list v-if=\"search\"\r\n        @getSearch=\"(type, word) => getSearch(type, word)\"></search-list>\r\n    </div>\r\n    <div class=\"full-width\">\r\n      <slot name=\"head\"></slot>\r\n    </div>\r\n\r\n    <!-- 순서대로 display block으로 나열되는 가운데 삽입하고 있을 경우 사용 가능 -->\r\n    <slot name=\"above-sort\"></slot>\r\n\r\n    <div v-if=\"sortStraight\" class=\"full-width flex-end\"\r\n      style=\"margin-top:24px\">\r\n      <div v-for=\"(item,idx) in sortStraight\" :key=\"'key'+idx\"\r\n        :style=\"labelStyle(idx)\" class=\"unselect\"\r\n        v-show=\"item.is_active || item.is_active === undefined\"\r\n        @click=\"clickSort(item)\">\r\n        {{ item.label }}\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 리스트 정렬 드롭 다운 -->\r\n    <div v-if=\"sortOptions\"\r\n        v-click-outside=\"closeDropdown\" \r\n        style=\"margin:12px 0\" :style=\"sortOptionsStyle\">\r\n      <!-- 드롭다운 -->\r\n      <div class=\"dropdown unselect\" @click.stop.prevent=\"toggleList\">\r\n        <div :style=\"selItemStyle\" v-if=\"dropdown.selected\">{{ dropdown.selected.label }}</div>\r\n        <i class=\"material-icons drop-icon\" :style=\"arrowStyle\">{{ dropdown.isOpen ? 'arrow_drop_up' : 'arrow_drop_down' }}</i>\r\n        <!-- Dropdown Item -->\r\n        <ul v-if=\"dropdown.isOpen\" class=\"dropdown-list\">\r\n          <li class=\"dropdown-item\"\r\n              v-for=\"(item, idx) in dropdown.options\"\r\n              :key=\"idx\"\r\n              v-show=\"item.is_active || item.is_active === undefined\"\r\n              :style=\"[itemStyle, mouseOverStyle(idx)]\"\r\n              @click.stop.prevent=\"clickItem(item)\"\r\n              @mouseover=\"dropdown.mouseOverIndex=idx\"\r\n              @mouseleave=\"dropdown.mouseOverIndex=-1\">\r\n            {{ item.label }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- 한 요소에서 flex시켜 나열하고 싶을 때 위의 slot 대신 사용 가능 -->\r\n  <slot name=\"middle-content\"></slot>\r\n\r\n  <!-- middle-content slot 밑에 flex 아닌 block으로 나열하고 싶을 때 사용 가능 -->\r\n  <slot name=\"middle-content-second\"></slot>\r\n\r\n  <slot name=\"card\" v-if=\"!hideList\"></slot>\r\n\r\n  <div class=\"grid-box\" v-if=\"!hideList\">\r\n    <slot name=\"card-grid\"></slot>\r\n  </div>\r\n\r\n  <slot name=\"more\"></slot>\r\n\r\n  <pagination :pageNum=\"pageNum\" :pagingData=\"pagingData\" v-if=\"pagingData\"\r\n      @curPaginationNum=\"num => getPaginationNum(num)\"\r\n      :arrowEnd=\"true\"></pagination>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n  import SearchList from \"@/components/Components/Common/SearchList\"\r\n  import Pagination from \"@/components/Components/Common/Pagination\"\r\n  import ClickOutside from 'vue-click-outside'\r\n  export default {\r\n    name: \"ListVertical\",\r\n    components: {\r\n      Pagination,\r\n      SearchList\r\n    },\r\n    directives: {\r\n      ClickOutside\r\n    },\r\n    props: {\r\n      sortOptions: {\r\n        type: Array,\r\n        required: false\r\n      },\r\n      sortStraight: {\r\n        type: Array,\r\n        required: false\r\n      },\r\n      pagingData: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      pageNum: {\r\n        type: Number,\r\n        required: false,\r\n        default: 10\r\n      },\r\n      search: {\r\n        type: Boolean,\r\n        required: false\r\n      },\r\n      sortOptionsStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      selectedLabelStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      unselectedLabelStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      hideList: {\r\n        type: Boolean,\r\n        required: false,\r\n        default: false\r\n      }      \r\n    },\r\n    created() {\r\n      this.init();\r\n    },\r\n    data() {\r\n      return {\r\n        PrimaryColor: '',\r\n        borderRadius: '12px',\r\n        dropdown: {\r\n          selected: {\r\n            label: '',\r\n            value: ''\r\n          },\r\n          options: [],\r\n          isOpen: false,\r\n          mouseOverIndex: -1\r\n        },\r\n        selectedSort: {\r\n          label: '',\r\n          value: ''\r\n        }\r\n      }\r\n    },\r\n    computed: {\r\n      arrowStyle() {\r\n        return {\r\n          color: this.getColor('브랜드 강조 색상')\r\n        }\r\n      },\r\n      selItemStyle() {\r\n        return {\r\n          fontSize: '13px',\r\n          padding: '6px 8px',\r\n          color: this.getColor('보조 내용 색상')\r\n        }\r\n      },\r\n      itemStyle() {\r\n        return {\r\n          fontSize: '13px',\r\n          padding: '6px 8px',\r\n          backgroundColor: this.getColor('기본 배경 색상'),\r\n          color: this.getColor('보조 내용 색상')\r\n        }\r\n      },\r\n    },\r\n    methods: {\r\n      init() {\r\n        if(this.sortOptions && this.sortOptions.length>0) {\r\n          this.dropdown.selected =this.sortOptions[0];\r\n          this.dropdown.options =this.sortOptions;\r\n        }\r\n        if(this.sortStraight) {\r\n          this.selectedSort = this.sortStraight[0];\r\n        }\r\n      },\r\n      mouseOverStyle(idx) {\r\n        let deco = {};\r\n        if ( this.dropdown.mouseOverIndex === idx ) {\r\n          deco.backgroundColor = this.getColor('보조 배경 색상');\r\n        }\r\n        return deco;\r\n      },\r\n      toggleList() {\r\n        this.dropdown.isOpen = !this.dropdown.isOpen;\r\n      },\r\n      closeDropdown() {\r\n        this.dropdown.isOpen = false;\r\n      },\r\n      clickItem(item) {\r\n        this.dropdown.selected = item;\r\n        this.dropdown.isOpen = false;\r\n        this.$emit('selectSorted', item.value);\r\n      },\r\n      clickSort(item) {\r\n        this.selectedSort = item;\r\n        this.$emit('selectSorted', item.value);\r\n      },\r\n      getPaginationNum(num) {\r\n        this.$emit('curPaginationNum', num)\r\n      },\r\n      getSearch(type, word) {\r\n        this.$emit('getSearch', type, word);\r\n      },\r\n      labelStyle(idx) {\r\n        let deco = {\r\n          padding: '8px',\r\n          fontSize: '16px',\r\n\r\n        };\r\n\r\n        if(idx===this.sortStraight.indexOf(this.selectedSort)) {\r\n          deco.fontFamily = 'Arita Dotum SemiBold';\r\n          deco.color = `${this.getColor('기본 내용 색상')}`\r\n          if (this.selectedLabelStyle) return this.selectedLabelStyle;          \r\n        }\r\n        else {\r\n          deco.fontFamily = 'Arita Dotum Medium';\r\n          deco.color = `${this.getColor('도움말 및 비활성내용 색상')}`\r\n          if (this.unselectedLabelStyle) return this.unselectedLabelStyle;          \r\n        }\r\n\r\n        return deco;\r\n      },\r\n    },\r\n    watch: {\r\n      sortOptions() {\r\n        this.dropdown.selected =this.sortOptions[0];\r\n        this.dropdown.options =this.sortOptions;\r\n      },\r\n      sortStraight(n) {\r\n        this.selectedSort = this.sortStraight[0];\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n  .dropdown\r\n    display flex\r\n    position relative\r\n    align-items center\r\n  .drop-icon\r\n    font-size 17px\r\n  .dropdown-list\r\n    box-shadow 0 6px 12px 1px #f0f0f096\r\n    position absolute\r\n    top 28px\r\n    left 0\r\n    right 0\r\n    z-index 1\r\n</style>"]}]}