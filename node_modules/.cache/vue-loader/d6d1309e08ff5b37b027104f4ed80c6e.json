{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Block/BlockBannerMobile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Block/BlockBannerMobile.vue","mtime":1605260035000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BlockMixin from \"@/components/Mixins/BlockMixin\"\n\nexport default {\n  name: 'BlockBannerMobile',\n  components: {\n\n  },\n  mixins: [\n    BlockMixin\n  ],\n  props: {\n\n  },\n  data() {\n    return {\n      \"banner\": [],\n      \"reRender\": true,\n      \"imgHeight\": \"100%\"\n    }\n  },\n  created() {\n      this.init()\n    },\n  mounted() {\n    this.$nextTick(()=>{\n      this.imgHeight = window.innerWidth * 0.55 + 'px';\n    });\n  },\n  \n  methods: {\n    reRenderSlick() {\n      if(this.reRender === false) return;\n      this.reRender = false;\n      this.$nextTick(() => {\n        this.reRender = true;\n      });\n    },\n    handleAfterChange(event, slick, currentSlide) {\n        this.currentSlide = currentSlide;\n      },\n    setScreenWidth() {\n        this.screenWidth = window.innerWidth;\n      },\n    init() {\n        this.getData();\n      },\n    getData() {\n        let url = 'public/banner/list'\n        if(this.bannerId !== 0) {\n          this.getBanner(`public/banner/1`);\n\n        }else {\n          if(this.$store.getters.device==='pc') {\n            url += '/pc'\n          }\n          this.getBannerList(url);\n        }\n        \n      },\n    getBanner(url) {\n      this.$axios.get(url).then(res=>{\n        this.banner = [];\n\n        let date = new Date().getTime();\n        let start_date = new Date(res.data.start_date).getTime();\n        let end_date = new Date(res.data.end_date).getTime();\n        \n        if (date > start_date || date < end_date) {\n          this.isShowing = true;\n        } else {\n          this.isShowing = false;\n        }\n      \n        // image banner\n        if(res.data.type === 0) {\n          for(let i=0; i<res.data.imgs.length; i++) {\n            let img = res.data.imgs[i];\n            this.banner.push({\n                url: img,\n                link: res.data.links[i]\n            });\n          }\n          this.imgBannerRatio = res.data.pc ? res.data.ratio_pc : res.data.ratio;\n        }\n        \n        this.reRenderSlick();\n        this.$emit('getBanner');\n      }).catch(()=>{\n        setTimeout(() => {\n          \n        }, 700);\n      });\n    },\n    getBannerList(url) {\n      this.$axios.get(url).then(res=>{\n        if (res.data.start_date && res.data.end_date) {\n          let date = new Date().getTime();\n          let start_date = new Date(res.data.start_date).getTime();\n          let end_date = new Date(res.data.end_date).getTime();\n          \n          if (date > start_date || date < end_date) {\n            this.isShowing = true;\n          } else {\n            this.isShowing = false;\n          }\n        } else {\n          this.isShowing = true;\n        }\n\n        if(res.data.length>0) {\n          let imgBanner = res.data.filter(item => item.data[0].type===0);\n          if(imgBanner.length>0) {\n            this.imgBannerRatio = imgBanner[0].ratio;\n            this.banner = imgBanner[0].data;\n          }\n\n        }\n        this.reRenderSlick();\n        this.$emit('getBanner');\n      }).catch(()=>{\n        this.$emit('getBanner');\n      });\n    }\n  },\n  computed: {\n    containerStyle() {\n      return {\n        height: `${this.imgHeight}px`,\n      }\n    },\n    imgStyle() {\n      return {\n        width: '100%',\n        // height: this.imgHeight,\n        objectFit: 'cover'\n      }\n    },\n    slickOptions() {\n        return {\n          infinite: true,\n          variableWidth: false,\n          centerPadding: '',\n          centerMode: false,\n          autoplay: true,\n          arrows: false,\n          dots: false,\n          slidesToShow: 1,\n          slidesToScroll: 1,\n          autoplaySpeed: 3000,\n        }\n      }\n  },\n  watch: {\n    \n  }\n}\n",{"version":3,"sources":["BlockBannerMobile.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"BlockBannerMobile.vue","sourceRoot":"src/components/Components/Block","sourcesContent":["<template>\n<div class=\"full-width\" :style=\"[brandBgColor.main, containerStyle]\" name=\"Banner\">\n  <slick :options=\"slickOptions\" ref=\"slick\"\n    v-if=\"reRender\"\n    @afterChange=\"handleAfterChange\">\n    <div v-for=\"(item,idx) in banner\" :key=\"'img-'+idx\">\n      <img :src=\"item.url\" :style=\"imgStyle\">\n    </div>\n  </slick>\n  </div>\n</template>\n<script>\nimport BlockMixin from \"@/components/Mixins/BlockMixin\"\n\nexport default {\n  name: 'BlockBannerMobile',\n  components: {\n\n  },\n  mixins: [\n    BlockMixin\n  ],\n  props: {\n\n  },\n  data() {\n    return {\n      \"banner\": [],\n      \"reRender\": true,\n      \"imgHeight\": \"100%\"\n    }\n  },\n  created() {\n      this.init()\n    },\n  mounted() {\n    this.$nextTick(()=>{\n      this.imgHeight = window.innerWidth * 0.55 + 'px';\n    });\n  },\n  \n  methods: {\n    reRenderSlick() {\n      if(this.reRender === false) return;\n      this.reRender = false;\n      this.$nextTick(() => {\n        this.reRender = true;\n      });\n    },\n    handleAfterChange(event, slick, currentSlide) {\n        this.currentSlide = currentSlide;\n      },\n    setScreenWidth() {\n        this.screenWidth = window.innerWidth;\n      },\n    init() {\n        this.getData();\n      },\n    getData() {\n        let url = 'public/banner/list'\n        if(this.bannerId !== 0) {\n          this.getBanner(`public/banner/1`);\n\n        }else {\n          if(this.$store.getters.device==='pc') {\n            url += '/pc'\n          }\n          this.getBannerList(url);\n        }\n        \n      },\n    getBanner(url) {\n      this.$axios.get(url).then(res=>{\n        this.banner = [];\n\n        let date = new Date().getTime();\n        let start_date = new Date(res.data.start_date).getTime();\n        let end_date = new Date(res.data.end_date).getTime();\n        \n        if (date > start_date || date < end_date) {\n          this.isShowing = true;\n        } else {\n          this.isShowing = false;\n        }\n      \n        // image banner\n        if(res.data.type === 0) {\n          for(let i=0; i<res.data.imgs.length; i++) {\n            let img = res.data.imgs[i];\n            this.banner.push({\n                url: img,\n                link: res.data.links[i]\n            });\n          }\n          this.imgBannerRatio = res.data.pc ? res.data.ratio_pc : res.data.ratio;\n        }\n        \n        this.reRenderSlick();\n        this.$emit('getBanner');\n      }).catch(()=>{\n        setTimeout(() => {\n          \n        }, 700);\n      });\n    },\n    getBannerList(url) {\n      this.$axios.get(url).then(res=>{\n        if (res.data.start_date && res.data.end_date) {\n          let date = new Date().getTime();\n          let start_date = new Date(res.data.start_date).getTime();\n          let end_date = new Date(res.data.end_date).getTime();\n          \n          if (date > start_date || date < end_date) {\n            this.isShowing = true;\n          } else {\n            this.isShowing = false;\n          }\n        } else {\n          this.isShowing = true;\n        }\n\n        if(res.data.length>0) {\n          let imgBanner = res.data.filter(item => item.data[0].type===0);\n          if(imgBanner.length>0) {\n            this.imgBannerRatio = imgBanner[0].ratio;\n            this.banner = imgBanner[0].data;\n          }\n\n        }\n        this.reRenderSlick();\n        this.$emit('getBanner');\n      }).catch(()=>{\n        this.$emit('getBanner');\n      });\n    }\n  },\n  computed: {\n    containerStyle() {\n      return {\n        height: `${this.imgHeight}px`,\n      }\n    },\n    imgStyle() {\n      return {\n        width: '100%',\n        // height: this.imgHeight,\n        objectFit: 'cover'\n      }\n    },\n    slickOptions() {\n        return {\n          infinite: true,\n          variableWidth: false,\n          centerPadding: '',\n          centerMode: false,\n          autoplay: true,\n          arrows: false,\n          dots: false,\n          slidesToShow: 1,\n          slidesToScroll: 1,\n          autoplaySpeed: 3000,\n        }\n      }\n  },\n  watch: {\n    \n  }\n}\n</script>\n\n\n"]}]}