{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/components/Components/Slot/FooterComponent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Components/Slot/FooterComponent.vue","mtime":1605259990000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport Vue from 'vue'\nimport uuidv4 from \"uuid/v4\";\nimport CommonApiMixin from \"@/components/Mixins/CommonApiMixin\";\nvar css = require('css');\n\nexport default {\n  name: \"FooterComponent\",\n  mixins: [\n    CommonApiMixin\n  ],\n  \n  created() {\n    this.setInit();\n  },\n\n  data() {\n    return {\n      key: '',\n      props: undefined,\n      toggle:false,\n      jsonData: undefined\n    }\n  },\n\n  computed: {\n  },\n\n  methods: {\n    setInit() {\n      Vue.component(\n        'FooterComp',\n        (resolve) => this.getAsync(resolve)\n      );\n    },\n    setStyles(value) {\n      value = value.replace(/<br>/gi, '\\n');\n      let el = document.getElementById(\"lp_style\");\n      if(el === null) {\n        el = document.createElement(\"style\");\n        el.setAttribute(\"type\", \"text/css\");\n        el.setAttribute('id', 'lp_style');\n        let head = document.getElementsByTagName('head')[0];\n        head.appendChild(el);\n      }\n      if(el.innerText.indexOf(value)===-1)\n        el.innerText += value;\n    },\n    getAsync(resolve) {\n      let footer = this.$store.getters.device==='mobile' ? 'FooterMobile' : 'FooterPc';\n      this.request.common.get(`https://launchpack-${this.$store.getters.service.service_key}.s3.ap-northeast-2.amazonaws.com/json_file/Footer/${footer}`)\n      .then(res=> {\n        let component = res.data;\n\n        let props = component.props;\n        Object.keys(props).forEach(key => {\n          if(props[key].type && typeof(props[key].type) === \"string\") {\n            props[key].type = eval(`(${props[key].type})`);\n          }\n          if(props[key].default && typeof(props[key].default) === \"string\"\n            && props[key].default.indexOf('function()')>-1) {\n            props[key].default = Function(props[key].default.replace('function()', ''));\n          }\n        });\n\n        let data = component.data;\n        Object.keys(data).forEach(key=> {\n          if(data[key] === 'undefined') {\n            data[key] = undefined;\n          }\n        });\n\n        let methods = this.getMethods(component.methods);\n        let computed = this.getMethods(component.computed);\n        let watches = this.getMethods(component.watch);\n        let mixins = component.mixins;\n        let lifeCycles = {};\n        Object.keys(component.lifeCycles).forEach(item => {\n          lifeCycles[item] = Function(component.lifeCycles[item].replace(/\\$store/gi, '$store'));\n        });\n\n        let templates = component.templates.replace(/\\$store/gi, '$store');\n\n        let scopeId = `data-v-${uuidv4().substring(0,8)}`;\n\n\n        let styles = component.styles_scoped;\n\n        if(styles) {\n          let parsedCss = css.parse(styles);\n          parsedCss.stylesheet.rules.forEach(rule => {\n\n            if (rule.media) {\n              rule.rules.forEach(inRule => {\n                for (let i = 0; i < inRule.selectors.length; i++) {\n                  let sels = '';\n                  inRule.selectors[i].split(' ').forEach(sel => {\n                    if (sel !== '&' && sel !== '>') {\n                      sel += `[${scopeId}]`;\n                    }\n                    sels += sel + ' ';\n                  });\n                  inRule.selectors[i] = sels;\n                }\n              });\n            }\n\n            else {\n              for (let i = 0; i < rule.selectors.length; i++) {\n                let sels = '';\n                rule.selectors[i].split(' ').forEach(sel => {\n                  if (sel !== '&' && sel !== '>') {\n                    sel += `[${scopeId}]`;\n                  }\n                  sels += sel + ' ';\n                });\n                rule.selectors[i] = sels;\n              }\n            }\n          });\n\n          //this.$store.commit('setHeadStyles', css.stringify(parsedCss) + '\\n');\n          this.setStyles(css.stringify(parsedCss)+'\\n');\n        }\n\n        \n        let vueValues = {\n          name: `${footer}`,\n          template: templates,\n          props: props,\n          data() { return data },\n          computed: computed,\n          methods: methods,\n          watch: watches,\n          mixins: mixins,\n          _scopeId: scopeId\n        };\n        \n        Object.keys(lifeCycles).forEach(item => {\n          vueValues[item] = lifeCycles[item];\n        });\n\n        resolve(vueValues);\n        this.toggle = true\n      }).catch(()=> {\n        resolve({\n          template: '',\n        });\n        this.toggle = false;\n      });\n    },\n    getMethods(methods) {\n      let result = {};\n      methods.forEach(code => {\n        code.name = code.name.replace(/'/g, '');\n\n        // code 내에 vuex 치환\n        //this.$store.commit('setUser', val)\n        code.code = code.code.replace(/\\$store/gi, '$store');\n\n        if(code.name.indexOf('/*') === 0 || code.name.indexOf('//') === 0) {\n          let names = code.name.split('\\n');\n          code.name = names[names.length-1].trim();\n        }\n\n        result[code.name] = code.params ? Function(code.params, code.code) : Function(code.code);\n      });\n      return result;\n    },\n  }\n}\n",{"version":3,"sources":["FooterComponent.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"FooterComponent.vue","sourceRoot":"src/components/Components/Slot","sourcesContent":["<template>\r\n  <footer-comp></footer-comp>\r\n</template>\r\n\r\n<script>\r\n  import Vue from 'vue'\r\n  import uuidv4 from \"uuid/v4\";\r\n  import CommonApiMixin from \"@/components/Mixins/CommonApiMixin\";\r\n  var css = require('css');\r\n\r\n  export default {\r\n    name: \"FooterComponent\",\r\n    mixins: [\r\n      CommonApiMixin\r\n    ],\r\n    \r\n    created() {\r\n      this.setInit();\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        key: '',\r\n        props: undefined,\r\n        toggle:false,\r\n        jsonData: undefined\r\n      }\r\n    },\r\n\r\n    computed: {\r\n    },\r\n\r\n    methods: {\r\n      setInit() {\r\n        Vue.component(\r\n          'FooterComp',\r\n          (resolve) => this.getAsync(resolve)\r\n        );\r\n      },\r\n      setStyles(value) {\r\n        value = value.replace(/<br>/gi, '\\n');\r\n        let el = document.getElementById(\"lp_style\");\r\n        if(el === null) {\r\n          el = document.createElement(\"style\");\r\n          el.setAttribute(\"type\", \"text/css\");\r\n          el.setAttribute('id', 'lp_style');\r\n          let head = document.getElementsByTagName('head')[0];\r\n          head.appendChild(el);\r\n        }\r\n        if(el.innerText.indexOf(value)===-1)\r\n          el.innerText += value;\r\n      },\r\n      getAsync(resolve) {\r\n        let footer = this.$store.getters.device==='mobile' ? 'FooterMobile' : 'FooterPc';\r\n        this.request.common.get(`https://launchpack-${this.$store.getters.service.service_key}.s3.ap-northeast-2.amazonaws.com/json_file/Footer/${footer}`)\r\n        .then(res=> {\r\n          let component = res.data;\r\n\r\n          let props = component.props;\r\n          Object.keys(props).forEach(key => {\r\n            if(props[key].type && typeof(props[key].type) === \"string\") {\r\n              props[key].type = eval(`(${props[key].type})`);\r\n            }\r\n            if(props[key].default && typeof(props[key].default) === \"string\"\r\n              && props[key].default.indexOf('function()')>-1) {\r\n              props[key].default = Function(props[key].default.replace('function()', ''));\r\n            }\r\n          });\r\n\r\n          let data = component.data;\r\n          Object.keys(data).forEach(key=> {\r\n            if(data[key] === 'undefined') {\r\n              data[key] = undefined;\r\n            }\r\n          });\r\n\r\n          let methods = this.getMethods(component.methods);\r\n          let computed = this.getMethods(component.computed);\r\n          let watches = this.getMethods(component.watch);\r\n          let mixins = component.mixins;\r\n          let lifeCycles = {};\r\n          Object.keys(component.lifeCycles).forEach(item => {\r\n            lifeCycles[item] = Function(component.lifeCycles[item].replace(/\\$store/gi, '$store'));\r\n          });\r\n\r\n          let templates = component.templates.replace(/\\$store/gi, '$store');\r\n\r\n          let scopeId = `data-v-${uuidv4().substring(0,8)}`;\r\n\r\n\r\n          let styles = component.styles_scoped;\r\n\r\n          if(styles) {\r\n            let parsedCss = css.parse(styles);\r\n            parsedCss.stylesheet.rules.forEach(rule => {\r\n\r\n              if (rule.media) {\r\n                rule.rules.forEach(inRule => {\r\n                  for (let i = 0; i < inRule.selectors.length; i++) {\r\n                    let sels = '';\r\n                    inRule.selectors[i].split(' ').forEach(sel => {\r\n                      if (sel !== '&' && sel !== '>') {\r\n                        sel += `[${scopeId}]`;\r\n                      }\r\n                      sels += sel + ' ';\r\n                    });\r\n                    inRule.selectors[i] = sels;\r\n                  }\r\n                });\r\n              }\r\n\r\n              else {\r\n                for (let i = 0; i < rule.selectors.length; i++) {\r\n                  let sels = '';\r\n                  rule.selectors[i].split(' ').forEach(sel => {\r\n                    if (sel !== '&' && sel !== '>') {\r\n                      sel += `[${scopeId}]`;\r\n                    }\r\n                    sels += sel + ' ';\r\n                  });\r\n                  rule.selectors[i] = sels;\r\n                }\r\n              }\r\n            });\r\n\r\n            //this.$store.commit('setHeadStyles', css.stringify(parsedCss) + '\\n');\r\n            this.setStyles(css.stringify(parsedCss)+'\\n');\r\n          }\r\n\r\n          \r\n          let vueValues = {\r\n            name: `${footer}`,\r\n            template: templates,\r\n            props: props,\r\n            data() { return data },\r\n            computed: computed,\r\n            methods: methods,\r\n            watch: watches,\r\n            mixins: mixins,\r\n            _scopeId: scopeId\r\n          };\r\n          \r\n          Object.keys(lifeCycles).forEach(item => {\r\n            vueValues[item] = lifeCycles[item];\r\n          });\r\n\r\n          resolve(vueValues);\r\n          this.toggle = true\r\n        }).catch(()=> {\r\n          resolve({\r\n            template: '',\r\n          });\r\n          this.toggle = false;\r\n        });\r\n      },\r\n      getMethods(methods) {\r\n        let result = {};\r\n        methods.forEach(code => {\r\n          code.name = code.name.replace(/'/g, '');\r\n\r\n          // code 내에 vuex 치환\r\n          //this.$store.commit('setUser', val)\r\n          code.code = code.code.replace(/\\$store/gi, '$store');\r\n\r\n          if(code.name.indexOf('/*') === 0 || code.name.indexOf('//') === 0) {\r\n            let names = code.name.split('\\n');\r\n            code.name = names[names.length-1].trim();\r\n          }\r\n\r\n          result[code.name] = code.params ? Function(code.params, code.code) : Function(code.code);\r\n        });\r\n        return result;\r\n      },\r\n    }\r\n  }\r\n</script>"]}]}