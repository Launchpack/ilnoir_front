{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/components/Components/Slot/Tab.vue?vue&type=style&index=0&id=c4a94b46&lang=stylus&scoped=true&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Components/Slot/Tab.vue","mtime":1605259990000},{"path":"/Users/mard/dev/ilnoir/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.list-horizontal\n  overflow hidden\n\n.list-wrap\n  overflow hidden\n  height 46px\n\n.grab-bing\n  white-space nowrap\n  position relative\n  height 63px\n\n.list-item\n  display inline-block\n\n",{"version":3,"sources":["Tab.vue"],"names":[],"mappingshBA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA","file":"Tab.vue","sourceRoot":"src/components/Components/Slot","sourcesContent":["<template>\r\n  <div class=\"full-width\" :style=\"tabContainerStyle\">\r\n\r\n    <!-- 스크롤 탭 -->\r\n    <div v-if=\"menu1 && menu1.scrollable\" class=\"list-wrap full-width\"\r\n         v-dragscroll.x=\"menu1.scrollable ? true : false\"\r\n         @dragscrollmove.prevent.self=\"onDrag\"\r\n         :class=\"{'dragscroll':isIE}\"\r\n         ref=\"dragscroll\">\r\n      <div class=\"grab-bing full-width\" ref=\"grabbing\"\r\n        :style=\"tabWrapStyle\">\r\n        <div v-for=\"(item,idx) in menu\"\r\n             :key=\"'tab-'+idx\" class=\"unselect list-item\"\r\n             :style=\"tabItemStyle(item, idx)\"\r\n             @click.stop.prevent=\"clickTab(item,idx)\"\r\n             :ref=\"'tabItem'+idx\">{{ item.name }}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 서브 탭 -->\r\n    <div v-else-if=\"subMenu\" class=\"flex\" :style=\"[tabWrapStyle,tabListStyle]\">\r\n      <div v-for=\"(item,idx) in subMenu\" :key=\"'tab-'+idx\" class=\"unselect flex-center\"\r\n           :style=\"subtabItemStyle(item, idx)\" @click.stop.prevent=\"clickSubTab(item,idx)\">\r\n           <div>{{ item.name }}</div>\r\n           <div v-if=\"item.count>=0\" :style=\"countStyle(item,idx)\">{{ item.count }}</div>\r\n      </div>\r\n      \r\n    </div>\r\n\r\n    <!-- 일반 탭 -->\r\n    <div v-else class=\"flex\" :style=\"[tabWrapStyle,tabListStyle]\">\r\n      <div v-for=\"(item,idx) in menu\" :key=\"'tab-'+idx\" class=\"unselect flex-center\"\r\n           :style=\"tabItemStyle(item, idx)\" @click.stop.prevent=\"clickTab(item,idx)\">\r\n           <div>{{ item.name }}</div>\r\n           <div v-if=\"item.count>=0\" :style=\"countStyle(item,idx)\">{{ item.count }}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div :style=\"divider1Style\"></div>\r\n    <!-- 컨텐트 -->\r\n    <div v-for=\"item in computedMenu\" :key=\"'content-'+item.id\">\r\n      <slot :name=\"item.id\"></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import {dragscroll} from 'vue-dragscroll'\r\n\r\n  export default {\r\n    name: \"Tab\",\r\n    directives: {\r\n      dragscroll\r\n    },\r\n    props: {\r\n      menu: {\r\n        type: Array,\r\n        required: false\r\n      },\r\n      subMenu: {\r\n        type: Array,\r\n        required: false\r\n      },\r\n      menu1: {\r\n        type: Object,\r\n        default: function() {\r\n          return {\r\n            scrollable: false\r\n          }\r\n        }\r\n      },\r\n      indicator: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      dividerStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      selectedTabStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      unselectedTabStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      tabContainerStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      // 선택된 탭 id\r\n      initialTab: {\r\n        type: [String, Number],\r\n        required: false\r\n      },\r\n      tabPosition: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      wrapRadius: {\r\n        type: Boolean,\r\n        required: false,\r\n        default: undefined\r\n      },\r\n      tabColor: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      tabRadius: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      countStyles: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      selectedCountStyles: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      additionalTabWrap: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      tabMaxWidth: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      tabMargin: {\r\n        type: String,\r\n        required: false\r\n      }\r\n    },\r\n    created() {\r\n      this.init();\r\n    },\r\n    data() {\r\n      return {\r\n        selectedTab: 0,\r\n        selectedSubTab: 0,\r\n        dragging: false,\r\n        scrollArray: [],\r\n        selectedIndex: undefined,\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      tabWrapStyle() {\r\n        let deco = {};\r\n        if(this.tabPosition) {\r\n          deco.display = 'flex'\r\n          deco.justifyContent = `${this.tabPosition}`\r\n          deco.alignItems = `${this.tabPosition}`\r\n        }\r\n        if(this.tabColor) {\r\n          deco.backgroundColor = `${this.tabColor}`\r\n        }\r\n        if(this.tabRadius) {\r\n          deco.borderRadius = `${this.tabRadius}`\r\n        }\r\n\r\n        if(this.tabMaxWidth) {\r\n          deco.maxWidth = `${this.tabMaxWidth}`\r\n        }\r\n\r\n        if(this.tabMargin) {\r\n          deco.margin = `${this.tabMargin}`\r\n        }\r\n\r\n        if (this.additionalTabWrap) {\r\n          let addObj = this.cloneItem(this.additionalTabWrap);\r\n          for(let prop in addObj) {\r\n            deco[prop] = addObj[prop];\r\n          }\r\n        }\r\n        return deco;\r\n      },\r\n      computedMenu() {\r\n        let result = [];\r\n        if(this.menu && this.menu.length>0) {\r\n          this.menu.forEach(item => {\r\n            if(item.id === this.selectedTab)\r\n              result.push(item);\r\n          });          \r\n        }\r\n\r\n        if(this.subMenu && this.subMenu.length>0) {\r\n          this.subMenu.forEach(item => {\r\n            if(item.id === this.selectedSubTab)\r\n              result.push(item);\r\n          });          \r\n        }\r\n\r\n        return result;\r\n      },\r\n      divider1Style() {\r\n        let deco = {\r\n          backgroundColor: this.getColor('기본 테두리선 색상'),\r\n          width: '100%',\r\n          height: '1px'\r\n        };\r\n        if (this.dividerStyle!==undefined) deco = this.dividerStyle;\r\n        return deco;\r\n      },\r\n      tabListStyle() {\r\n        let deco = {};\r\n        if(this.menu1.scrollable) {\r\n          deco = {\r\n            overflowX: 'scroll',\r\n            flexWrap: 'nowrap',\r\n            display: '-webkit-box'\r\n          }\r\n        }\r\n        return deco;\r\n      },\r\n      isIE() {\r\n        if (navigator.userAgent.indexOf('Trident') > -1) return true;\r\n        else return false;\r\n      },\r\n      /* grabStyle() {\r\n        if(this.isIE){\r\n          return {\r\n            height: this.cardHeight + 'px'\r\n          }\r\n        } else {\r\n          return {\r\n            height: (this.cardHeight+17) + 'px'\r\n          }\r\n        }\r\n      }, */\r\n    },\r\n\r\n    watch: {\r\n      '$route.query.tab'(n) {\r\n        this.selectedTab = n;\r\n        this.selectedSubTab = 0;\r\n      },\r\n      '$route.query.sub'(n) {\r\n        this.selectedSubTab = n;\r\n      },\r\n      selectedTab(n) {\r\n        if(this.menu && this.menu.length>0) {\r\n          if(!find(this.menu, 'id', n)) {\r\n            this.clickTab(this.menu[0], 0);\r\n            return;\r\n          } else {\r\n            this.$emit('selectedTab', n);\r\n          }\r\n          if(this.$route.path.indexOf('home')===-1) {\r\n            let query = cloneItem(this.$route.query);\r\n            query.tab = n;\r\n            this.$route.meta.clickPush = true;\r\n            this.$router.replace({\r\n              path: this.$route.path,\r\n              query: query\r\n            });\r\n          }\r\n        }\r\n        \r\n      },\r\n      selectedSubTab(n) {\r\n        if(this.subMenu && this.subMenu.length>0) {\r\n          if(!find(this.subMenu, 'id', n)) {\r\n            this.clickSubTab(this.subMenu[0], 0);\r\n            return;\r\n          } else {\r\n            this.$emit('selectedSubTab', n);\r\n          }\r\n          if(this.$route.path.indexOf('home')===-1) {\r\n            let query = cloneItem(this.$route.query);\r\n            query.sub = n;\r\n            this.$route.meta.clickPush = true;\r\n            this.$router.replace({\r\n              path: this.$route.path,\r\n              query: query\r\n            });\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      init() {\r\n        if (this.initialTab) {\r\n          this.selectedTab = parseInt(this.initialTab);\r\n        }\r\n        if (this.$route.query.tab) {\r\n          this.selectedTab = parseInt(this.$route.query.tab);\r\n        }\r\n        else {\r\n          this.selectedTab = this.menu[0].id;\r\n        }\r\n\r\n        if (this.$route.query.sub) {\r\n          this.selectedSubTab = parseInt(this.$route.query.sub);\r\n        }\r\n        else if(this.subMenu && this.subMenu.length>0) {\r\n          this.selectedSubTab = this.subMenu[0].id;\r\n        }\r\n\r\n        if(this.isIE) {\r\n          setTimeout(() => {\r\n            dragscroll.reset();\r\n          },1000);\r\n        }\r\n\r\n        // 스크롤 탭\r\n        if (this.menu1 && this.menu1.scrollable) {\r\n          this.$nextTick(() => {\r\n            let totalWidth = 0;\r\n            // 스크롤아이템 width 저장\r\n            for (let i=0; i<this.menu.length; i++) {\r\n              if (this.$refs[`tabItem${i}`]!==undefined) {\r\n                let width = this.$refs[`tabItem${i}`][0].offsetWidth;\r\n                this.scrollArray.push({\r\n                  id : this.menu[i].id,\r\n                  name : this.menu[i].name,\r\n                  width: width,                        // 본인 너비\r\n                  accumulatedWidth: totalWidth+width   // 본인 누적너비\r\n                });\r\n                totalWidth += width;                   // 총 너비\r\n              }\r\n              // 현재 선택된 탭 index 저장\r\n              if (this.menu[i].id === this.selectedTab) {\r\n                this.selectedIndex = i;\r\n              }\r\n            }\r\n            // 스크롤 중앙 정렬\r\n            this.setScroll(this.selectedIndex);\r\n          })\r\n        }\r\n      },\r\n      countStyle(item)  {\r\n        let deco = {};\r\n        if(this.countStyles) {\r\n          deco = this.countStyles;\r\n        }\r\n        else {\r\n          deco = {\r\n            fontSize: '12px',\r\n            color: `${this.getColor('Primary Color')}`,\r\n          }\r\n        }\r\n\r\n        if (this.selectedTab === item.id) {\r\n          if(this.selectedCountStyles) {\r\n            deco = this.selectedCountStyles;\r\n          }\r\n        }\r\n\r\n        deco.marginLeft = '6px'\r\n\r\n        return deco;\r\n      },\r\n      tabItemStyle(item, idx) {\r\n        let deco = {\r\n          padding: '12px 8px',\r\n          textAlign: 'center',\r\n          fontSize: '14px'\r\n        }\r\n        if(this.$store.getters.device === 'pc') {\r\n          deco.padding = '20px';\r\n          deco.fontSize = '15px';\r\n        }\r\n\r\n        if(!this.menu1.scrollable) {\r\n          deco.width = `${ 100 / this.menu.length }%`;\r\n        } else {\r\n          deco.width = '120px';\r\n        }\r\n\r\n        // 현재 선택된 탭\r\n        if (this.selectedTab === item.id) {\r\n          deco.color = this.getColor('브랜드 강조 색상');\r\n          deco.borderBottom = '2px solid ' + this.getColor('브랜드 강조 색상');\r\n          if (this.indicator) {\r\n            deco.borderBottom = this.indicator;\r\n          }\r\n          if (this.selectedTabStyle!==undefined) {\r\n            if (this.wrapRadius) {\r\n              if (idx % this.menu.length === 0) {\r\n                this.selectedTabStyle.borderRadius = '8px 0 0 8px'\r\n              }\r\n              if (idx % this.menu.length === this.menu.length-1) {\r\n                this.selectedTabStyle.borderRadius = '0 8px 8px 0'\r\n              }\r\n              deco = this.selectedTabStyle;\r\n            }\r\n\r\n            else {\r\n              deco = this.selectedTabStyle;\r\n            }\r\n            \r\n          }\r\n          \r\n        }\r\n        // 선택 안된 탭\r\n        else {\r\n          deco.color = this.getColor('기본 내용 색상');\r\n          if (this.unselectedTabStyle!==undefined) {\r\n            if (this.wrapRadius) {\r\n              if (idx % this.menu.length === 0) {\r\n                this.unselectedTabStyle.borderRadius = '8px 0 0 8px'\r\n              }\r\n              if (idx % this.menu.length === this.menu.length-1) {\r\n                this.unselectedTabStyle.borderRadius = '0 8px 8px 0'\r\n              }\r\n              deco = this.unselectedTabStyle;\r\n            }\r\n\r\n            else {\r\n              deco = this.unselectedTabStyle;\r\n            }\r\n          }\r\n        }\r\n\r\n        \r\n\r\n        return deco;\r\n      },\r\n      subtabItemStyle(item,idx) {\r\n        let deco = {\r\n          padding: '12px 8px',\r\n          textAlign: 'center',\r\n          fontSize: '14px'\r\n        }\r\n        if(this.$store.getters.device === 'pc') {\r\n          deco.padding = '20px';\r\n          deco.fontSize = '15px';\r\n        }\r\n\r\n        // 현재 선택된 서브탭\r\n        if (this.selectedSubTab === item.id) {\r\n          deco.color = this.getColor('브랜드 강조 색상');\r\n          deco.borderBottom = '2px solid ' + this.getColor('브랜드 강조 색상');\r\n          if (this.indicator) {\r\n            deco.borderBottom = this.indicator;\r\n          }\r\n          if (this.selectedTabStyle!==undefined) {\r\n            if (this.wrapRadius) {\r\n              if (idx % this.subMenu.length === 0) {\r\n                this.selectedTabStyle.borderRadius = '8px 0 0 8px'\r\n              }\r\n              if (idx % this.subMenu.length === this.subMenu.length-1) {\r\n                this.selectedTabStyle.borderRadius = '0 8px 8px 0'\r\n              }\r\n              deco = this.selectedTabStyle;\r\n            }\r\n\r\n            else {\r\n              deco = this.selectedTabStyle;\r\n            }\r\n            \r\n          }\r\n          \r\n        }\r\n        // 선택 안된 서브탭\r\n        else {\r\n          deco.color = this.getColor('기본 내용 색상');\r\n          if (this.unselectedTabStyle!==undefined) {\r\n            if (this.wrapRadius) {\r\n              if (idx % this.subMenu.length === 0) {\r\n                this.unselectedTabStyle.borderRadius = '8px 0 0 8px'\r\n              }\r\n              if (idx % this.subMenu.length === this.subMenu.length-1) {\r\n                this.unselectedTabStyle.borderRadius = '0 8px 8px 0'\r\n              }\r\n              deco = this.unselectedTabStyle;\r\n            }\r\n\r\n            else {\r\n              deco = this.unselectedTabStyle;\r\n            }\r\n          }\r\n        }\r\n\r\n        return deco;\r\n      },\r\n      clickTab(item, idx) {\r\n        // 드래그앤드 시 클릭방지\r\n        if (this.dragging) {\r\n          this.dragging = false;\r\n          return;\r\n        }\r\n        else {\r\n          if(item.disabled) return;\r\n          this.selectedTab = item.id;\r\n          this.$emit('selectedTab', this.selectedTab);\r\n          this.dragging = false;\r\n\r\n          // 스크롤 위치\r\n          if (this.menu1 && this.menu1.scrollable) {\r\n            this.setScroll(idx);\r\n          }\r\n        }\r\n      },\r\n      clickSubTab(item, idx) {\r\n        // 드래그앤드 시 클릭방지\r\n        if (this.dragging) {\r\n          this.dragging = false;\r\n          return;\r\n        }\r\n        else {\r\n          this.selectedSubTab = item.id;\r\n          this.$emit('selectedSubTab', this.selectedSubTab);\r\n          this.dragging = false;\r\n\r\n          // 스크롤 위치\r\n          if (this.menu1 && this.menu1.scrollable) {\r\n            this.setScroll(idx);\r\n          }\r\n        }\r\n      },\r\n      onDrag(e) {\r\n        // 기종별 감도차이 때문에 0이 아닌 1로 약간의 여유있게 줌\r\n        if (Math.abs(e.detail.deltaX) > 1) {\r\n          this.dragging = true;\r\n        }\r\n      },\r\n      // 선택된 탭을 스크롤 중앙으로\r\n      setScroll(index) {\r\n        let target = this.scrollArray[index];\r\n        if (target) {\r\n          let result = (target.accumulatedWidth - (target.width/2));\r\n          result -= (this.$store.getters.deviceWidth/2);\r\n          this.$refs.dragscroll.scrollTo({\r\n            behavior: 'smooth',\r\n            left: result\r\n          });\r\n        }\r\n      }\r\n    },\r\n\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n\r\n  .list-horizontal\r\n    overflow hidden\r\n\r\n  .list-wrap\r\n    overflow hidden\r\n    height 46px\r\n\r\n  .grab-bing\r\n    white-space nowrap\r\n    position relative\r\n    height 63px\r\n\r\n  .list-item\r\n    display inline-block\r\n\r\n</style>\r\n"]}]}