{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Common/Drawer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Common/Drawer.vue","mtime":1605259983000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'Drawer',\n  props: {\n    direction: {\n      type: String\n    },\n    exist: {\n      type: Boolean\n    },\n    bottomHeight: {\n      type: Number,\n      default: 150\n    },\n    asideStyle: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data(){\n    return {\n      auto_speed:'0.3s',\n      manual_speed:'0.03s',\n      threshold:20,\n      startTime:null,\n      startPos:null,\n      translate:null,\n      active:false,\n      visible:true,\n      moving: {\n        x: null,\n        y: null\n      }\n    }\n  },\n  computed:{\n    element() {\n      return this.$refs.element;\n    },\n    overlay() {\n      return this.$refs.overlay;\n    },\n    enabled() {\n      return this.exist === true;\n\n    },\n    style() {\n      let deco = this.asideStyle;\n      if(this.direction === 'right') {\n        deco.transform = 'translate3d(100%,0,0)';\n        deco.right = 0;\n      } else if(this.direction === 'bottom') {\n        let height = window.innerHeight - this.bottomHeight;\n        deco.transform = 'translate3d(0,'+ height + 'px,0)';\n        deco.bottom = 0;\n        \n      }\n      else {\n        deco.transform = 'translate3d(-100%,0,0)';\n        deco.left = 0;\n      }\n      return deco;\n    },\n  },\n  mounted(){\n    document.addEventListener('touchstart',(e) =>{this.handleStart(e)});\n    document.addEventListener('touchmove',(e) =>{this.handleMove(e)});\n    document.addEventListener('touchend',(e) =>{this.handleEnd(e)});\n    document.addEventListener('touchcancel',(e) =>{this.handleEnd(e)});\n    window.addEventListener('resize', (e) =>{this.setVisibality(e)}, true);\n    this.overlay.addEventListener('transitionend',(e) =>{this.handleZindex(e)},false);\n    this.overlay.addEventListener('click',() =>{this.close()},false);\n    this.setVisibality();\n  },\n  methods:{\n    setVisibality(){\n      this.visible = this.element.offsetWidth !== 0;\n    },\n    handleStart(e){\n      this.startTime = new Date().getTime();\n      this.startPos = e.targetTouches[0].pageX;\n      this.element.style.transitionDuration = this.manual_speed;\n    },\n    handleMove(e){\n      let gesture = this.direction === 'bottom' ? this.gestureY(e) : this.gesture(e);\n      let valid = this.validate(this.direction,gesture);\n      if(valid){\n        let percent = this.percentage(this.direction,gesture);\n        if(this.direction === 'left'){\n          /* touch scroll-y 튕김 방지 */\n          let oldY = this.moving.y;\n          let currentY = e.touches[0].pageY;\n          let offsetY = oldY - currentY;\n          if (offsetY<0) return;\n\n          /* 터치 감도 조정 코드\n          let oldX = this.moving.x;\n          let currentX = e.touches[0].pageX;\n          let offsetX = oldX - currentX;\n          if (offsetX>offsetY) return; */\n\n          this.translate = (e.touches[0].pageX-this.element.offsetWidth);\n          if(this.translate < 0){\n            this.element.style.transform = 'translate3d('+ this.translate +'px,0,0)';\n          }else{\n            this.open();\n          }\n        } else if(this.direction === 'right'){\n          /* touch scroll-y 튕김 방지 */\n          let oldY = this.moving.y;\n          let currentY = e.touches[0].pageY;\n          let offsetY = oldY - currentY;\n          if (offsetY<0) return;\n\n          this.translate = -(screen.width-this.element.offsetWidth-e.touches[0].pageX);\n          if(this.translate > 0){\n            this.element.style.transform = 'translate3d('+ this.translate +'px,0,0)';\n          }else{\n            this.open();\n          }\n        } else if(this.display === 'bottom'){\n          this.translate = -(screen.height-this.bottomHeight-e.touches[0].pageY);\n          if(this.translate > 0){\n            this.element.style.transform = 'translate3d(0,'+ this.translate +'px,0)';\n          }else{\n            this.open();\n          }\n        }\n        this.overlayOpacity(percent/100);\n\n        this.moving.x = e.touches[0].pageX;\n        this.moving.y = e.touches[0].pageY;\n      }\n    },\n    handleEnd(e){\n      let speed = this.speed(e);\n      let gesture = this.direction === 'bottom' ? this.gestureY(e) : this.gesture(e);\n      let valid = this.validate(this.direction,gesture);\n      if(valid){\n        if(speed>0.6){\n          if(!this.active){\n            this.open();\n          }else{\n            this.close();\n          }\n        }else{\n          if(this.direction === 'bottom') {\n            if(this.bottomHeight/2>Math.abs(this.translate)) {\n              this.open();\n            }else{\n              this.close();\n            }\n          }\n          else if(this.element.offsetWidth/2>Math.abs(this.translate)){\n            this.open();\n          }else{\n            this.close();\n          }\n        }\n      }\n    },\n    handleZindex(){\n      let opacity = window.getComputedStyle(this.overlay).getPropertyValue('opacity');\n      if(opacity<=0){\n        this.overlay.style.zIndex = -999;\n      }\n    },\n    validate(direction,gesture){\n      if(direction === 'left'){\n        if((this.active && gesture === 'swiperight') || (!this.active && (gesture === 'swipeleft' || this.startPos>this.threshold))){\n          return false;\n        }\n      } else if(direction === 'right'){\n        if((this.active && gesture === 'swipeleft') || (!this.active && (gesture === 'swiperight' || this.startPos<(screen.width-this.threshold)))){\n          return false;\n        }\n      } else if(direction === 'bottom'){\n        if((this.active && gesture === 'swipebottom') || (!this.active && (gesture === 'swipebottom' || this.startPos<(screen.height-this.threshold)))){\n          return false;\n        }\n      }\n      if((document.querySelector('.sidebar.active') && !this.active) || !this.visible){\n        return false;\n      }\n      return true;\n    },\n    overlayOpacity(opacity){\n      this.overlay.style.opacity = opacity;\n      if(opacity > 0){\n        this.overlay.style.zIndex = 999;\n      }\n    },\n    gesture(e){\n      let directions = [\n        'swipeleft',\n        'swiperight'\n      ];\n      let currentPos = e.changedTouches[0].pageX;\n      if((this.startPos-currentPos)<0){\n        return directions[1];\n      }else{\n        return directions[0];\n      }\n    },\n    gestureY(e){\n      let directions = [\n        'swipetop',\n        'swipebottom'\n      ];\n      let currentPos = e.changedTouches[0].pageY;\n      if((this.startPos-currentPos)<0){\n        return directions[1];\n      }else{\n        return directions[0];\n      }\n    },\n    open(){\n      this.translate = 0;\n      if(this.direction === 'bottom') {\n        let height = window.innerHeight - this.bottomHeight;\n        this.element.style.transform = 'translate3d(0,'+height+'px,0)';\n      } else {\n        this.element.style.transform = 'translate3d('+this.translate+',0,0)';\n      }\n      this.element.style.transitionDuration = this.auto_speed;\n      this.overlayOpacity(1);\n      this.lock(document.querySelector('html'));\n      this.lock(document.querySelector('body'));\n      this.element.classList.add('active');\n      this.active = true;\n\n      this.moving = { x: null, y: null };        \n    },\n    close(){\n      if(this.direction === 'left'){\n        this.translate = '-'+this.element.offsetWidth+'px';\n      } else if(this.direction === 'right'){\n        this.translate = this.element.offsetWidth+'px';\n      }  else if(this.direction === 'bottom'){\n        this.translate = screen.height + 'px';\n      }\n\n      if(this.direction === 'bottom') {\n        this.element.style.transform = 'translate3d(0,'+this.translate+',0)';\n      } else {\n        this.element.style.transform = 'translate3d('+this.translate+',0,0)';\n      }\n      this.element.style.transitionDuration = this.auto_speed;\n      this.overlayOpacity(0);\n      this.unlock(document.querySelector('html'));\n      this.unlock(document.querySelector('body'));\n      this.element.classList.remove('active');\n      this.active = false;\n\n      this.moving = { x: null, y: null };\n    },\n    speed(e){\n      let time = new Date().getTime() - this.startTime;\n      let startP = Math.abs(this.startPos);\n      let endP =  this.direction === 'bottom' ? Math.abs(e.changedTouches[0].pageY) : Math.abs(e.changedTouches[0].pageX);\n      let distance = startP>endP? (startP-endP):(endP-startP);\n      return distance/time;\n    },\n    percentage(direction,gesture){\n      let percentage = 0;\n      let test = [];\n      if(direction === 'left'){\n        test = ['swipeleft','swiperight']\n      } else if(direction === 'right'){\n        test = ['swiperight','swipeleft']\n      } else if(direction === 'bottom'){\n        test = ['swipebottom','swipetop']\n      }\n      let size = direction === 'bottom' ? 'offsetHeight' : 'offsetWidth';\n      if(this.active && gesture === test[0]){\n        percentage = 100-Math.round(Math.abs(this.translate)/this.element[size]*100);\n      }\n      if(!this.active && gesture === test[1]){\n        percentage = Math.round(100-Math.abs(this.translate)/this.element[size]*100);\n      }\n      if(percentage>100){\n        percentage = 100;\n      }\n      if(percentage<0){\n        percentage = 0;\n      }\n      return percentage;\n    },\n    lock(element){\n      element.style.overflow = 'hidden';\n      element.style.touchAction = 'none';\n    },\n    unlock(element){\n      element.style.removeProperty('overflow');\n      element.style.removeProperty('touch-action');\n    }\n  }\n}\n",{"version":3,"sources":["Drawer.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Drawer.vue","sourceRoot":"src/components/Components/Common","sourcesContent":["<template>\r\n  <section v-if=\"enabled\">\r\n    <aside class=\"sidebar\" :style=\"style\" ref=\"element\">\r\n      <slot></slot>\r\n    </aside>\r\n    <div class=\"overlay\" ref=\"overlay\"></div>\r\n  </section>\r\n</template>\r\n<script>\r\n  export default {\r\n    name: 'Drawer',\r\n    props: {\r\n      direction: {\r\n        type: String\r\n      },\r\n      exist: {\r\n        type: Boolean\r\n      },\r\n      bottomHeight: {\r\n        type: Number,\r\n        default: 150\r\n      },\r\n      asideStyle: {\r\n        type: Object,\r\n        default: function() {\r\n          return {};\r\n        }\r\n      }\r\n    },\r\n    data(){\r\n      return {\r\n        auto_speed:'0.3s',\r\n        manual_speed:'0.03s',\r\n        threshold:20,\r\n        startTime:null,\r\n        startPos:null,\r\n        translate:null,\r\n        active:false,\r\n        visible:true,\r\n        moving: {\r\n          x: null,\r\n          y: null\r\n        }\r\n      }\r\n    },\r\n    computed:{\r\n      element() {\r\n        return this.$refs.element;\r\n      },\r\n      overlay() {\r\n        return this.$refs.overlay;\r\n      },\r\n      enabled() {\r\n        return this.exist === true;\r\n\r\n      },\r\n      style() {\r\n        let deco = this.asideStyle;\r\n        if(this.direction === 'right') {\r\n          deco.transform = 'translate3d(100%,0,0)';\r\n          deco.right = 0;\r\n        } else if(this.direction === 'bottom') {\r\n          let height = window.innerHeight - this.bottomHeight;\r\n          deco.transform = 'translate3d(0,'+ height + 'px,0)';\r\n          deco.bottom = 0;\r\n          \r\n        }\r\n        else {\r\n          deco.transform = 'translate3d(-100%,0,0)';\r\n          deco.left = 0;\r\n        }\r\n        return deco;\r\n      },\r\n    },\r\n    mounted(){\r\n      document.addEventListener('touchstart',(e) =>{this.handleStart(e)});\r\n      document.addEventListener('touchmove',(e) =>{this.handleMove(e)});\r\n      document.addEventListener('touchend',(e) =>{this.handleEnd(e)});\r\n      document.addEventListener('touchcancel',(e) =>{this.handleEnd(e)});\r\n      window.addEventListener('resize', (e) =>{this.setVisibality(e)}, true);\r\n      this.overlay.addEventListener('transitionend',(e) =>{this.handleZindex(e)},false);\r\n      this.overlay.addEventListener('click',() =>{this.close()},false);\r\n      this.setVisibality();\r\n    },\r\n    methods:{\r\n      setVisibality(){\r\n        this.visible = this.element.offsetWidth !== 0;\r\n      },\r\n      handleStart(e){\r\n        this.startTime = new Date().getTime();\r\n        this.startPos = e.targetTouches[0].pageX;\r\n        this.element.style.transitionDuration = this.manual_speed;\r\n      },\r\n      handleMove(e){\r\n        let gesture = this.direction === 'bottom' ? this.gestureY(e) : this.gesture(e);\r\n        let valid = this.validate(this.direction,gesture);\r\n        if(valid){\r\n          let percent = this.percentage(this.direction,gesture);\r\n          if(this.direction === 'left'){\r\n            /* touch scroll-y 튕김 방지 */\r\n            let oldY = this.moving.y;\r\n            let currentY = e.touches[0].pageY;\r\n            let offsetY = oldY - currentY;\r\n            if (offsetY<0) return;\r\n\r\n            /* 터치 감도 조정 코드\r\n            let oldX = this.moving.x;\r\n            let currentX = e.touches[0].pageX;\r\n            let offsetX = oldX - currentX;\r\n            if (offsetX>offsetY) return; */\r\n\r\n            this.translate = (e.touches[0].pageX-this.element.offsetWidth);\r\n            if(this.translate < 0){\r\n              this.element.style.transform = 'translate3d('+ this.translate +'px,0,0)';\r\n            }else{\r\n              this.open();\r\n            }\r\n          } else if(this.direction === 'right'){\r\n            /* touch scroll-y 튕김 방지 */\r\n            let oldY = this.moving.y;\r\n            let currentY = e.touches[0].pageY;\r\n            let offsetY = oldY - currentY;\r\n            if (offsetY<0) return;\r\n\r\n            this.translate = -(screen.width-this.element.offsetWidth-e.touches[0].pageX);\r\n            if(this.translate > 0){\r\n              this.element.style.transform = 'translate3d('+ this.translate +'px,0,0)';\r\n            }else{\r\n              this.open();\r\n            }\r\n          } else if(this.display === 'bottom'){\r\n            this.translate = -(screen.height-this.bottomHeight-e.touches[0].pageY);\r\n            if(this.translate > 0){\r\n              this.element.style.transform = 'translate3d(0,'+ this.translate +'px,0)';\r\n            }else{\r\n              this.open();\r\n            }\r\n          }\r\n          this.overlayOpacity(percent/100);\r\n\r\n          this.moving.x = e.touches[0].pageX;\r\n          this.moving.y = e.touches[0].pageY;\r\n        }\r\n      },\r\n      handleEnd(e){\r\n        let speed = this.speed(e);\r\n        let gesture = this.direction === 'bottom' ? this.gestureY(e) : this.gesture(e);\r\n        let valid = this.validate(this.direction,gesture);\r\n        if(valid){\r\n          if(speed>0.6){\r\n            if(!this.active){\r\n              this.open();\r\n            }else{\r\n              this.close();\r\n            }\r\n          }else{\r\n            if(this.direction === 'bottom') {\r\n              if(this.bottomHeight/2>Math.abs(this.translate)) {\r\n                this.open();\r\n              }else{\r\n                this.close();\r\n              }\r\n            }\r\n            else if(this.element.offsetWidth/2>Math.abs(this.translate)){\r\n              this.open();\r\n            }else{\r\n              this.close();\r\n            }\r\n          }\r\n        }\r\n      },\r\n      handleZindex(){\r\n        let opacity = window.getComputedStyle(this.overlay).getPropertyValue('opacity');\r\n        if(opacity<=0){\r\n          this.overlay.style.zIndex = -999;\r\n        }\r\n      },\r\n      validate(direction,gesture){\r\n        if(direction === 'left'){\r\n          if((this.active && gesture === 'swiperight') || (!this.active && (gesture === 'swipeleft' || this.startPos>this.threshold))){\r\n            return false;\r\n          }\r\n        } else if(direction === 'right'){\r\n          if((this.active && gesture === 'swipeleft') || (!this.active && (gesture === 'swiperight' || this.startPos<(screen.width-this.threshold)))){\r\n            return false;\r\n          }\r\n        } else if(direction === 'bottom'){\r\n          if((this.active && gesture === 'swipebottom') || (!this.active && (gesture === 'swipebottom' || this.startPos<(screen.height-this.threshold)))){\r\n            return false;\r\n          }\r\n        }\r\n        if((document.querySelector('.sidebar.active') && !this.active) || !this.visible){\r\n          return false;\r\n        }\r\n        return true;\r\n      },\r\n      overlayOpacity(opacity){\r\n        this.overlay.style.opacity = opacity;\r\n        if(opacity > 0){\r\n          this.overlay.style.zIndex = 999;\r\n        }\r\n      },\r\n      gesture(e){\r\n        let directions = [\r\n          'swipeleft',\r\n          'swiperight'\r\n        ];\r\n        let currentPos = e.changedTouches[0].pageX;\r\n        if((this.startPos-currentPos)<0){\r\n          return directions[1];\r\n        }else{\r\n          return directions[0];\r\n        }\r\n      },\r\n      gestureY(e){\r\n        let directions = [\r\n          'swipetop',\r\n          'swipebottom'\r\n        ];\r\n        let currentPos = e.changedTouches[0].pageY;\r\n        if((this.startPos-currentPos)<0){\r\n          return directions[1];\r\n        }else{\r\n          return directions[0];\r\n        }\r\n      },\r\n      open(){\r\n        this.translate = 0;\r\n        if(this.direction === 'bottom') {\r\n          let height = window.innerHeight - this.bottomHeight;\r\n          this.element.style.transform = 'translate3d(0,'+height+'px,0)';\r\n        } else {\r\n          this.element.style.transform = 'translate3d('+this.translate+',0,0)';\r\n        }\r\n        this.element.style.transitionDuration = this.auto_speed;\r\n        this.overlayOpacity(1);\r\n        this.lock(document.querySelector('html'));\r\n        this.lock(document.querySelector('body'));\r\n        this.element.classList.add('active');\r\n        this.active = true;\r\n\r\n        this.moving = { x: null, y: null };        \r\n      },\r\n      close(){\r\n        if(this.direction === 'left'){\r\n          this.translate = '-'+this.element.offsetWidth+'px';\r\n        } else if(this.direction === 'right'){\r\n          this.translate = this.element.offsetWidth+'px';\r\n        }  else if(this.direction === 'bottom'){\r\n          this.translate = screen.height + 'px';\r\n        }\r\n\r\n        if(this.direction === 'bottom') {\r\n          this.element.style.transform = 'translate3d(0,'+this.translate+',0)';\r\n        } else {\r\n          this.element.style.transform = 'translate3d('+this.translate+',0,0)';\r\n        }\r\n        this.element.style.transitionDuration = this.auto_speed;\r\n        this.overlayOpacity(0);\r\n        this.unlock(document.querySelector('html'));\r\n        this.unlock(document.querySelector('body'));\r\n        this.element.classList.remove('active');\r\n        this.active = false;\r\n\r\n        this.moving = { x: null, y: null };\r\n      },\r\n      speed(e){\r\n        let time = new Date().getTime() - this.startTime;\r\n        let startP = Math.abs(this.startPos);\r\n        let endP =  this.direction === 'bottom' ? Math.abs(e.changedTouches[0].pageY) : Math.abs(e.changedTouches[0].pageX);\r\n        let distance = startP>endP? (startP-endP):(endP-startP);\r\n        return distance/time;\r\n      },\r\n      percentage(direction,gesture){\r\n        let percentage = 0;\r\n        let test = [];\r\n        if(direction === 'left'){\r\n          test = ['swipeleft','swiperight']\r\n        } else if(direction === 'right'){\r\n          test = ['swiperight','swipeleft']\r\n        } else if(direction === 'bottom'){\r\n          test = ['swipebottom','swipetop']\r\n        }\r\n        let size = direction === 'bottom' ? 'offsetHeight' : 'offsetWidth';\r\n        if(this.active && gesture === test[0]){\r\n          percentage = 100-Math.round(Math.abs(this.translate)/this.element[size]*100);\r\n        }\r\n        if(!this.active && gesture === test[1]){\r\n          percentage = Math.round(100-Math.abs(this.translate)/this.element[size]*100);\r\n        }\r\n        if(percentage>100){\r\n          percentage = 100;\r\n        }\r\n        if(percentage<0){\r\n          percentage = 0;\r\n        }\r\n        return percentage;\r\n      },\r\n      lock(element){\r\n        element.style.overflow = 'hidden';\r\n        element.style.touchAction = 'none';\r\n      },\r\n      unlock(element){\r\n        element.style.removeProperty('overflow');\r\n        element.style.removeProperty('touch-action');\r\n      }\r\n    }\r\n  }\r\n</script>\r\n<style scoped>\r\n  div.overlay{\r\n    position:fixed;\r\n    z-index: -999;\r\n    left: 0px;\r\n    top:0px;\r\n    background:rgba(11, 10, 12, 0.35);\r\n    opacity: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    transition: opacity 0.3s ease;\r\n  }\r\n  aside.sidebar{\r\n    z-index: 9999;\r\n    position: fixed;\r\n    will-change: transform;\r\n    height: 100%;\r\n    top: 0px;\r\n    transition:transform 0.3s ease;\r\n    background:#fff;\r\n    min-width: 300px;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    word-wrap: break-word;\r\n  }\r\n</style>"]}]}