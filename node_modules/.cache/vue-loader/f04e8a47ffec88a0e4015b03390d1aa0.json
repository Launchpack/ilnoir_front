{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Slot/DynamicGnb.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Slot/DynamicGnb.vue","mtime":1605259989000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {dragscroll} from 'vue-dragscroll'\n\nexport default {\n  name: \"DynamicGnb\",\n  directives: {\n    dragscroll\n  },\n  props: {\n    menu: {\n      type: Array,\n      required: true\n    },\n    // 선택된 탭 id\n    // qeury와 같이 number로 판단하고 싶을때 number로 치환시켜 보내주어야 한다\n    initialTab: {\n      type: [String, Number],\n      required: false\n    },\n    selectedItemStyle: {\n      type: Object,\n      required: false\n    },\n    customItemStyle: {\n      type: Object,\n      required: false\n    },\n    indicatorStyle: {\n      type: Object,\n      required: false\n    },\n    scrollable: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n  created() {\n    console.log('init')\n    this.init();\n  },\n  data() {\n    return {\n      selectedTab: 0,\n      selectedChildTab: undefined,\n      selectedChildTabTwo: undefined,\n      dragging: false,\n      scrollArray: [],\n      selectedIndex: undefined,\n      childListOne: [],\n      childListTwo: [],\n    }\n  },\n\n  computed: {\n    lineStyle() {\n\n    },\n    childStateOne() {\n      let menu = this.computedMenu[0];\n      if(menu && menu.child && menu.child.length>0) {\n        if(menu.child.length===1 && menu.child[0].name==='전체') {\n          return false;\n        }\n        else return true;\n      }\n      else {\n        return false;\n      }\n    },\n    childStateTwo() {\n      let menu = this.computedChildMenu ? this.computedChildMenu[0] : [];\n      if(menu && menu.child && menu.child.length>0) {\n        if(menu.child.length===1 && menu.child[0].name==='전체') {\n          return false;\n        }\n        else return true;\n      }\n      else {\n        return false;\n      }\n    },\n    grabStyle() {\n      return {\n        borderBottom: this.brandBorder.main.border,\n      }\n    },\n    computedChildMenu() {\n      let result = [];\n      if(this.childStateOne && this.childListOne.length>0) {\n        this.childListOne.forEach(item => {\n          if(item.id === this.selectedChildTab) {\n            result.push(item);\n          }\n        })\n        return result;\n      }\n    },\n    computedMenu() {\n      let result = [];\n      this.menu.forEach(item => {\n        if(item.id === this.selectedTab)\n          result.push(item);\n      });\n      return result;\n    },\n    divider1Style() {\n      let deco = {\n        backgroundColor: this.getColor('기본 테두리선 색상'),\n        width: '100%',\n        height: '1px'\n      };\n      if (this.dividerStyle!==undefined) deco = this.dividerStyle;\n      return deco;\n    },\n    tabListStyle() {\n      let deco = {};\n      if(this.scrollable) {\n        deco = {\n          overflowX: 'scroll',\n          flexWrap: 'nowrap',\n          display: '-webkit-box'\n        }\n      }\n      return deco;\n    },\n    isIE() {\n      if (navigator.userAgent.indexOf('Trident') > -1) return true;\n      else return false;\n    }\n  },\n\n  watch: {\n    /* selectedTab(n) {\n      if(!find(this.menu, 'id', n)) {\n        this.clickTab(this.menu[0], 0);\n        return;\n      } else {\n        this.$emit('select', n);\n      }\n      if(this.$route.path.indexOf('home')===-1) {\n        let query = cloneItem(this.$route.query);\n        query.tab = n;\n        this.$route.meta.clickPush = true;\n        this.$router.replace({\n          path: this.$route.path,\n          query: query\n        });\n      }\n    }  */\n    // '$route.query.gnb'(n) {\n    //   setTimeout(() => {\n    //     let one = find(this.menu, 'id', n);\n    //     let two = find(this.childListOne, 'id', n);\n    //     let three = find(this.childListTwo, 'id', n);\n    //     console.log('123',two,three)\n    //     if(one) {\n    //       console.log('one',one, one.index)\n    //       this.clickTab(one, one.index);\n    //     }\n        // if(two) {\n        //   if(two.name!=='전체') this.clickTabOne(two, two.index);\n          \n        // }\n        // if(three) {\n        //   if(three.name!=='전체') this.clickTabTwo(three, three.index);\n        // }\n    //   },300)\n      \n    // },\n    '$route.query'(n) {\n      // let menu1 = [];\n      // let menu2 = [];\n      // if(n.category2) {\n      //   menu1 = this.menu.filter(item => { return item.id === Number(n.category1) })[0];\n      //   if(menu1) {\n      //     this.clickTab(menu1, menu1.index, true);\n      //     menu2 = menu1.child.filter(item => { return item.id === Number(n.category2)})[0];\n      //     if(menu2) this.clickTabOne(menu2, menu2.index);\n      //     console.log('menu', menu1, menu2)\n      //   }\n      // }\n      this.init();\n    },\n    selectedChildTab(n) {\n      if(this.childListOne && this.childListOne.length>0 && n) {\n        // if(!find(this.childListOne, 'id', n)) {\n        //   this.clickTab(this.childListOne[0], 0);\n        //   return;\n        // } else {\n        //   this.$emit('selectedGnb', n);\n        // }\n\n        if(this.$route.path.indexOf('home')===-1 && n) {\n          let query = cloneItem(this.$route.query);\n          query.gnb = n;\n          query.category1 = this.selectedTab;\n          query.category2 = n;\n          this.$route.meta.clickPush = true;\n          this.$router.replace({\n            path: this.$route.path,\n            query: query\n          });\n        }\n\n      }\n    },\n    selectedChildTabTwo(n) {\n      if(this.childListTwo && this.childListTwo.length>0) {\n        // if(!find(this.childListTwo, 'id', n)) {\n        //   this.clickTab(this.childListTwo[0], 0);\n        //   return;\n        // } else {\n        //   this.$emit('selectedGnb', n);\n        // }\n\n        if(this.$route.path.indexOf('home')===-1 && n) {\n          let query = cloneItem(this.$route.query);\n          query.gnb = n;\n          query.category1 = this.selectedTab;\n          query.category2 = this.selectedChildTab;\n          query.category3 = n;\n          this.$route.meta.clickPush = true;\n          this.$router.replace({\n            path: this.$route.path,\n            query: query\n          });\n        }\n\n      }\n    },\n  },\n\n  methods: {\n    init() {\n      if (this.initialTab!==undefined) {\n        if (typeof(this.initialTab)==='number') {\n          this.selectedTab = parseInt(this.initialTab);\n        }\n        else if (typeof(this.initialTab)==='string') {\n          this.selectedTab = this.initialTab;\n        }\n      }\n\n      if(this.$route.query.gnb && this.menu && this.menu.length>0) {\n        for(let i=0;i<this.menu.length;i++) {\n          if(this.menu[i].id === Number(this.$route.query.gnb)) {\n            if(this.menu[i].child.length===1 && this.menu[i].child[0].name==='전체') {\n              this.clickTab(this.menu[i], i, true);\n            }\n            else {\n              this.clickTab(this.menu[i], i, true);\n              // this.clickTabOne(this.menu[i].child[0], 0);\n            }\n          }\n          else {\n            if(this.menu[i].child && this.menu[i].child.length>0) {\n              for(let j=0;j<this.menu[i].child.length;j++) {\n                if(this.menu[i].child[j].id === Number(this.$route.query.gnb)) {\n                  this.clickTab(this.menu[i], i, true);\n                  this.clickTabOne(this.menu[i].child[j], j);\n                }\n                else {\n                  if(this.menu[i].child[j].child && this.menu[i].child[j].child.length>0) {\n                    for(let k=0;k<this.menu[i].child[j].child.length;k++) {\n                      if(this.menu[i].child[j].child[k].id === Number(this.$route.query.gnb)) {\n                        this.clickTab(this.menu[i], i, true);\n                        this.clickTabOne(this.menu[i].child[j], j);\n                        this.clickTabTwo(this.menu[i].child[j].child[k], k);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          \n        }\n        // this.selectedTab = Number(this.$route.query.gnb);\n        // this.selectedChildTab = Number(this.$route.query.gnb);\n      }\n\n      if(this.isIE) {\n        setTimeout(() => {\n          dragscroll.reset();\n        },1000);\n      }\n\n      // 스크롤 \n      this.$nextTick(() => {\n        let totalWidth = 0;\n        // 스크롤아이템 width 저장\n        for (let i=0; i<this.menu.length; i++) {\n          if (this.$refs[`tabItem${i}`]&&this.$refs[`tabItem${i}`][0]) {\n            // console.log('refs', this.$refs[`tabItem${i}`])\n            let width = this.$refs[`tabItem${i}`][0].offsetWidth;\n            this.scrollArray.push({\n              id : this.menu[i].id,\n              name : this.menu[i].name,\n              width: width,                        // 본인 너비\n              accumulatedWidth: totalWidth+width   // 본인 누적너비\n            });\n            totalWidth += width;                   // 총 너비\n          }\n          // 현재 선택된 탭 index 저장\n          if (this.menu[i].id === this.selectedTab) {\n            this.selectedIndex = i;\n          }\n        }\n        // 스크롤 중앙 정렬\n        this.setScroll(this.selectedIndex);\n      })\n      \n    },\n\n    itemStyle(id) {\n      let obj = {\n        padding: '13px 16px'\n      };\n\n      if (id===this.selectedTab) {\n        if(this.selectedItemStyle) {\n          return Object.assign(obj, this.selectedItemStyle);\n        }\n        else {\n          obj.color = this.brandColor.brand.color;\n          obj.borderBottom = `2px solid ${this.brandColor.brand.color}`;\n        }\n      } \n\n      if (this.customItemStyle) {\n        return Object.assign(obj, this.customItemStyle);\n      } else {\n        return obj;\n      }\n    },\n    categoryImg(item) {\n      let obj = {\n        width: '36px',\n        height: '36px',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'noRepeat',\n        borderRadius: '4px'\n      };\n      if(item.id===this.selectedChildTab) {\n        if(item.img_after) {\n          obj.backgroundImage = `url(${item.img_after})`;\n        }\n        else {\n          obj.backgroundImage = `url(${this.dummyImage.bg})`;\n        }\n      }\n      else {\n        if(item.img_before) {\n          obj.backgroundImage = `url(${item.img_before})`;\n        }\n        else {\n          obj.backgroundImage = `url(${this.dummyImage.bg})`;\n        }\n      }\n      \n      return obj;\n    },\n\n    childStyle(id) {\n      let obj = {\n        padding: '10px 0',\n        borderBottom: this.brandBorder.main.border,\n        borderRight: this.brandBorder.main.border\n      };\n\n      if (id===this.selectedChildTab) {\n        if(this.selectedItemStyle) {\n          return Object.assign(obj, this.selectedItemStyle);\n        }\n        else {\n          obj.color = this.brandColor.brand.color;\n        }\n      } \n\n      if (this.customItemStyle) {\n        return Object.assign(obj, this.customItemStyle);\n      } else {\n        return obj;\n      }\n    },\n\n    childTwoStyle(id) {\n      let obj = {\n        padding: '13px 16px'\n      };\n\n      if (id===this.selectedChildTabTwo) {\n        if(this.selectedItemStyle) {\n          return Object.assign(obj, this.selectedItemStyle);\n        }\n        else {\n          obj.color = this.brandColor.brand.color;\n          obj.borderBottom = `2px solid ${this.brandColor.brand.color}`;\n        }\n      } \n\n      if (this.customItemStyle) {\n        return Object.assign(obj, this.customItemStyle);\n      } else {\n        return obj;\n      }\n    },\n\n    clickTab(item, idx, boo) {\n      // 드래그앤드 시 클릭방지\n      if (this.dragging) {\n        this.dragging = false;\n        return;\n      }\n      else {\n        this.selectedChildTab = undefined;\n        this.selectedChildTabTwo = undefined;\n        if(item.child) this.childListOne = item.child;\n        this.selectedTab = item.id;\n        if(this.selectedTab) this.$emit('select', this.selectedTab);\n        this.dragging = false;\n\n        if(!boo) {\n          if(this.menu && this.menu.length>0) {\n            // if(!find(this.menu, 'id', n)) {\n            //   this.clickTab(this.menu[0], 0);\n            //   return;\n            // } else {\n            //   this.$emit('selectedGnb', n);\n            // }\n            if(this.$route.path.indexOf('home')===-1) {\n              let query = cloneItem(this.$route.query);\n              if(this.selectedTab===0) query.gnb = '';\n              else query.gnb = this.selectedTab;\n              if(query.category1) delete query.category1;\n              if(query.category2) delete query.category2;\n              if(query.category3) delete query.category3;\n              this.$route.meta.clickPush = true;\n              this.$router.replace({\n                path: this.$route.path,\n                query: query\n              });\n              \n            }\n          }\n        }\n\n        // 스크롤 위치\n        if (this.scrollable) {\n          this.setScroll(idx);\n        }\n      }\n    },\n    clickTabOne(item, idx) {\n      // 드래그앤드 시 클릭방지\n      if (this.dragging) {\n        this.dragging = false;\n        return;\n      }\n      else {\n        this.selectedChildTabTwo = undefined;\n        if(item.child) this.childListTwo = item.child;\n        this.selectedChildTab = item.id;\n        // if(this.selectedChildTab) this.$emit('select', this.selectedChildTab);\n        this.dragging = false;\n\n        // 스크롤 위치\n        if (this.scrollable) {\n          // this.setScroll(idx);\n        }\n      }\n    },\n    clickTabTwo(item, idx) {\n      // 드래그앤드 시 클릭방지\n      if (this.dragging) {\n        this.dragging = false;\n        return;\n      }\n      else {\n        this.selectedChildTabTwo = item.id;\n        // if(this.selectedChildTabTwo) this.$emit('select', this.selectedChildTabTwo);\n        this.dragging = false;\n\n        // 스크롤 위치\n        if (this.scrollable) {\n          // this.setScroll(idx);\n        }\n      }\n    },\n    onDrag(e) {\n      // 기종별 감도차이 때문에 0이 아닌 1로 약간의 여유있게 줌\n      if (Math.abs(e.detail.deltaX) > 1) {\n        this.dragging = true;\n      }\n    },\n    // 선택된 탭을 스크롤 중앙으로\n    setScroll(index) {\n      let target = this.scrollArray[index];\n      if (target) {\n        let result = (target.accumulatedWidth - (target.width/2));\n        result -= (this.$store.getters.deviceWidth/2);\n        console.log(target, result)\n        this.$refs.dragscroll.scrollTo({\n          behavior: 'smooth',\n          left: result\n        });\n      }\n    }\n  },\n\n}\n",{"version":3,"sources":["DynamicGnb.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"DynamicGnb.vue","sourceRoot":"src/components/Components/Slot","sourcesContent":["<template>\r\n  <div class=\"full-width\">\r\n    <!-- 스크롤 -->\r\n    <div class=\"list-wrap full-width\"\r\n         v-dragscroll.x=\"true\"\r\n         @dragscrollmove.prevent.self=\"onDrag\"\r\n         :class=\"{'dragscroll':isIE}\"\r\n         ref=\"dragscroll\"\r\n         :style=\"grabStyle\">\r\n      <div class=\"grab-bing flex-align full-width\" ref=\"grabbing\">\r\n        <div v-for=\"(item,idx) in menu\"\r\n             :key=\"'tab-'+item.id\" class=\"unselect list-item\"\r\n             :style=\"itemStyle(item.id)\"\r\n             @click.stop.prevent=\"clickTab(item,idx)\"\r\n             :ref=\"'tabItem'+idx\">\r\n             {{ item.name }}\r\n              <div v-if=\"item.id===selectedTab\" class=\"indicator\" :style=\"indicatorStyle\"></div>     \r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <slot name=\"banner\"></slot>\r\n\r\n      <div class=\"grid-box flex-align full-width\"\r\n          v-if=\"childStateOne\">\r\n          <div v-for=\"(item,idx) in childListOne\"\r\n              :key=\"'tab-'+item.id\" class=\"unselect list-item position-relative col-3\"\r\n              :style=\"childStyle(item.id)\"\r\n              @click.stop.prevent=\"clickTabOne(item,idx)\"\r\n              :ref=\"'tabItem'+idx\"\r\n              >\r\n              <div class=\"flex-justify\">\r\n                <div :style=\"categoryImg(item)\"></div>\r\n              </div>\r\n              <div class=\"ellipsis size-13\" \r\n                style=\"text-align:center;margin-top:10px;width:100%\">{{ item.name }}</div>\r\n              <div class=\"position-absolute\"\r\n                :style=\"lineStyle\"></div>\r\n                <div v-if=\"item.id===selectedTab\" class=\"indicator\" :style=\"indicatorStyle\"></div>     \r\n          </div>\r\n        </div>\r\n\r\n    <!-- <div class=\"list-wrap full-width\"\r\n         v-dragscroll.x=\"true\"\r\n         @dragscrollmove.prevent.self=\"onDrag\"\r\n         :class=\"{'dragscroll':isIE}\"\r\n         ref=\"dragscroll\"\r\n         :style=\"grabStyle\"> -->\r\n\r\n      <!-- <div class=\"grab-bing flex-align full-width\" ref=\"grabbing\"\r\n        v-if=\"childStateTwo\">\r\n        <div v-for=\"(item,idx) in childListTwo\"\r\n             :key=\"'tab-'+item.id\" class=\"unselect list-item\"\r\n             :style=\"childTwoStyle(item.id)\"\r\n             @click.stop.prevent=\"clickTabTwo(item,idx)\"\r\n             :ref=\"'tabItem'+idx\">\r\n             {{ item.name }}\r\n              <div v-if=\"item.id===selectedTab\" class=\"indicator\" :style=\"indicatorStyle\"></div>     \r\n        </div>\r\n      </div> -->\r\n      \r\n    <!-- </div> -->\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import {dragscroll} from 'vue-dragscroll'\r\n\r\n  export default {\r\n    name: \"DynamicGnb\",\r\n    directives: {\r\n      dragscroll\r\n    },\r\n    props: {\r\n      menu: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      // 선택된 탭 id\r\n      // qeury와 같이 number로 판단하고 싶을때 number로 치환시켜 보내주어야 한다\r\n      initialTab: {\r\n        type: [String, Number],\r\n        required: false\r\n      },\r\n      selectedItemStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      customItemStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      indicatorStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      scrollable: {\r\n        type: Boolean,\r\n        required: false,\r\n        default: true\r\n      }\r\n    },\r\n    created() {\r\n      console.log('init')\r\n      this.init();\r\n    },\r\n    data() {\r\n      return {\r\n        selectedTab: 0,\r\n        selectedChildTab: undefined,\r\n        selectedChildTabTwo: undefined,\r\n        dragging: false,\r\n        scrollArray: [],\r\n        selectedIndex: undefined,\r\n        childListOne: [],\r\n        childListTwo: [],\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      lineStyle() {\r\n\r\n      },\r\n      childStateOne() {\r\n        let menu = this.computedMenu[0];\r\n        if(menu && menu.child && menu.child.length>0) {\r\n          if(menu.child.length===1 && menu.child[0].name==='전체') {\r\n            return false;\r\n          }\r\n          else return true;\r\n        }\r\n        else {\r\n          return false;\r\n        }\r\n      },\r\n      childStateTwo() {\r\n        let menu = this.computedChildMenu ? this.computedChildMenu[0] : [];\r\n        if(menu && menu.child && menu.child.length>0) {\r\n          if(menu.child.length===1 && menu.child[0].name==='전체') {\r\n            return false;\r\n          }\r\n          else return true;\r\n        }\r\n        else {\r\n          return false;\r\n        }\r\n      },\r\n      grabStyle() {\r\n        return {\r\n          borderBottom: this.brandBorder.main.border,\r\n        }\r\n      },\r\n      computedChildMenu() {\r\n        let result = [];\r\n        if(this.childStateOne && this.childListOne.length>0) {\r\n          this.childListOne.forEach(item => {\r\n            if(item.id === this.selectedChildTab) {\r\n              result.push(item);\r\n            }\r\n          })\r\n          return result;\r\n        }\r\n      },\r\n      computedMenu() {\r\n        let result = [];\r\n        this.menu.forEach(item => {\r\n          if(item.id === this.selectedTab)\r\n            result.push(item);\r\n        });\r\n        return result;\r\n      },\r\n      divider1Style() {\r\n        let deco = {\r\n          backgroundColor: this.getColor('기본 테두리선 색상'),\r\n          width: '100%',\r\n          height: '1px'\r\n        };\r\n        if (this.dividerStyle!==undefined) deco = this.dividerStyle;\r\n        return deco;\r\n      },\r\n      tabListStyle() {\r\n        let deco = {};\r\n        if(this.scrollable) {\r\n          deco = {\r\n            overflowX: 'scroll',\r\n            flexWrap: 'nowrap',\r\n            display: '-webkit-box'\r\n          }\r\n        }\r\n        return deco;\r\n      },\r\n      isIE() {\r\n        if (navigator.userAgent.indexOf('Trident') > -1) return true;\r\n        else return false;\r\n      }\r\n    },\r\n\r\n    watch: {\r\n      /* selectedTab(n) {\r\n        if(!find(this.menu, 'id', n)) {\r\n          this.clickTab(this.menu[0], 0);\r\n          return;\r\n        } else {\r\n          this.$emit('select', n);\r\n        }\r\n        if(this.$route.path.indexOf('home')===-1) {\r\n          let query = cloneItem(this.$route.query);\r\n          query.tab = n;\r\n          this.$route.meta.clickPush = true;\r\n          this.$router.replace({\r\n            path: this.$route.path,\r\n            query: query\r\n          });\r\n        }\r\n      }  */\r\n      // '$route.query.gnb'(n) {\r\n      //   setTimeout(() => {\r\n      //     let one = find(this.menu, 'id', n);\r\n      //     let two = find(this.childListOne, 'id', n);\r\n      //     let three = find(this.childListTwo, 'id', n);\r\n      //     console.log('123',two,three)\r\n      //     if(one) {\r\n      //       console.log('one',one, one.index)\r\n      //       this.clickTab(one, one.index);\r\n      //     }\r\n          // if(two) {\r\n          //   if(two.name!=='전체') this.clickTabOne(two, two.index);\r\n            \r\n          // }\r\n          // if(three) {\r\n          //   if(three.name!=='전체') this.clickTabTwo(three, three.index);\r\n          // }\r\n      //   },300)\r\n        \r\n      // },\r\n      '$route.query'(n) {\r\n        // let menu1 = [];\r\n        // let menu2 = [];\r\n        // if(n.category2) {\r\n        //   menu1 = this.menu.filter(item => { return item.id === Number(n.category1) })[0];\r\n        //   if(menu1) {\r\n        //     this.clickTab(menu1, menu1.index, true);\r\n        //     menu2 = menu1.child.filter(item => { return item.id === Number(n.category2)})[0];\r\n        //     if(menu2) this.clickTabOne(menu2, menu2.index);\r\n        //     console.log('menu', menu1, menu2)\r\n        //   }\r\n        // }\r\n        this.init();\r\n      },\r\n      selectedChildTab(n) {\r\n        if(this.childListOne && this.childListOne.length>0 && n) {\r\n          // if(!find(this.childListOne, 'id', n)) {\r\n          //   this.clickTab(this.childListOne[0], 0);\r\n          //   return;\r\n          // } else {\r\n          //   this.$emit('selectedGnb', n);\r\n          // }\r\n\r\n          if(this.$route.path.indexOf('home')===-1 && n) {\r\n            let query = cloneItem(this.$route.query);\r\n            query.gnb = n;\r\n            query.category1 = this.selectedTab;\r\n            query.category2 = n;\r\n            this.$route.meta.clickPush = true;\r\n            this.$router.replace({\r\n              path: this.$route.path,\r\n              query: query\r\n            });\r\n          }\r\n\r\n        }\r\n      },\r\n      selectedChildTabTwo(n) {\r\n        if(this.childListTwo && this.childListTwo.length>0) {\r\n          // if(!find(this.childListTwo, 'id', n)) {\r\n          //   this.clickTab(this.childListTwo[0], 0);\r\n          //   return;\r\n          // } else {\r\n          //   this.$emit('selectedGnb', n);\r\n          // }\r\n\r\n          if(this.$route.path.indexOf('home')===-1 && n) {\r\n            let query = cloneItem(this.$route.query);\r\n            query.gnb = n;\r\n            query.category1 = this.selectedTab;\r\n            query.category2 = this.selectedChildTab;\r\n            query.category3 = n;\r\n            this.$route.meta.clickPush = true;\r\n            this.$router.replace({\r\n              path: this.$route.path,\r\n              query: query\r\n            });\r\n          }\r\n\r\n        }\r\n      },\r\n    },\r\n\r\n    methods: {\r\n      init() {\r\n        if (this.initialTab!==undefined) {\r\n          if (typeof(this.initialTab)==='number') {\r\n            this.selectedTab = parseInt(this.initialTab);\r\n          }\r\n          else if (typeof(this.initialTab)==='string') {\r\n            this.selectedTab = this.initialTab;\r\n          }\r\n        }\r\n\r\n        if(this.$route.query.gnb && this.menu && this.menu.length>0) {\r\n          for(let i=0;i<this.menu.length;i++) {\r\n            if(this.menu[i].id === Number(this.$route.query.gnb)) {\r\n              if(this.menu[i].child.length===1 && this.menu[i].child[0].name==='전체') {\r\n                this.clickTab(this.menu[i], i, true);\r\n              }\r\n              else {\r\n                this.clickTab(this.menu[i], i, true);\r\n                // this.clickTabOne(this.menu[i].child[0], 0);\r\n              }\r\n            }\r\n            else {\r\n              if(this.menu[i].child && this.menu[i].child.length>0) {\r\n                for(let j=0;j<this.menu[i].child.length;j++) {\r\n                  if(this.menu[i].child[j].id === Number(this.$route.query.gnb)) {\r\n                    this.clickTab(this.menu[i], i, true);\r\n                    this.clickTabOne(this.menu[i].child[j], j);\r\n                  }\r\n                  else {\r\n                    if(this.menu[i].child[j].child && this.menu[i].child[j].child.length>0) {\r\n                      for(let k=0;k<this.menu[i].child[j].child.length;k++) {\r\n                        if(this.menu[i].child[j].child[k].id === Number(this.$route.query.gnb)) {\r\n                          this.clickTab(this.menu[i], i, true);\r\n                          this.clickTabOne(this.menu[i].child[j], j);\r\n                          this.clickTabTwo(this.menu[i].child[j].child[k], k);\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            \r\n          }\r\n          // this.selectedTab = Number(this.$route.query.gnb);\r\n          // this.selectedChildTab = Number(this.$route.query.gnb);\r\n        }\r\n\r\n        if(this.isIE) {\r\n          setTimeout(() => {\r\n            dragscroll.reset();\r\n          },1000);\r\n        }\r\n\r\n        // 스크롤 \r\n        this.$nextTick(() => {\r\n          let totalWidth = 0;\r\n          // 스크롤아이템 width 저장\r\n          for (let i=0; i<this.menu.length; i++) {\r\n            if (this.$refs[`tabItem${i}`]&&this.$refs[`tabItem${i}`][0]) {\r\n              // console.log('refs', this.$refs[`tabItem${i}`])\r\n              let width = this.$refs[`tabItem${i}`][0].offsetWidth;\r\n              this.scrollArray.push({\r\n                id : this.menu[i].id,\r\n                name : this.menu[i].name,\r\n                width: width,                        // 본인 너비\r\n                accumulatedWidth: totalWidth+width   // 본인 누적너비\r\n              });\r\n              totalWidth += width;                   // 총 너비\r\n            }\r\n            // 현재 선택된 탭 index 저장\r\n            if (this.menu[i].id === this.selectedTab) {\r\n              this.selectedIndex = i;\r\n            }\r\n          }\r\n          // 스크롤 중앙 정렬\r\n          this.setScroll(this.selectedIndex);\r\n        })\r\n        \r\n      },\r\n\r\n      itemStyle(id) {\r\n        let obj = {\r\n          padding: '13px 16px'\r\n        };\r\n\r\n        if (id===this.selectedTab) {\r\n          if(this.selectedItemStyle) {\r\n            return Object.assign(obj, this.selectedItemStyle);\r\n          }\r\n          else {\r\n            obj.color = this.brandColor.brand.color;\r\n            obj.borderBottom = `2px solid ${this.brandColor.brand.color}`;\r\n          }\r\n        } \r\n\r\n        if (this.customItemStyle) {\r\n          return Object.assign(obj, this.customItemStyle);\r\n        } else {\r\n          return obj;\r\n        }\r\n      },\r\n      categoryImg(item) {\r\n        let obj = {\r\n          width: '36px',\r\n          height: '36px',\r\n          backgroundSize: 'cover',\r\n          backgroundRepeat: 'noRepeat',\r\n          borderRadius: '4px'\r\n        };\r\n        if(item.id===this.selectedChildTab) {\r\n          if(item.img_after) {\r\n            obj.backgroundImage = `url(${item.img_after})`;\r\n          }\r\n          else {\r\n            obj.backgroundImage = `url(${this.dummyImage.bg})`;\r\n          }\r\n        }\r\n        else {\r\n          if(item.img_before) {\r\n            obj.backgroundImage = `url(${item.img_before})`;\r\n          }\r\n          else {\r\n            obj.backgroundImage = `url(${this.dummyImage.bg})`;\r\n          }\r\n        }\r\n        \r\n        return obj;\r\n      },\r\n\r\n      childStyle(id) {\r\n        let obj = {\r\n          padding: '10px 0',\r\n          borderBottom: this.brandBorder.main.border,\r\n          borderRight: this.brandBorder.main.border\r\n        };\r\n\r\n        if (id===this.selectedChildTab) {\r\n          if(this.selectedItemStyle) {\r\n            return Object.assign(obj, this.selectedItemStyle);\r\n          }\r\n          else {\r\n            obj.color = this.brandColor.brand.color;\r\n          }\r\n        } \r\n\r\n        if (this.customItemStyle) {\r\n          return Object.assign(obj, this.customItemStyle);\r\n        } else {\r\n          return obj;\r\n        }\r\n      },\r\n\r\n      childTwoStyle(id) {\r\n        let obj = {\r\n          padding: '13px 16px'\r\n        };\r\n\r\n        if (id===this.selectedChildTabTwo) {\r\n          if(this.selectedItemStyle) {\r\n            return Object.assign(obj, this.selectedItemStyle);\r\n          }\r\n          else {\r\n            obj.color = this.brandColor.brand.color;\r\n            obj.borderBottom = `2px solid ${this.brandColor.brand.color}`;\r\n          }\r\n        } \r\n\r\n        if (this.customItemStyle) {\r\n          return Object.assign(obj, this.customItemStyle);\r\n        } else {\r\n          return obj;\r\n        }\r\n      },\r\n\r\n      clickTab(item, idx, boo) {\r\n        // 드래그앤드 시 클릭방지\r\n        if (this.dragging) {\r\n          this.dragging = false;\r\n          return;\r\n        }\r\n        else {\r\n          this.selectedChildTab = undefined;\r\n          this.selectedChildTabTwo = undefined;\r\n          if(item.child) this.childListOne = item.child;\r\n          this.selectedTab = item.id;\r\n          if(this.selectedTab) this.$emit('select', this.selectedTab);\r\n          this.dragging = false;\r\n\r\n          if(!boo) {\r\n            if(this.menu && this.menu.length>0) {\r\n              // if(!find(this.menu, 'id', n)) {\r\n              //   this.clickTab(this.menu[0], 0);\r\n              //   return;\r\n              // } else {\r\n              //   this.$emit('selectedGnb', n);\r\n              // }\r\n              if(this.$route.path.indexOf('home')===-1) {\r\n                let query = cloneItem(this.$route.query);\r\n                if(this.selectedTab===0) query.gnb = '';\r\n                else query.gnb = this.selectedTab;\r\n                if(query.category1) delete query.category1;\r\n                if(query.category2) delete query.category2;\r\n                if(query.category3) delete query.category3;\r\n                this.$route.meta.clickPush = true;\r\n                this.$router.replace({\r\n                  path: this.$route.path,\r\n                  query: query\r\n                });\r\n                \r\n              }\r\n            }\r\n          }\r\n\r\n          // 스크롤 위치\r\n          if (this.scrollable) {\r\n            this.setScroll(idx);\r\n          }\r\n        }\r\n      },\r\n      clickTabOne(item, idx) {\r\n        // 드래그앤드 시 클릭방지\r\n        if (this.dragging) {\r\n          this.dragging = false;\r\n          return;\r\n        }\r\n        else {\r\n          this.selectedChildTabTwo = undefined;\r\n          if(item.child) this.childListTwo = item.child;\r\n          this.selectedChildTab = item.id;\r\n          // if(this.selectedChildTab) this.$emit('select', this.selectedChildTab);\r\n          this.dragging = false;\r\n\r\n          // 스크롤 위치\r\n          if (this.scrollable) {\r\n            // this.setScroll(idx);\r\n          }\r\n        }\r\n      },\r\n      clickTabTwo(item, idx) {\r\n        // 드래그앤드 시 클릭방지\r\n        if (this.dragging) {\r\n          this.dragging = false;\r\n          return;\r\n        }\r\n        else {\r\n          this.selectedChildTabTwo = item.id;\r\n          // if(this.selectedChildTabTwo) this.$emit('select', this.selectedChildTabTwo);\r\n          this.dragging = false;\r\n\r\n          // 스크롤 위치\r\n          if (this.scrollable) {\r\n            // this.setScroll(idx);\r\n          }\r\n        }\r\n      },\r\n      onDrag(e) {\r\n        // 기종별 감도차이 때문에 0이 아닌 1로 약간의 여유있게 줌\r\n        if (Math.abs(e.detail.deltaX) > 1) {\r\n          this.dragging = true;\r\n        }\r\n      },\r\n      // 선택된 탭을 스크롤 중앙으로\r\n      setScroll(index) {\r\n        let target = this.scrollArray[index];\r\n        if (target) {\r\n          let result = (target.accumulatedWidth - (target.width/2));\r\n          result -= (this.$store.getters.deviceWidth/2);\r\n          console.log(target, result)\r\n          this.$refs.dragscroll.scrollTo({\r\n            behavior: 'smooth',\r\n            left: result\r\n          });\r\n        }\r\n      }\r\n    },\r\n\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n\r\n  .list-horizontal\r\n    overflow hidden\r\n\r\n  .list-wrap\r\n    overflow hidden\r\n\r\n  .grab-bing\r\n    white-space nowrap\r\n    position relative\r\n    text-overflow ellipsis\r\n\r\n  .list-item\r\n    display inline-block\r\n\r\n</style>\r\n"]}]}