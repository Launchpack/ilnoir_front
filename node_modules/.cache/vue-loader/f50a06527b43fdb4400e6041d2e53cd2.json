{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Block/BlockProfile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Block/BlockProfile.vue","mtime":1605259999000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FormMixin from \"@/components/Mixins/FormMixin\"\nimport AuthMixin from \"@/components/Mixins/AuthMixin\"\nimport FormCustomMixin from \"@/components/Components/Mixin/FormCustomMixin\"\n\nexport default {\n  name: 'BlockProfile',\n  components: {\n\n  },\n  mixins: [\n    FormMixin,\n    AuthMixin,\n    FormCustomMixin\n  ],\n  props: {\n\n  },\n  data() {\n    return {\n      \"check\": false,\n      \"formData\": []\n    }\n  },\n  created() {\n      this.getForm();\n    },\n  \n  methods: {\n    save() {\n        // 소셜로그인 여부\n        if (this.isSocialLogin) {\n          this.updateInfo();\n        }\n        // 이메일로그인\n        else {\n          let password = find(this.formData, 'field', 'password').value;\n          if(!password) {\n            this.toast('비밀번호를 입력하세요.');\n            return;\n          }\n          // 비밀번호 체크 api\n          this.$axios.post('auth/user/login', {\n            username: find(this.formData, 'field', 'username').value,\n            password: find(this.formData, 'field', 'password').value\n          }).then(res=> {\n            if(res.status===200) {\n              this.updateInfo();\n            }\n          }).catch(error=> {\n            this.toast('잘못된 비밀번호 입니다.');\n          });\n        }\n      },\n    updateInfo() {\n        let result = this.getParamData(this.formData);\n        if(result.enable) {\n          this.$axios.patch(`user/${this.$store.getters.user.user_id}`,\n            result.params).then(res=>{\n            if(res.status===200) {\n              this.toast('내 정보가 변경되었습니다.');\n              this.setUserData(res.data);\n              this.$router.replace('home');\n            }\n          }).catch(err=> {\n            if(!err.response.data.message)\n              this.toast(err.response.data.detail);\n            else\n              this.toast(err.response.data.message);\n          })\n        }\n      },\n    getForm() {\n        this.$axios.get('public/member/formdata/2').then(res=>{\n          this.formData = this.setForm(res.data);\n          \n          let profileForm = find(this.formData, 'field', 'profile');\n          if (profileForm && profileForm.format==='CImgUploader') {\n            profileForm.elType = 'c-input-imgUploader-single'\n            profileForm.format = 'CImgUploaderSingle'\n          }\n\n          let result = [];\n\n          this.formData.forEach((item,idx) => {\n            // 폼 ID 수정 불가\n            if (item.field==='username') item.disabled = true;\n            let user = this.$store.getters.user;\n            let value = user[item.field]\n            if(value) item.value = value;\n\n            // 소셜로그인 여부\n            if (this.isSocialLogin) {\n              if (['username','password','password_re'].indexOf(item.field)>-1) {\n                item.enable = false;\n                item.validate = {\n                  required: false,\n                  valid_required: false\n                };\n              }\n            }\n            // 이메일 로그인\n            else if (user.username!==undefined) {\n              if (['email','password_re'].indexOf(item.field)>-1) {\n                item.enable = false;\n                item.validate = {\n                  required: false,\n                  valid_required: false\n                };\n              }\n            }\n            \n            result.push(item);\n          })\n          \n          this.formData = result;\n          \n        })\n      }\n  },\n  computed: {\n    user() {\n        return this.$store.getters.user;\n      },\n    computedformData() {\n        let result = [];\n        this.formData.forEach(item => {\n          if (item.enable) result.push(item);\n        })\n        return result;\n      },\n    addressButtonCustom() {\n      let styles = this.cloneItem(this.buttonCustom);\n      styles.backgroundColor = this.brandColor.sub.color;\n      styles.padding = '12px 20px';\n      return styles;\n    }\n  },\n  watch: {\n    \n  }\n}\n",{"version":3,"sources":["BlockProfile.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"BlockProfile.vue","sourceRoot":"src/components/Components/Block","sourcesContent":["<template>\n<div>\n  <!--내정보수정 폼 요소-->\n  <component :is=\"form.elType\" v-for=\"(form,idx) in formData\" :key=\"'form-'+idx\"\n             v-bind=\"form\" :value.sync=\"form.value\"\n             :formType=\"formTypeCustomLabel\"\n             :containerCustomStyle=\"form.containerCustom\"\n             :labelCustomStyle=\"labelCustom\"\n             :inputCustomStyle=\"inputCustom\"\n             :addressInputWrapStyle=\"{marginTop: '8px'}\"\n             :buttonCustomStyle=\"buttonCustom\"\n             :addressButtonCustomStyle=\"addressButtonCustom\"></component>\n\n  <!--내정보수정 버튼-->\n  <div :style=\"buttonCustom\" style=\"margin: 48px 0 20px;\" @click=\"save\">변경하기</div>\n</div>  \n  \n  \n<!--<div>-->\n    <!-- 내 정보 수정 폼 -->\n<!--    <component :is=\"form.elType\" -->\n<!--      v-for=\"(form,idx) in computedformData\" :key=\"'form-'+idx\"-->\n<!--      v-bind=\"form\"-->\n<!--      :value.sync=\"form.value\"-->\n<!--      :formType=\"formTypeData\"></component>-->\n<!--    <div style=\"margin-top: 24px\">-->\n<!--      <btn :color=\"brandColor.white\"-->\n<!--           :backgroundColor=\"brandBgColor.brand\"-->\n<!--           @clicked=\"save\">변경하기</btn>-->\n<!--    </div>-->\n<!--  </div>-->\n</template>\n<script>\nimport FormMixin from \"@/components/Mixins/FormMixin\"\nimport AuthMixin from \"@/components/Mixins/AuthMixin\"\nimport FormCustomMixin from \"@/components/Components/Mixin/FormCustomMixin\"\n\nexport default {\n  name: 'BlockProfile',\n  components: {\n\n  },\n  mixins: [\n    FormMixin,\n    AuthMixin,\n    FormCustomMixin\n  ],\n  props: {\n\n  },\n  data() {\n    return {\n      \"check\": false,\n      \"formData\": []\n    }\n  },\n  created() {\n      this.getForm();\n    },\n  \n  methods: {\n    save() {\n        // 소셜로그인 여부\n        if (this.isSocialLogin) {\n          this.updateInfo();\n        }\n        // 이메일로그인\n        else {\n          let password = find(this.formData, 'field', 'password').value;\n          if(!password) {\n            this.toast('비밀번호를 입력하세요.');\n            return;\n          }\n          // 비밀번호 체크 api\n          this.$axios.post('auth/user/login', {\n            username: find(this.formData, 'field', 'username').value,\n            password: find(this.formData, 'field', 'password').value\n          }).then(res=> {\n            if(res.status===200) {\n              this.updateInfo();\n            }\n          }).catch(error=> {\n            this.toast('잘못된 비밀번호 입니다.');\n          });\n        }\n      },\n    updateInfo() {\n        let result = this.getParamData(this.formData);\n        if(result.enable) {\n          this.$axios.patch(`user/${this.$store.getters.user.user_id}`,\n            result.params).then(res=>{\n            if(res.status===200) {\n              this.toast('내 정보가 변경되었습니다.');\n              this.setUserData(res.data);\n              this.$router.replace('home');\n            }\n          }).catch(err=> {\n            if(!err.response.data.message)\n              this.toast(err.response.data.detail);\n            else\n              this.toast(err.response.data.message);\n          })\n        }\n      },\n    getForm() {\n        this.$axios.get('public/member/formdata/2').then(res=>{\n          this.formData = this.setForm(res.data);\n          \n          let profileForm = find(this.formData, 'field', 'profile');\n          if (profileForm && profileForm.format==='CImgUploader') {\n            profileForm.elType = 'c-input-imgUploader-single'\n            profileForm.format = 'CImgUploaderSingle'\n          }\n\n          let result = [];\n\n          this.formData.forEach((item,idx) => {\n            // 폼 ID 수정 불가\n            if (item.field==='username') item.disabled = true;\n            let user = this.$store.getters.user;\n            let value = user[item.field]\n            if(value) item.value = value;\n\n            // 소셜로그인 여부\n            if (this.isSocialLogin) {\n              if (['username','password','password_re'].indexOf(item.field)>-1) {\n                item.enable = false;\n                item.validate = {\n                  required: false,\n                  valid_required: false\n                };\n              }\n            }\n            // 이메일 로그인\n            else if (user.username!==undefined) {\n              if (['email','password_re'].indexOf(item.field)>-1) {\n                item.enable = false;\n                item.validate = {\n                  required: false,\n                  valid_required: false\n                };\n              }\n            }\n            \n            result.push(item);\n          })\n          \n          this.formData = result;\n          \n        })\n      }\n  },\n  computed: {\n    user() {\n        return this.$store.getters.user;\n      },\n    computedformData() {\n        let result = [];\n        this.formData.forEach(item => {\n          if (item.enable) result.push(item);\n        })\n        return result;\n      },\n    addressButtonCustom() {\n      let styles = this.cloneItem(this.buttonCustom);\n      styles.backgroundColor = this.brandColor.sub.color;\n      styles.padding = '12px 20px';\n      return styles;\n    }\n  },\n  watch: {\n    \n  }\n}\n</script>\n\n\n"]}]}