{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Button/IconCircleLike.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Button/IconCircleLike.vue","mtime":1605259982000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"IconCircleLike\",\n  props: {\n    id: {\n      type: Number,\n      required: false\n    },\n    value: {        // 좋아요 여부 (props로 넘기지 않을 경우 api 호출)\n      required: false\n    },\n    likeType: {\n      type: String,\n      required: true\n    },\n    size: {\n      type: Number,\n      default: 24\n    },\n    color: {\n      type: String,\n      default: 'sub'\n    },\n    activeColor: {\n      type: String,\n      default: 'brand'\n    },\n    count: {          // 숫자표시\n      type: Number,\n      required: false\n    },\n    countCustomStyle: {\n      type: Object,\n      required: false\n    },\n    menuTitle: {\n      type: String,\n      default: '마이페이지 > 즐겨찾기'\n    },\n    text: {\n      type: String,\n      required: false\n    },\n    hover: {\n      type: Boolean,\n      required: false\n    },\n    width: {\n      type: Number,\n      required: false,\n      default: 48\n    },\n    height: {\n      type: Number,\n      required: false,\n      default: 48\n    },\n    borderRadius: {\n      type: Number,\n      default: 8\n    },\n    border: {\n      type: String,\n      required: false,\n    },\n    containStyle: {\n      type: Object,\n      required: false\n    },\n    textStyle: {\n      type: Object,\n      required: false\n    }\n  },\n  data() {\n    return {\n      icon: 'favorite_border',\n      isLike: false,\n      url: '',\n      computedCount: undefined,\n      mouseHover: false\n    }\n  },\n  created() {\n    if (this.count !== undefined) this.computedCount = this.count;\n\n    if(!this.isLogin) return;\n\n    let id = this.$route.query.id;\n    if (this.id) id = this.id;\n    this.url = `user/${this.$store.getters.user.user_id}/${this.likeType}/${id}/islike`;\n\n    // 좋아요 값 props로 넘길 경우\n    if (this.value!==undefined) this.isLike = this.value;\n    // props로 넘기지 않을 경우 각각 api 호출\n    else {\n      this.$axios.get(this.url).then(res => {\n        this.isLike = res.data.is_liked;\n      });\n    }\n  },\n  computed: {\n    iconStyle() {\n      let color = this.isLike ? this.activeColor : this.color;\n      let deco = {};\n      deco.fontSize = (this.size).toString()+'px';\n      deco.height = (this.size).toString()+'px';\n      deco.textAlign = 'center';\n      deco.color = this.brandColor[color].color;\n\n      return deco;\n    },\n    iconWrapStyle() {\n      let deco = {\n        backgroundColor: `${this.getColor('기본 배경 색상')}`,\n        // border: `1px solid ${this.getColor('기본 테두리선 색상')}`\n      };\n      // 버튼 안에 글자 있을때\n      if(this.text) {\n        deco.borderRadius = `${this.borderRadius}px`,\n        deco.textAlign = 'center',\n        deco.border = `1px solid ${this.getColor('기본 테두리선 색상')}`\n        if(this.$store.getters.device==='mobile') {\n          deco.padding = '4px 8px'\n        }\n        else {\n          deco.padding = '8px 28px',\n          deco.height = '56px'\n        }\n      }\n\n      // 버튼 안에 아이콘만 있을 때\n      else {\n        // 마우스 오버 사용할 때\n        if(this.hover) {\n          if(!this.mouseHover) {\n            deco.width = '42px',\n            deco.height = '42px',\n            deco.borderRadius = `${this.borderRadius}px`\n          }\n          if(this.mouseHover) {\n            deco.width = '44px',\n            deco.height = '44px',\n            deco.borderRadius = `${this.borderRadius}px`,\n            deco.boxShadow = '0 3px 6px 0 rgba(0, 0, 0, 0.16)'\n          }\n        }\n\n        // 마우스 오버 사용하지 않을 때\n        else {\n          if(this.width) deco.width = `${this.width}px`\n          if(this.height) deco.height = `${this.height}px`\n          if(this.borderRadius) deco.borderRadius = `${this.borderRadius}px`\n          if(this.border) deco.border = `${this.border}`\n        }\n        \n      }\n      \n      return deco;\n    },\n    \n\n    countStyle() {\n      let deco = {};\n\n      deco.color = this.brandColor.main.color;\n      deco.fontSize = '11px';\n      deco.textAlign = 'center';\n\n      if (this.countCustomStyle) deco = this.countCustomStyle;\n\n      return deco;\n    },\n    letterStyle() {\n      return {\n        marginLeft: '6px',\n        whiteSpace: 'pre',\n        color: this.getColor('보조 내용 색상')\n      }\n    }\n\n  },\n\n  methods: {\n    hoverMouse() {\n      this.mouseHover = true;\n    },\n    leaveMouse() {\n      this.mouseHover = false;\n    },\n    clickBtn() {\n      if(!this.isLogin) {\n        this.toast('찜하시려면 로그인이 필요합니다')\n        return;\n      }\n\n      this.$axios.post(this.url.replace('islike','like'))\n        .then(() => {\n          this.isLike = !this.isLike;\n          this.$emit('liked', this.isLike)\n\n          if (this.isLike) {\n            if (this.likeType === 'product')\n              this.toast('상품을 찜하였습니다.\\n' +\n                this.menuTitle + '에서 \\n' +\n                '확인하실 수 있습니다._icon_favorite');\n            else if (this.likeType === 'partner')\n              this.toast('파트너를 찜하였습니다.\\n' +\n                this.menuTitle + '에서 \\n' +\n                '확인하실 수 있습니다._icon_favorite');\n          }\n\n          // 클릭 공통 emit\n          this.$emit('click');\n\n          // 카운트 숫자 있을 경우\n          if (!this.isLike) this.computedCount -= 1;\n          else this.computedCount += 1;\n\n          if (this.computedCount<0) this.computedCount = 0;\n        });\n    }\n  }\n\n}\n",{"version":3,"sources":["IconCircleLike.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"IconCircleLike.vue","sourceRoot":"src/components/Components/Button","sourcesContent":["<template>\r\n  <div class=\"flex-center unselect\" @click.stop.prevent=\"clickBtn\" \r\n    :style=\"[containStyle ? containStyle : iconWrapStyle]\"\r\n    @mouseover=\"hoverMouse\"\r\n    @mouseleave=\"leaveMouse\">\r\n    <i class=\"material-icons\"\r\n      :style=\"iconStyle\"\r\n      >{{ isLike ? 'favorite' : 'favorite_border' }}</i>\r\n    <div v-if=\"text\" :style=\"[textStyle ? textStyle : letterStyle]\">{{ text }}</div>\r\n    <div v-if=\"count!==undefined&&computedCount!==undefined\"\r\n        class=\"full-width\" :style=\"countStyle\">{{ computedCount }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: \"IconCircleLike\",\r\n    props: {\r\n      id: {\r\n        type: Number,\r\n        required: false\r\n      },\r\n      value: {        // 좋아요 여부 (props로 넘기지 않을 경우 api 호출)\r\n        required: false\r\n      },\r\n      likeType: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      size: {\r\n        type: Number,\r\n        default: 24\r\n      },\r\n      color: {\r\n        type: String,\r\n        default: 'sub'\r\n      },\r\n      activeColor: {\r\n        type: String,\r\n        default: 'brand'\r\n      },\r\n      count: {          // 숫자표시\r\n        type: Number,\r\n        required: false\r\n      },\r\n      countCustomStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      menuTitle: {\r\n        type: String,\r\n        default: '마이페이지 > 즐겨찾기'\r\n      },\r\n      text: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      hover: {\r\n        type: Boolean,\r\n        required: false\r\n      },\r\n      width: {\r\n        type: Number,\r\n        required: false,\r\n        default: 48\r\n      },\r\n      height: {\r\n        type: Number,\r\n        required: false,\r\n        default: 48\r\n      },\r\n      borderRadius: {\r\n        type: Number,\r\n        default: 8\r\n      },\r\n      border: {\r\n        type: String,\r\n        required: false,\r\n      },\r\n      containStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      textStyle: {\r\n        type: Object,\r\n        required: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        icon: 'favorite_border',\r\n        isLike: false,\r\n        url: '',\r\n        computedCount: undefined,\r\n        mouseHover: false\r\n      }\r\n    },\r\n    created() {\r\n      if (this.count !== undefined) this.computedCount = this.count;\r\n\r\n      if(!this.isLogin) return;\r\n\r\n      let id = this.$route.query.id;\r\n      if (this.id) id = this.id;\r\n      this.url = `user/${this.$store.getters.user.user_id}/${this.likeType}/${id}/islike`;\r\n\r\n      // 좋아요 값 props로 넘길 경우\r\n      if (this.value!==undefined) this.isLike = this.value;\r\n      // props로 넘기지 않을 경우 각각 api 호출\r\n      else {\r\n        this.$axios.get(this.url).then(res => {\r\n          this.isLike = res.data.is_liked;\r\n        });\r\n      }\r\n    },\r\n    computed: {\r\n      iconStyle() {\r\n        let color = this.isLike ? this.activeColor : this.color;\r\n        let deco = {};\r\n        deco.fontSize = (this.size).toString()+'px';\r\n        deco.height = (this.size).toString()+'px';\r\n        deco.textAlign = 'center';\r\n        deco.color = this.brandColor[color].color;\r\n\r\n        return deco;\r\n      },\r\n      iconWrapStyle() {\r\n        let deco = {\r\n          backgroundColor: `${this.getColor('기본 배경 색상')}`,\r\n          // border: `1px solid ${this.getColor('기본 테두리선 색상')}`\r\n        };\r\n        // 버튼 안에 글자 있을때\r\n        if(this.text) {\r\n          deco.borderRadius = `${this.borderRadius}px`,\r\n          deco.textAlign = 'center',\r\n          deco.border = `1px solid ${this.getColor('기본 테두리선 색상')}`\r\n          if(this.$store.getters.device==='mobile') {\r\n            deco.padding = '4px 8px'\r\n          }\r\n          else {\r\n            deco.padding = '8px 28px',\r\n            deco.height = '56px'\r\n          }\r\n        }\r\n\r\n        // 버튼 안에 아이콘만 있을 때\r\n        else {\r\n          // 마우스 오버 사용할 때\r\n          if(this.hover) {\r\n            if(!this.mouseHover) {\r\n              deco.width = '42px',\r\n              deco.height = '42px',\r\n              deco.borderRadius = `${this.borderRadius}px`\r\n            }\r\n            if(this.mouseHover) {\r\n              deco.width = '44px',\r\n              deco.height = '44px',\r\n              deco.borderRadius = `${this.borderRadius}px`,\r\n              deco.boxShadow = '0 3px 6px 0 rgba(0, 0, 0, 0.16)'\r\n            }\r\n          }\r\n\r\n          // 마우스 오버 사용하지 않을 때\r\n          else {\r\n            if(this.width) deco.width = `${this.width}px`\r\n            if(this.height) deco.height = `${this.height}px`\r\n            if(this.borderRadius) deco.borderRadius = `${this.borderRadius}px`\r\n            if(this.border) deco.border = `${this.border}`\r\n          }\r\n          \r\n        }\r\n        \r\n        return deco;\r\n      },\r\n      \r\n\r\n      countStyle() {\r\n        let deco = {};\r\n\r\n        deco.color = this.brandColor.main.color;\r\n        deco.fontSize = '11px';\r\n        deco.textAlign = 'center';\r\n\r\n        if (this.countCustomStyle) deco = this.countCustomStyle;\r\n\r\n        return deco;\r\n      },\r\n      letterStyle() {\r\n        return {\r\n          marginLeft: '6px',\r\n          whiteSpace: 'pre',\r\n          color: this.getColor('보조 내용 색상')\r\n        }\r\n      }\r\n\r\n    },\r\n\r\n    methods: {\r\n      hoverMouse() {\r\n        this.mouseHover = true;\r\n      },\r\n      leaveMouse() {\r\n        this.mouseHover = false;\r\n      },\r\n      clickBtn() {\r\n        if(!this.isLogin) {\r\n          this.toast('찜하시려면 로그인이 필요합니다')\r\n          return;\r\n        }\r\n\r\n        this.$axios.post(this.url.replace('islike','like'))\r\n          .then(() => {\r\n            this.isLike = !this.isLike;\r\n            this.$emit('liked', this.isLike)\r\n\r\n            if (this.isLike) {\r\n              if (this.likeType === 'product')\r\n                this.toast('상품을 찜하였습니다.\\n' +\r\n                  this.menuTitle + '에서 \\n' +\r\n                  '확인하실 수 있습니다._icon_favorite');\r\n              else if (this.likeType === 'partner')\r\n                this.toast('파트너를 찜하였습니다.\\n' +\r\n                  this.menuTitle + '에서 \\n' +\r\n                  '확인하실 수 있습니다._icon_favorite');\r\n            }\r\n\r\n            // 클릭 공통 emit\r\n            this.$emit('click');\r\n\r\n            // 카운트 숫자 있을 경우\r\n            if (!this.isLike) this.computedCount -= 1;\r\n            else this.computedCount += 1;\r\n\r\n            if (this.computedCount<0) this.computedCount = 0;\r\n          });\r\n      }\r\n    }\r\n\r\n  }\r\n</script>\r\n"]}]}