{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Block/BlockSignupPc.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Block/BlockSignupPc.vue","mtime":1605260004000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FormMixin from \"@/components/Mixins/FormMixin\"\nimport AuthMixin from \"@/components/Mixins/AuthMixin\"\nimport FormCustomMixin from \"@/components/Components/Mixin/FormCustomMixin\"\nimport HeaderMixin from \"@/components/Mixins/HeaderMixin\"\n\nexport default {\n  name: 'BlockSignupPc',\n  components: {\n\n  },\n  mixins: [\n    FormMixin,\n    AuthMixin,\n    FormCustomMixin,\n    HeaderMixin\n  ],\n  props: {\n\n  },\n  data() {\n    return {\n      \"formData\": [\n        {\n          \"name\": \"아이디\",\n          \"field\": \"username\",\n          \"label\": \"\",\n          \"value\": \"\",\n          \"format\": \"CInput_email\",\n          \"validate\": {\n            \"num\": true,\n            \"alpha_g\": true,\n            \"alpha_s\": true,\n            \"special\": true,\n            \"required\": true,\n            \"max_length\": 30,\n            \"min_length\": 4,\n            \"valid_required\": true\n          },\n          \"placeholder\": \"아이디\"\n        },\n        {\n          \"name\": \"비밀번호\",\n          \"field\": \"password\",\n          \"label\": \"\",\n          \"value\": \"\",\n          \"format\": \"CInput_password\",\n          \"validate\": {\n            \"required\": true,\n            \"valid_required\": true\n          },\n          \"placeholder\": \"비밀번호\"\n        }\n      ],\n      \"isVerify\": true,\n      \"inputImgData\": undefined\n    }\n  },\n  created() {\n      this.getForm();\n    },\n  \n  methods: {\n    sign() {\n        let result = this.getParamData(this.computedFormData);\n        \n        if(result.enable) {\n          // if(this.$route.query.login_type) result.params['login_type'] = this.$route.query.login_type;\n          \n          //본인인증 처리시, birth, gender, phone 반영 (result.params에 빠진 경우 추가)\n          if(this.$route.query.type === 'personal_valid') {\n            if(!result.params.birth) {\n              let no = this.$route.query.social_no;\n              result.params.birth = `${no.substring(0,4)}-${no.substring(4,6)}-${no.substring(6,8)}`;\n            }\n            if(!result.params.gender) {\n              result.params.gender = this.$route.query.sex === 'M' ? 'male' : \"female\";\n            }\n            if(!result.params.phone) {\n              result.params.phone = this.$route.query.phone;\n            }\n            if(!result.params.name) {\n              result.params.name = this.$route.query.name;\n            }\n          }\n\n          this.$axios.post(`auth/user/signup`, result.params).then(res=>{\n            if(res.status===200) {\n              this.toast('회원가입 되었습니다.');\n              this.setUserData(res.data);\n              this.setAuthHeader();\n              this.$router.replace('home');\n            }\n          }).catch(err=> {\n          console.log(err)\n            if(!err.response.data.message)\n              this.toast(err.response.data.detail);\n            else\n              this.toast(err.response.data.message);\n          })\n        }\n      },\n    getForm() {\n        this.$axios.get('public/member/formdata/1').then(res=>{\n          let formData = res.data;\n          \n          let profileForm = find(formData, 'field', 'profile');\n          if (profileForm && profileForm.format==='CImgUploader') {\n            profileForm.elType = 'c-input-imgUploader-single'\n            profileForm.format = 'CImgUploaderSingle'\n          }\n          \n          formData.map(fd => {\n            fd.containerCustom = {marginTop: '16px'};\n          })\n          \n          formData.push(\n            {\n              name: '이용약관 및 개인정보처리방침 동의',\n              label: '',\n              format: 'CgCheckboxArray',\n              items: [\n                {\n                  text: '이용약관',\n                  link: 'TermsofserviceModal',\n                  linkType: 'modal',\n                  styles: {\n                    container: {\n                      color: this.brandColor.primary.color,\n                      fontWeight: 500,\n                      textDecoration: 'underline'\n                    }\n                  }\n                },\n                {\n                  text: ' 및 ',\n                  styles: {\n                    container: {\n                      padding: '0 4px'\n                    }\n                  }\n                },\n                {\n                  text: '개인정보처리방침',\n                  link: 'PrivacyModal',\n                  linkType: 'modal',\n                  styles: {\n                    container: {\n                      color: this.brandColor.primary.color,\n                      fontWeight: 500,\n                      textDecoration: 'underline'\n                    }\n                  }\n                },\n                {\n                  text: '에 동의하기'\n                }\n              ],\n              validate: {\n                valid_required: true,     // validation 필수 여부\n              },\n              value: false,\n              containerCustom: {marginTop: '24px'}\n            }\n          )\n          \n          this.inputImgData = formData[0];\n          this.inputImgData.elType = 'c-input-imgUploader-single'\n          \n          formData.splice(0,1,this.inputImgData);\n          \n          \n          formData = this.setForm(formData);\n\n          // 소셜로그인 진입 시\n          if (this.$route.query.user_id !== undefined) {\n            find(formData, 'field', 'username').value = this.$route.query.user_id;\n            find(formData, 'field', 'username').elType = '';\n            find(formData, 'field', 'password').elType = '';\n            find(formData, 'field', 'password_re').elType = '';\n            let name = find(formData, 'field', 'name');\n            if(name !== undefined) name.value = this.$route.query.name;\n            let profile = find(formData, 'field', 'profile')\n            if(profile !== undefined) profile.value = this.$route.query.profile;\n          }\n          \n          // https://modowa.kr/signup?type=personal_valid&name=%EC%9D%B4%EB%82%A8%ED%98%B8&phone=01094785634&Tradeid=03023f48-11bf-4200-8cad-b221a232336b&sex=M&social_no=19821222\n          if(this.$route.query.type === 'personal_valid') {\n            let gender = find(formData, 'field', 'gender');\n            if(gender) {\n              gender.value = this.$route.query.sex === 'M' ? 'male' : \"female\";\n              gender.options.forEach(item=> { if(item.value !== gender.value) item.disabled = true });\n            }\n            let birth = find(formData, 'field', 'birth');\n            if(birth) {\n              let no = this.$route.query.social_no;\n              birth.value = `${no.substring(0,4)}-${no.substring(4,6)}-${no.substring(6,8)}`;\n              birth.disabled = true;\n            }  \n            let name = find(formData, 'field', 'name');\n            if(name) {\n              name.value = this.$route.query.name;\n              name.disabled = true;\n            }\n            let phone = find(formData, 'field', 'phone');\n            if(phone) {\n              phone.value = this.$route.query.phone;\n              phone.disabled = true;\n            }\n          }\n\n          this.formData = formData;\n        })\n      }\n  },\n  computed: {\n    btnStyle() {\n        return {\n          fontSize: '14px',\n          fontWeight: '500',\n          backgroundColor: this.brandBgColor.primary.backgroundColor,\n          color: this.brandColor.white.color,\n          width: '30%',\n          height: '48px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          padding: '12px',\n          borderRadius: this.radius.borderRadius,\n          pointer: 'cursor'\n        }\n      },\n    inputCustom() {\n      return {\n        border: this.brandBorder.main.border,\n        borderRadius: '6px',\n        backgroundColor: 'white',\n        padding: '12px 16px',\n        color: this.brandColor.main,\n        fontSize: '14px',\n        height: '48px',\n      }\n    },\n    computedFormData() {\n        //본인인증 필드 보유 여부 확인\n        let verify = this.formData.filter(item => { return item.type === 'verify' });\n        if(verify.length === 1 && this.$route.query.type === undefined) {\n          this.isVerify = true;\n          this.formTypeCustomLabel.label = false;\n         return verify; \n        } else {\n          this.isVerify = false;\n          this.formTypeCustomLabel.label = true;\n          return this.formData.filter(item => {return item.type !== 'verify' });\n        }\n      },\n    addressButtonCustom() {\n      let styles = this.cloneItem(this.buttonCustom);\n      styles.backgroundColor = this.brandColor.sub.color;\n      styles.padding = '12px 20px';\n      return styles;\n    },\n    inputWrapStyle() {\n      return {\n        display: 'none'\n      }\n    },\n    contentStyle() {\n      return {\n        borderTop: `1px solid ${this.getColor('기본 테두리선 색상')}`,\n        borderBottom: `1px solid ${this.getColor('기본 테두리선 색상')}`,\n        padding: '20px 28px 32px'\n      }\n    }\n  },\n  watch: {\n    \n  }\n}\n",{"version":3,"sources":["BlockSignupPc.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"BlockSignupPc.vue","sourceRoot":"src/components/Components/Block","sourcesContent":["<template>\n<div>\n  <div :style=\"pagePadding\" style=\"padding:24px 0 16px\">\n    <div class=\"size-20 bold\" :style=\"[brandColor.main]\">회원가입</div>\n  </div>\n  <div :style=\"[contentStyle]\">\n    <!-- 본인 인증 메시지 -->\n    <div v-if=\"isVerify\" style=\"padding:20px 0\">{{ $store.getters.service.title }} 회원가입을 위해서는 본인인증이 필요합니다.</div>\n    <!--회원가입 폼 요소-->\n    <component \n              :is=\"form.elType\" v-for=\"(form,idx) in computedFormData\" :key=\"'form-'+idx\"\n               v-bind=\"form\" :value.sync=\"form.value\"\n               :formType=\"formTypeCustomLabel\"\n               :containerCustomStyle=\"form.containerCustom\"\n               :labelCustomStyle=\"labelCustom\"\n               :inputCustomStyle=\"inputCustom\"\n               :addressInputWrapStyle=\"{marginTop: '8px'}\"\n               :buttonCustomStyle=\"buttonCustom\"\n               :addressButtonCustomStyle=\"addressButtonCustom\"\n               :inputWrapStyle=\"inputWrapStyle\"></component>\n  </div>\n\n  <!--회원가입 버튼-->\n  \n  <div style=\"padding:32px 16px\" v-if=\"!isVerify\"\n    class=\"flex-align\">\n    <!--내정보수정 버튼-->\n    <div class=\"unselect\" :style=\"btnStyle\" style=\"margin-right:20px\" @click=\"sign\">가입하기</div>\n    <div @click=\"clickBack\" :style=\"[brandBgColor.white,radius]\" class=\"size-14 weight-500 unselect\"\n      style=\"width:30%;height:48px;line-height:48px;text-align:center\">취소</div>\n  </div>\n</div>\n</template>\n<script>\nimport FormMixin from \"@/components/Mixins/FormMixin\"\nimport AuthMixin from \"@/components/Mixins/AuthMixin\"\nimport FormCustomMixin from \"@/components/Components/Mixin/FormCustomMixin\"\nimport HeaderMixin from \"@/components/Mixins/HeaderMixin\"\n\nexport default {\n  name: 'BlockSignupPc',\n  components: {\n\n  },\n  mixins: [\n    FormMixin,\n    AuthMixin,\n    FormCustomMixin,\n    HeaderMixin\n  ],\n  props: {\n\n  },\n  data() {\n    return {\n      \"formData\": [\n        {\n          \"name\": \"아이디\",\n          \"field\": \"username\",\n          \"label\": \"\",\n          \"value\": \"\",\n          \"format\": \"CInput_email\",\n          \"validate\": {\n            \"num\": true,\n            \"alpha_g\": true,\n            \"alpha_s\": true,\n            \"special\": true,\n            \"required\": true,\n            \"max_length\": 30,\n            \"min_length\": 4,\n            \"valid_required\": true\n          },\n          \"placeholder\": \"아이디\"\n        },\n        {\n          \"name\": \"비밀번호\",\n          \"field\": \"password\",\n          \"label\": \"\",\n          \"value\": \"\",\n          \"format\": \"CInput_password\",\n          \"validate\": {\n            \"required\": true,\n            \"valid_required\": true\n          },\n          \"placeholder\": \"비밀번호\"\n        }\n      ],\n      \"isVerify\": true,\n      \"inputImgData\": undefined\n    }\n  },\n  created() {\n      this.getForm();\n    },\n  \n  methods: {\n    sign() {\n        let result = this.getParamData(this.computedFormData);\n        \n        if(result.enable) {\n          // if(this.$route.query.login_type) result.params['login_type'] = this.$route.query.login_type;\n          \n          //본인인증 처리시, birth, gender, phone 반영 (result.params에 빠진 경우 추가)\n          if(this.$route.query.type === 'personal_valid') {\n            if(!result.params.birth) {\n              let no = this.$route.query.social_no;\n              result.params.birth = `${no.substring(0,4)}-${no.substring(4,6)}-${no.substring(6,8)}`;\n            }\n            if(!result.params.gender) {\n              result.params.gender = this.$route.query.sex === 'M' ? 'male' : \"female\";\n            }\n            if(!result.params.phone) {\n              result.params.phone = this.$route.query.phone;\n            }\n            if(!result.params.name) {\n              result.params.name = this.$route.query.name;\n            }\n          }\n\n          this.$axios.post(`auth/user/signup`, result.params).then(res=>{\n            if(res.status===200) {\n              this.toast('회원가입 되었습니다.');\n              this.setUserData(res.data);\n              this.setAuthHeader();\n              this.$router.replace('home');\n            }\n          }).catch(err=> {\n          console.log(err)\n            if(!err.response.data.message)\n              this.toast(err.response.data.detail);\n            else\n              this.toast(err.response.data.message);\n          })\n        }\n      },\n    getForm() {\n        this.$axios.get('public/member/formdata/1').then(res=>{\n          let formData = res.data;\n          \n          let profileForm = find(formData, 'field', 'profile');\n          if (profileForm && profileForm.format==='CImgUploader') {\n            profileForm.elType = 'c-input-imgUploader-single'\n            profileForm.format = 'CImgUploaderSingle'\n          }\n          \n          formData.map(fd => {\n            fd.containerCustom = {marginTop: '16px'};\n          })\n          \n          formData.push(\n            {\n              name: '이용약관 및 개인정보처리방침 동의',\n              label: '',\n              format: 'CgCheckboxArray',\n              items: [\n                {\n                  text: '이용약관',\n                  link: 'TermsofserviceModal',\n                  linkType: 'modal',\n                  styles: {\n                    container: {\n                      color: this.brandColor.primary.color,\n                      fontWeight: 500,\n                      textDecoration: 'underline'\n                    }\n                  }\n                },\n                {\n                  text: ' 및 ',\n                  styles: {\n                    container: {\n                      padding: '0 4px'\n                    }\n                  }\n                },\n                {\n                  text: '개인정보처리방침',\n                  link: 'PrivacyModal',\n                  linkType: 'modal',\n                  styles: {\n                    container: {\n                      color: this.brandColor.primary.color,\n                      fontWeight: 500,\n                      textDecoration: 'underline'\n                    }\n                  }\n                },\n                {\n                  text: '에 동의하기'\n                }\n              ],\n              validate: {\n                valid_required: true,     // validation 필수 여부\n              },\n              value: false,\n              containerCustom: {marginTop: '24px'}\n            }\n          )\n          \n          this.inputImgData = formData[0];\n          this.inputImgData.elType = 'c-input-imgUploader-single'\n          \n          formData.splice(0,1,this.inputImgData);\n          \n          \n          formData = this.setForm(formData);\n\n          // 소셜로그인 진입 시\n          if (this.$route.query.user_id !== undefined) {\n            find(formData, 'field', 'username').value = this.$route.query.user_id;\n            find(formData, 'field', 'username').elType = '';\n            find(formData, 'field', 'password').elType = '';\n            find(formData, 'field', 'password_re').elType = '';\n            let name = find(formData, 'field', 'name');\n            if(name !== undefined) name.value = this.$route.query.name;\n            let profile = find(formData, 'field', 'profile')\n            if(profile !== undefined) profile.value = this.$route.query.profile;\n          }\n          \n          // https://modowa.kr/signup?type=personal_valid&name=%EC%9D%B4%EB%82%A8%ED%98%B8&phone=01094785634&Tradeid=03023f48-11bf-4200-8cad-b221a232336b&sex=M&social_no=19821222\n          if(this.$route.query.type === 'personal_valid') {\n            let gender = find(formData, 'field', 'gender');\n            if(gender) {\n              gender.value = this.$route.query.sex === 'M' ? 'male' : \"female\";\n              gender.options.forEach(item=> { if(item.value !== gender.value) item.disabled = true });\n            }\n            let birth = find(formData, 'field', 'birth');\n            if(birth) {\n              let no = this.$route.query.social_no;\n              birth.value = `${no.substring(0,4)}-${no.substring(4,6)}-${no.substring(6,8)}`;\n              birth.disabled = true;\n            }  \n            let name = find(formData, 'field', 'name');\n            if(name) {\n              name.value = this.$route.query.name;\n              name.disabled = true;\n            }\n            let phone = find(formData, 'field', 'phone');\n            if(phone) {\n              phone.value = this.$route.query.phone;\n              phone.disabled = true;\n            }\n          }\n\n          this.formData = formData;\n        })\n      }\n  },\n  computed: {\n    btnStyle() {\n        return {\n          fontSize: '14px',\n          fontWeight: '500',\n          backgroundColor: this.brandBgColor.primary.backgroundColor,\n          color: this.brandColor.white.color,\n          width: '30%',\n          height: '48px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          padding: '12px',\n          borderRadius: this.radius.borderRadius,\n          pointer: 'cursor'\n        }\n      },\n    inputCustom() {\n      return {\n        border: this.brandBorder.main.border,\n        borderRadius: '6px',\n        backgroundColor: 'white',\n        padding: '12px 16px',\n        color: this.brandColor.main,\n        fontSize: '14px',\n        height: '48px',\n      }\n    },\n    computedFormData() {\n        //본인인증 필드 보유 여부 확인\n        let verify = this.formData.filter(item => { return item.type === 'verify' });\n        if(verify.length === 1 && this.$route.query.type === undefined) {\n          this.isVerify = true;\n          this.formTypeCustomLabel.label = false;\n         return verify; \n        } else {\n          this.isVerify = false;\n          this.formTypeCustomLabel.label = true;\n          return this.formData.filter(item => {return item.type !== 'verify' });\n        }\n      },\n    addressButtonCustom() {\n      let styles = this.cloneItem(this.buttonCustom);\n      styles.backgroundColor = this.brandColor.sub.color;\n      styles.padding = '12px 20px';\n      return styles;\n    },\n    inputWrapStyle() {\n      return {\n        display: 'none'\n      }\n    },\n    contentStyle() {\n      return {\n        borderTop: `1px solid ${this.getColor('기본 테두리선 색상')}`,\n        borderBottom: `1px solid ${this.getColor('기본 테두리선 색상')}`,\n        padding: '20px 28px 32px'\n      }\n    }\n  },\n  watch: {\n    \n  }\n}\n</script>\n\n\n"]}]}