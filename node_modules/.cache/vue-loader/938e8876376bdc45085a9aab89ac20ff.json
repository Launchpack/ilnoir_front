{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Common/LocationComp.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Common/LocationComp.vue","mtime":1605260011000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n  name: 'LocationComp',\n  components: {\n\n  },\n  mixins: [\n\n  ],\n  props: {\n    type: {\n      type: String,\n      required: false,\n    },\n    currentStatus: {\n      type: Boolean,\n      required: false,\n    },\n    changePosition: {\n      type: Object,\n      required: false,\n    },\n\n  },\n  data() {\n    return {\n      \"address\": {}\n    }\n  },\n  created() {\n\n  },\n  mounted() {\n    let current = this.$store.getters.currentPosition;\n    if (current && current.lng && current.lat) this.getAddress(current);\n    else this.getAddress();\n  },\n  \n  methods: {\n    getAddress(params) {\n      /* 좌표 세팅 로직 시작 */\n      if (params === undefined) {\n        // navigator 로 현재 좌표 가져오기\n        if (navigator.geolocation) { // GPS를 지원하면 navigator.geolocation 으로 현재 좌표 얻어오기\n          navigator.geolocation.getCurrentPosition(position => {\n            this.address.latitude = position.coords.latitude;\n            this.address.longitude = position.coords.longitude;\n            \n            let location = {lat: this.address.latitude, lng: this.address.longitude};\n            this.$store.commit('setCurrentPosition', location);\n            this.$store.commit('setCurrentAddress', this.address);\n            this.$emit('currentAddress', this.address);\n            \n            // 다시 호출해서 좌표 업데이트하는 방식 - recursive\n            this.getAddress(location);\n          }, error => {}, {\n            enableHighAccuracy: false,\n            maximumAge:Infinity,\n            timeout: 10000\n          });\n        } \n        else {\n          console.log('GPS를 지원하지 않습니다');\n        }\n      } \n      else {\n        this.address.latitude = params.lat;\n        this.address.longitude = params.lng;\n        \n        let location = {lat: this.address.latitude, lng: this.address.longitude};\n        this.$store.commit('setCurrentPosition', location);\n        this.$store.commit('setCurrentAddress', this.address);\n        this.$emit('currentAddress', this.address);\n      }\n      /* 좌표 세팅 로직 끝 */\n\n      // 가져온 좌표로 주소 받아오기\n      setTimeout(() => {\n        this.$axios.get(`public/service/geocode?latitude=${this.address.latitude}&longitude=${this.address.longitude}`)\n          .then(res => {\n            if (res.status === 200) {\n              if (res.data.address) {\n                this.address = res.data.address;\n\n                let location = {lat: this.address.latitude, lng: this.address.longitude};\n                this.$store.commit('setCurrentPosition', location);                \n                this.$store.commit('setCurrentAddress', this.address);\n                this.$emit('currentAddress', this.address);\n              }\n\n              // API 키가 없을 경우 예외처리, (사용하지 않을 경우) 서비스명으로 처리하도록 인자값 false 전달\n              // if (res.data.address === false) this.setFullAddress(false);\n              // else this.setFullAddress(true);\n\n              // 위치 업데이트 emit\n              this.$emit('updatePosition');\n\n              // this.setFullAddress();\n            }\n          })\n          .catch(err => {\n            console.log(err);\n          })\n      }, 200)\n    },\n    clickMenu() {\n      this.$root.$emit('openDrawer')\n    }\n  },\n  computed: {\n    logo() {\n      if (this.$store.getters.brand) return this.$store.getters.brand.logo;\n    },\n    searchPage() {\n      if (this.$route.path.indexOf('search')>-1) return true;\n      else return false;\n    }\n  },\n  watch: {\n    currentStatus(n) {\n      if (n) {\n        // 현재 위치로 지정\n        this.getAddress();\n        this.$emit('currentStatus');\n      }\n    },\n    changePosition(n) {\n      if (n) {\n        // 설정된 위치로 지정\n        this.getAddress(n);\n        this.$emit('changePosition');\n      }\n    }\n  }\n}\n",{"version":3,"sources":["LocationComp.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LocationComp.vue","sourceRoot":"src/components/Components/Common","sourcesContent":["<template>\n<div class=\"flex-align unselect\" :style=\"[brandBgColor.white, radius]\"\n  style=\"width:256px; height:48px; padding: 0 16px;\" @click=\"$emit('clicked')\" >\n  <i class=\"material-icons size-18\" :style=\"brandColor.primary\" style=\"margin-right:4px;\">room</i>\n  <span class=\"ellipsis size-14 weight-500\" style=\"width:100%\"\n    :style=\"[brandColor.main]\">{{ address.full }}</span>\n</div>\n</template>\n<script>\n\nexport default {\n  name: 'LocationComp',\n  components: {\n\n  },\n  mixins: [\n\n  ],\n  props: {\n    type: {\n      type: String,\n      required: false,\n    },\n    currentStatus: {\n      type: Boolean,\n      required: false,\n    },\n    changePosition: {\n      type: Object,\n      required: false,\n    },\n\n  },\n  data() {\n    return {\n      \"address\": {}\n    }\n  },\n  created() {\n\n  },\n  mounted() {\n    let current = this.$store.getters.currentPosition;\n    if (current && current.lng && current.lat) this.getAddress(current);\n    else this.getAddress();\n  },\n  \n  methods: {\n    getAddress(params) {\n      /* 좌표 세팅 로직 시작 */\n      if (params === undefined) {\n        // navigator 로 현재 좌표 가져오기\n        if (navigator.geolocation) { // GPS를 지원하면 navigator.geolocation 으로 현재 좌표 얻어오기\n          navigator.geolocation.getCurrentPosition(position => {\n            this.address.latitude = position.coords.latitude;\n            this.address.longitude = position.coords.longitude;\n            \n            let location = {lat: this.address.latitude, lng: this.address.longitude};\n            this.$store.commit('setCurrentPosition', location);\n            this.$store.commit('setCurrentAddress', this.address);\n            this.$emit('currentAddress', this.address);\n            \n            // 다시 호출해서 좌표 업데이트하는 방식 - recursive\n            this.getAddress(location);\n          }, error => {}, {\n            enableHighAccuracy: false,\n            maximumAge:Infinity,\n            timeout: 10000\n          });\n        } \n        else {\n          console.log('GPS를 지원하지 않습니다');\n        }\n      } \n      else {\n        this.address.latitude = params.lat;\n        this.address.longitude = params.lng;\n        \n        let location = {lat: this.address.latitude, lng: this.address.longitude};\n        this.$store.commit('setCurrentPosition', location);\n        this.$store.commit('setCurrentAddress', this.address);\n        this.$emit('currentAddress', this.address);\n      }\n      /* 좌표 세팅 로직 끝 */\n\n      // 가져온 좌표로 주소 받아오기\n      setTimeout(() => {\n        this.$axios.get(`public/service/geocode?latitude=${this.address.latitude}&longitude=${this.address.longitude}`)\n          .then(res => {\n            if (res.status === 200) {\n              if (res.data.address) {\n                this.address = res.data.address;\n\n                let location = {lat: this.address.latitude, lng: this.address.longitude};\n                this.$store.commit('setCurrentPosition', location);                \n                this.$store.commit('setCurrentAddress', this.address);\n                this.$emit('currentAddress', this.address);\n              }\n\n              // API 키가 없을 경우 예외처리, (사용하지 않을 경우) 서비스명으로 처리하도록 인자값 false 전달\n              // if (res.data.address === false) this.setFullAddress(false);\n              // else this.setFullAddress(true);\n\n              // 위치 업데이트 emit\n              this.$emit('updatePosition');\n\n              // this.setFullAddress();\n            }\n          })\n          .catch(err => {\n            console.log(err);\n          })\n      }, 200)\n    },\n    clickMenu() {\n      this.$root.$emit('openDrawer')\n    }\n  },\n  computed: {\n    logo() {\n      if (this.$store.getters.brand) return this.$store.getters.brand.logo;\n    },\n    searchPage() {\n      if (this.$route.path.indexOf('search')>-1) return true;\n      else return false;\n    }\n  },\n  watch: {\n    currentStatus(n) {\n      if (n) {\n        // 현재 위치로 지정\n        this.getAddress();\n        this.$emit('currentStatus');\n      }\n    },\n    changePosition(n) {\n      if (n) {\n        // 설정된 위치로 지정\n        this.getAddress(n);\n        this.$emit('changePosition');\n      }\n    }\n  }\n}\n</script>\n<style scoped>\n.location {\n    height: 32px;\n    width: 180px;\n    padding: 6px;\n  }\n</style>\n\n"]}]}