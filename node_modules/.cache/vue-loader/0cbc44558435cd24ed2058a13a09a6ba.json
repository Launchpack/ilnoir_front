{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputDropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputDropdown.vue","mtime":1605259986000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { SweetModal } from 'sweet-modal-vue';\nimport FormMixin from '@/components/Mixins/FormMixin'\nimport ClickOutside from 'vue-click-outside'\nexport default {\n  name: 'c-input-dropdown',\n\n  directives: {\n    ClickOutside\n  },\n\n  components: {\n    SweetModal\n  },\n\n  mixins: [\n    FormMixin\n  ],\n\n  props: {\n    dropListCustomStyle: {\n      type: Object,\n      required: false\n    },\n    dropItemCustomStyle: {\n      type: Object,\n      required: false\n    },\n    iconCustomStyle: {\n      type: Object,\n      required: false\n    },\n    iconValue: {\n      type: String,\n      required: false\n    },\n    fullState: {\n      type: Boolean,\n      required: false\n    },\n    fullLength: {\n      type: Number,\n      required: false\n    },\n    addState: {\n      type: Boolean,\n      required: false\n    }\n  },\n\n  data() {\n    return {\n      isOpen: false,\n      mouseOverIndex: undefined,\n      selectedValue: '',\n      popupItem: '',\n      placeHolder: '선택'\n    };\n  },\n\n  mounted() {\n    this.popupItem = this.$el;\n  },\n\n  created() {\n    this.selectedValue = this.findLabel(this.value);\n  },\n\n  watch: {\n    value(n) {\n      this.selectedValue = this.findLabel(n);\n    },\n    selectedValue(n) {\n      let value = undefined;\n      if(typeof(n) === 'string') {\n        let opt = find(this.options, 'label', n);\n        if(opt) {\n          value = opt.value;\n        }\n      } else {\n        value = n.value;\n      }\n\n      this.$emit('update:value', value);\n    },\n    fullState(n) {\n      if(n) {\n        if(this.options&&this.options[0].type===0) {\n          this.selectedValue = '';\n          if(this.options[0].index===this.fullLength) {\n            this.$emit('empty', this.options[0].type);\n          }\n        }\n      }\n    },\n    addState(n) {\n      if(n) {\n        if(this.options&&this.options[0].type===1) {\n          this.options.forEach(item => {\n            if(item.label===this.selectedValue) {\n              this.selectedValue = '';\n              this.$emit('empty', item.type, item.index);\n            }\n          })\n        }\n        \n      }\n    }\n  },\n\n  computed: {\n    iconStyle() {\n      if (this.iconCustomStyle) return this.iconCustomStyle;\n      else return {\n        color: this.brandColor.sub.color\n      };\n    },\n    dropItemStyle() {\n      if (this.dropItemCustomStyle) return this.dropItemCustomStyle;\n      else return {\n        padding: '8px 16px',\n        borderBottom: `1px solid ${this.getColor('기본 테두리선 색상')}`,\n        fontSize: '14px'\n      }\n    },\n    checkStyle() {\n      return {\n        padding: '2px',\n        borderRadius: '50%',\n        width: '20px',\n        height: '20px',\n        textAlign: 'center',\n        color: 'white',\n        backgroundColor: this.brandBgColor.brand.backgroundColor,\n        fontSize: '15px'\n      }\n    }\n  },\n\n  methods: {\n    hide () {\n      this.isOpen = false\n    },\n\n    itemModalStyle(label) {\n      return label === this.selectedValue ? this.brandColor.brand : this.brandColor.main;\n    },\n\n    // 드롭다운 아이템 스타일 계산 (hover index 감지를 위해 메소드로 처리)\n\n    mouseOverStyle(idx) {\n      let deco = {};\n      if ( this.mouseOverIndex === idx ) {\n        deco.backgroundColor = '#eee';\n      }\n      return deco;\n    },\n\n    // 드롭다운 토글\n    toggleList() {\n      this.isOpen = !this.isOpen;\n      if(this.formType.dropdown === 'modal') {\n        this.$refs.listModal.open();\n      }\n    },\n\n    // 드롭다운 아이템 클릭\n    clickItem(item) {\n      this.selectedValue = item.label;\n      this.isOpen = false;\n      if(this.formType.dropdown === 'modal') {\n        setTimeout(()=>{\n          this.$refs.listModal.close();\n          this.$emit('update:value', item.value);\n          this.$emit('update:selectedValue', this.selectedValue);\n        },500);\n      } else {\n        this.$emit('update:value', item.value);\n        this.$emit('update:selectedValue', this.selectedValue);\n      }\n    },\n\n    findLabel(val) {\n      let result = '';\n      if (this.options!==undefined) {\n        this.options.forEach(opt => {\n          if (opt.value === val) {\n            result = opt.label;\n          }\n        });\n      }\n      return result;\n    }\n  }\n}\n",{"version":3,"sources":["CInputDropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"CInputDropdown.vue","sourceRoot":"src/components/Components/Form","sourcesContent":["<template>\r\n  <div :style=\"containerStyle\" class=\"full-width\">\r\n    <!-- outside click -->\r\n    <div v-click-outside=\"hide\"></div>\r\n\r\n    <!-- 레이블 -->\r\n    <div v-if=\"formType.label && label\" :style=\"labelStyle\">{{ label }}</div>\r\n\r\n    <!-- 드롭다운 -->\r\n    <!-- Selected -->\r\n    <div class=\"dropdown position-relative unselect\" ref=\"dropdown\"\r\n         :style=\"dropdownStyle\"\r\n         @click.stop.prevent=\"toggleList\">\r\n      <div class=\"flex-between full-width\">\r\n        <div class=\"flex-align\">\r\n          <i v-if=\"iconValue\" class=\"material-icons\" style=\"font-size: 20px; margin-right: 8px;\">{{ iconValue }}</i>\r\n          <span v-if=\"selectedValue\" style=\"margin-right: 5px;\">{{ selectedValue }}</span>\r\n          <span v-else-if=\"placeholder\" style=\"color: #777; margin-right: 5px;\">{{ placeholder }}</span>\r\n          <span v-else style=\"color: #777; margin-right: 5px;\">{{ placeHolder }}</span>\r\n        </div>\r\n\r\n        <i :style=\"iconStyle\" class=\"material-icons drop-icon\">\r\n          {{ isOpen ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}</i>\r\n      </div>\r\n      \r\n      <!-- List -->\r\n      <ul v-if=\"isOpen && formType.dropdown !== 'modal'\" class=\"list\" :style=\"dropListCustomStyle\">\r\n        <li class=\"item unselect\"\r\n            v-for=\"(item, idx) in options\"\r\n            :key=\"idx\"\r\n            :style=\"[brandColor.main, brandBgColor.main, mouseOverStyle(idx), dropItemStyle]\"\r\n            @click.stop.prevent=\"clickItem(item)\"\r\n            @mouseover=\"mouseOverIndex=idx\"\r\n            @mouseleave=\"mouseOverIndex=undefined;\">\r\n          {{ item.label }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <!-- 모달 스타일 List -->\r\n    <sweet-modal ref=\"listModal\" overlay-theme=\"dark\">\r\n      <div class=\"text-center\">\r\n        <div class=\"label-modal\"> {{ label }} </div>\r\n        <div class=\"item-modal unselect\" @click.stop.prevent=\"clickItem(item)\"\r\n             v-for=\"(item, idx) in options\"\r\n             :key=\"idx\"\r\n             :style=\"itemModalStyle(item.label)\">\r\n          <div>{{ item.label }}</div>\r\n          <i v-if=\"item.label === selectedValue\" class=\"material-icons\" :style=\"checkStyle\">check</i>\r\n        </div>\r\n      </div>\r\n    </sweet-modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import { SweetModal } from 'sweet-modal-vue';\r\n  import FormMixin from '@/components/Mixins/FormMixin'\r\n  import ClickOutside from 'vue-click-outside'\r\n  export default {\r\n    name: 'c-input-dropdown',\r\n\r\n    directives: {\r\n      ClickOutside\r\n    },\r\n\r\n    components: {\r\n      SweetModal\r\n    },\r\n\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n\r\n    props: {\r\n      dropListCustomStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      dropItemCustomStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      iconCustomStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      iconValue: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      fullState: {\r\n        type: Boolean,\r\n        required: false\r\n      },\r\n      fullLength: {\r\n        type: Number,\r\n        required: false\r\n      },\r\n      addState: {\r\n        type: Boolean,\r\n        required: false\r\n      }\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        isOpen: false,\r\n        mouseOverIndex: undefined,\r\n        selectedValue: '',\r\n        popupItem: '',\r\n        placeHolder: '선택'\r\n      };\r\n    },\r\n\r\n    mounted() {\r\n      this.popupItem = this.$el;\r\n    },\r\n\r\n    created() {\r\n      this.selectedValue = this.findLabel(this.value);\r\n    },\r\n\r\n    watch: {\r\n      value(n) {\r\n        this.selectedValue = this.findLabel(n);\r\n      },\r\n      selectedValue(n) {\r\n        let value = undefined;\r\n        if(typeof(n) === 'string') {\r\n          let opt = find(this.options, 'label', n);\r\n          if(opt) {\r\n            value = opt.value;\r\n          }\r\n        } else {\r\n          value = n.value;\r\n        }\r\n\r\n        this.$emit('update:value', value);\r\n      },\r\n      fullState(n) {\r\n        if(n) {\r\n          if(this.options&&this.options[0].type===0) {\r\n            this.selectedValue = '';\r\n            if(this.options[0].index===this.fullLength) {\r\n              this.$emit('empty', this.options[0].type);\r\n            }\r\n          }\r\n        }\r\n      },\r\n      addState(n) {\r\n        if(n) {\r\n          if(this.options&&this.options[0].type===1) {\r\n            this.options.forEach(item => {\r\n              if(item.label===this.selectedValue) {\r\n                this.selectedValue = '';\r\n                this.$emit('empty', item.type, item.index);\r\n              }\r\n            })\r\n          }\r\n          \r\n        }\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      iconStyle() {\r\n        if (this.iconCustomStyle) return this.iconCustomStyle;\r\n        else return {\r\n          color: this.brandColor.sub.color\r\n        };\r\n      },\r\n      dropItemStyle() {\r\n        if (this.dropItemCustomStyle) return this.dropItemCustomStyle;\r\n        else return {\r\n          padding: '8px 16px',\r\n          borderBottom: `1px solid ${this.getColor('기본 테두리선 색상')}`,\r\n          fontSize: '14px'\r\n        }\r\n      },\r\n      checkStyle() {\r\n        return {\r\n          padding: '2px',\r\n          borderRadius: '50%',\r\n          width: '20px',\r\n          height: '20px',\r\n          textAlign: 'center',\r\n          color: 'white',\r\n          backgroundColor: this.brandBgColor.brand.backgroundColor,\r\n          fontSize: '15px'\r\n        }\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      hide () {\r\n        this.isOpen = false\r\n      },\r\n\r\n      itemModalStyle(label) {\r\n        return label === this.selectedValue ? this.brandColor.brand : this.brandColor.main;\r\n      },\r\n\r\n      // 드롭다운 아이템 스타일 계산 (hover index 감지를 위해 메소드로 처리)\r\n\r\n      mouseOverStyle(idx) {\r\n        let deco = {};\r\n        if ( this.mouseOverIndex === idx ) {\r\n          deco.backgroundColor = '#eee';\r\n        }\r\n        return deco;\r\n      },\r\n\r\n      // 드롭다운 토글\r\n      toggleList() {\r\n        this.isOpen = !this.isOpen;\r\n        if(this.formType.dropdown === 'modal') {\r\n          this.$refs.listModal.open();\r\n        }\r\n      },\r\n\r\n      // 드롭다운 아이템 클릭\r\n      clickItem(item) {\r\n        this.selectedValue = item.label;\r\n        this.isOpen = false;\r\n        if(this.formType.dropdown === 'modal') {\r\n          setTimeout(()=>{\r\n            this.$refs.listModal.close();\r\n            this.$emit('update:value', item.value);\r\n            this.$emit('update:selectedValue', this.selectedValue);\r\n          },500);\r\n        } else {\r\n          this.$emit('update:value', item.value);\r\n          this.$emit('update:selectedValue', this.selectedValue);\r\n        }\r\n      },\r\n\r\n      findLabel(val) {\r\n        let result = '';\r\n        if (this.options!==undefined) {\r\n          this.options.forEach(opt => {\r\n            if (opt.value === val) {\r\n              result = opt.label;\r\n            }\r\n          });\r\n        }\r\n        return result;\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n\r\n  .dropdown\r\n    display flex\r\n    align-items center\r\n    justify-content space-between\r\n    cursor pointer\r\n\r\n  .list\r\n    width 100%\r\n    list-style none\r\n    margin 0\r\n    padding 0\r\n    position absolute\r\n    left 0\r\n    z-index 100\r\n    top 32px\r\n    background white\r\n    max-height 320px\r\n    overflow-y auto\r\n    box-shadow 0 2px 4px 0 rgba(0,0,0,0.1)\r\n\r\n  .drop-icon\r\n    font-size 17px\r\n\r\n  .outer\r\n    position fixed\r\n    top 0\r\n    left 0\r\n    right 0\r\n    bottom 0\r\n    z-index 99\r\n\r\n  .label-modal\r\n    border-bottom 1px solid #dddddd\r\n\r\n  .item-modal\r\n    display flex\r\n    justify-content space-between\r\n\r\n  .label-modal\r\n  .item-modal\r\n    padding 10px 24px\r\n    font-size 14px\r\n\r\n</style>\r\n"]}]}