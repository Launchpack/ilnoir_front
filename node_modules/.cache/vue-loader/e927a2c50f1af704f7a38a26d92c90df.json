{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/components/Components/Slot/GnbComp.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Components/Slot/GnbComp.vue","mtime":1605260060000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import {dragscroll} from 'vue-dragscroll'\n  import MenuMixin from '@/components/Mixins/MenuMixin'\n  import TownpickImgTxtTGnbs from '@/components/LaunchPack_Common/Header/townpickImgTxt/Gnbs'\nimport TownpickImgTGnbs from '@/components/LaunchPack_Common/Header/townpickImg/Gnbs'\nimport ModowaImgTxtTGnbs from '@/components/LaunchPack_Common/Header/modowaImgTxt/Gnbs'\nimport TownpickImgTxtPcTGnbs from '@/components/LaunchPack_Common/Header/townpickImgTxtPc/Gnbs'\nimport Gnbs from '@/components/LaunchPack_Common/Header/Gnbs'\nimport TownpickImgPcTGnbs from '@/components/LaunchPack_Common/Header/townpickImgPc/Gnbs'\nimport BetweenTxtTGnbs from '@/components/LaunchPack_Common/Header/betweenTxt/Gnbs'\n  export default {\n    name: \"GnbComp\",\n    components: {\n      TownpickImgTxtTGnbs,\nTownpickImgTGnbs,\nModowaImgTxtTGnbs,\nTownpickImgTxtPcTGnbs,\nGnbs,\nTownpickImgPcTGnbs,\nBetweenTxtTGnbs\n    },\n    directives: {\n      dragscroll\n    },\n    mixins: [\n      MenuMixin\n    ],\n    props: {\n      defaultGnb: {\n        type: Object,\n        required: false,\n        default: function() {\n          return {\n            visible: true,\n            depth1: 'Gnbs'\n          }\n        }\n      },\n      pagesGnb: {\n        type: Array,\n        required: false\n      },\n      // /product로 푸쉬하지 않을 path 지정\n      exceptPath: {\n        type: Array,\n        required: false\n      },\n      // default path는 아니지만 gnb 2뎁스 이상을 보이게 하고 싶은 path\n      displayPath: {\n        type: Array,\n        required: false\n      },\n      // 이동할 default path\n      defaultPath: {\n        type: String,\n        required: false,\n        default: '/product'\n      },\n      // 뎁스 클릭시 다음 뎁스 첫번째 항목 클릭 여부 default\n      clickFirst: {\n        type: Boolean,\n        required: false,\n        default: false\n      },\n      containStyle: {\n        type: Object,\n        required: false,\n        default: function() {\n          return {\n            marginTop: '50px'\n          }\n        }\n      },\n      // 선택된 탭 id\n      // qeury와 같이 number로 판단하고 싶을때 number로 치환시켜 보내주어야 한다\n      initialTab: {\n        type: [String, Number],\n        required: false\n      },\n      selectedItemStyle: {\n        type: Object,\n        required: false\n      },\n      customItemStyle: {\n        type: Object,\n        required: false\n      },\n      indicatorStyle: {\n        type: Object,\n        required: false\n      },\n      scrollable: {\n        type: Boolean,\n        required: false,\n        default: true\n      }\n    },\n    created() {\n      if (this.initialTab!==undefined) {\n        if (typeof(this.initialTab)==='number') {\n          this.selectedTab = parseInt(this.initialTab);\n        }\n        else if (typeof(this.initialTab)==='string') {\n          this.selectedTab = this.initialTab;\n        }\n      }\n      this.menu = this.$store.getters.brand.menu_set.filter(item => { return item.style==='gnb' })[0].menu;\n\n      if(this.$route.path===this.defaultPath || (this.exceptPath && this.exceptPath.filter(item => { return item===this.$route.path}).length>0)) {\n        this.visiblePath = true;\n      }\n      else {\n        this.visiblePath = false;\n      }\n      \n      this.init();\n      // this.getMenu();\n    },\n    mounted() {\n    },\n    data() {\n      return {\n        selectedTab: 0,\n        selectedChildTab: undefined,\n        selectedChildTabTwo: undefined,\n\n        selectedBoard: undefined,\n        depthOne: '',\n        depthTwo: '',\n        depthThree: '',\n        visibleDepth: [1,2,3],\n        visibleGnb: this.defaultGnb.visible,\n        dragging: false,\n        scrollArray: [],\n        scrollArrayTwo: [],\n        scrollArrayThree: [],\n        selectedIndex1: undefined,\n        selectedIndex2: undefined,\n        selectedIndex3: undefined,\n        visiblePath: false,\n\n        childListOne: [],\n        childListTwo: [],\n\n        menu: undefined\n      }\n    },\n\n    computed: {\n      childStateOne() {\n        let menu = this.computedMenu[0];\n        if(menu && menu.child && menu.child.length>0) {\n          return true;\n        }\n        else {\n          return false;\n        }\n      },\n      childStateTwo() {\n        let menu = this.computedChildMenu ? this.computedChildMenu[0] : [];\n        if(menu && menu.child && menu.child.length>0) {\n          return true;\n        }\n        else {\n          return false;\n        }\n      },\n      grabStyle() {\n        return {\n          borderBottom: this.brandBorder.main.border,\n        }\n      },\n      computedChildMenu() {\n        let result = [];\n        if(this.childStateOne && this.childListOne.length>0) {\n          this.childListOne.forEach(item => {\n            if(item.id === this.selectedChildTab) {\n              result.push(item);\n            }\n          })\n          return result;\n        }\n      },\n      computedMenu() {\n        let result = [];\n        this.menu.forEach(item => {\n          if(item.id === this.selectedTab)\n            result.push(item);\n        });\n        return result;\n      },\n      divider1Style() {\n        let deco = {\n          backgroundColor: this.getColor('기본 테두리선 색상'),\n          width: '100%',\n          height: '1px'\n        };\n        if (this.dividerStyle!==undefined) deco = this.dividerStyle;\n        return deco;\n      },\n      tabListStyle() {\n        let deco = {};\n        if(this.scrollable) {\n          deco = {\n            overflowX: 'scroll',\n            flexWrap: 'nowrap',\n            display: '-webkit-box'\n          }\n        }\n        return deco;\n      },\n      isIE() {\n        if (navigator.userAgent.indexOf('Trident') > -1) return true;\n        else return false;\n      }\n    },\n\n    watch: {\n      '$route'(n,o) {\n        if(n.path!==o.path) {\n          if(n.path===this.defaultPath || (this.exceptPath && this.exceptPath.filter(item => { return item===n.path}).length>0) || (this.displayPath && this.displayPath.filter(item => { return item===n.path}).length>0) || (this.displayPath && this.displayPath.filter(item => { return item===n.path}).length>0)) {\n            this.visiblePath = true;\n          }\n          else {\n            this.visiblePath = false;\n\n            // getVisibleDepth clickFirst 조건 초기화\n            this.selectedChildTab = undefined;\n            this.selectedChildTabTwo = undefined;\n            \n            if(this.$refs.oneDepth && this.$refs.oneDepth.$refs.dragscroll) {\n              this.$refs.oneDepth.$refs.dragscroll.scrollTo({\n                behavior: 'smooth',\n                left: 0\n              });\n            }\n          }\n        }\n\n        // if(this.$store.getters.device==='pc') {\n          let n2 = n.query.category2;\n          let n1 = n.query.category1;\n          let menu = [];\n          let child = [];\n          if(n1) {\n            menu = this.menu.filter(item1 => { return item1.id===Number(n1)});\n            if(menu.length>0) {\n              let index = this.menu.indexOf(menu[0]);\n              if(this.$refs.oneDepth.$refs.dragscroll.scrollLeft===0) this.setScroll(index, 'one');\n              if(menu[0].child) {\n                this.childListOne = menu[0].child;\n                if(menu[0].child.length>0 && n2) {\n                  child = menu[0].child.filter(item2 => { return item2.id===Number(n2)});\n                  if(child.length>0 && child[0].child) this.childListTwo = child[0].child;\n                }\n                this.getVisibleDepth();\n              }\n            }\n          }\n        // }\n        \n      }\n    },\n\n    methods: {\n      // 클릭시 뎁스에 따라 알맞게 쿼리 변경\n      clickDepth1(item, idx) {\n        if(item.link) {\n          this.routerPush(item.link);\n        } else {\n          let query = cloneItem(this.$route.query);\n          if(this.selectedTab===0) query.gnb = '';\n          else query.gnb = this.selectedTab;\n          query.category1 = this.selectedTab;\n          if(query.category2) delete query.category2;\n          if(query.category3) delete query.category3;\n          this.$route.meta.clickPush = true;\n          if(this.exceptPath && this.exceptPath.length>0 && this.exceptPath.indexOf(this.$route.path)>-1) {\n            this.$router.replace({\n              path: this.$route.path,\n              query: query\n            }, ()=>{\n              this.getVisibleDepth();\n              this.scrollDepth1(item, idx);\n            });\n          }\n          else {\n            this.$router.replace({\n              path: this.defaultPath,\n              query: query\n            }, ()=>{\n              this.getVisibleDepth();\n              this.scrollDepth1(item, idx);\n            });\n          }\n        }\n      },\n      clickDepth2(item, idx) {\n        let query = cloneItem(this.$route.query);\n        query.gnb = this.selectedChildTab;\n        query.category1 = this.selectedTab;\n        query.category2 = this.selectedChildTab;\n        if(query.category3) delete query.category3;\n        this.$route.meta.clickPush = true;\n        this.$router.replace({\n          path: this.$route.path,\n          query: query\n        }, ()=>{\n              this.getVisibleDepth();\n              this.scrollDepth2(item, idx);\n        });\n      },\n      clickDepth3(item, idx) {\n        let query = cloneItem(this.$route.query);\n        query.gnb = this.selectedChildTabTwo;\n        query.category1 = this.selectedTab;\n        query.category2 = this.selectedChildTab;\n        query.category3 = this.selectedChildTabTwo;\n        this.$route.meta.clickPush = true;\n        this.$router.replace({\n          path: this.$route.path,\n          query: query\n        }, ()=>{\n            this.getVisibleDepth();\n            this.scrollDepth3(item, idx);\n        });\n      },\n      scrollDepth1(item, idx) {\n\n\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            this.scrollArrayTwo = [];\n            if(this.$refs.oneDepth&&this.$refs.oneDepth.$refs.dragscroll) {\n              this.dragging = false;\n              if(this.childListOne.length>0) {\n                let totalWidth = 0;\n                // 스크롤아이템 width 저장\n                for (let i=0; i<this.childListOne.length; i++) {\n                  if (this.$refs.twoDepth&&this.$refs.twoDepth.$refs.dragscroll&&this.$refs.twoDepth.$refs[`tabItem${i}`]&&this.$refs.twoDepth.$refs[`tabItem${i}`][0]) {\n                    // console.log('refs', this.$refs.twoDepth.$refs[`tabItem${i}`])\n                    let width = this.$refs.twoDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                    this.scrollArrayTwo.push({\n                      id : this.childListOne[i].id,\n                      name : this.childListOne[i].name,\n                      width: width,                        // 본인 너비\n                      accumulatedWidth: totalWidth+width   // 본인 누적너비\n                    });\n                    totalWidth += width;                   // 총 너비\n                  }\n                }\n              }\n\n              // 스크롤 중앙 정렬\n              if(this.selectedTab === Number(this.$route.query.category1)) this.setScroll(idx, 'one');\n            }\n          })\n        },300)\n\n      },\n      scrollDepth2(item, idx) {\n\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            this.scrollArrayThree = [];\n            if(this.$refs.twoDepth&&this.$refs.twoDepth.$refs.dragscroll) {\n              this.dragging = false;\n              if(this.childListTwo.length>0) {\n                let totalWidth = 0;\n                // 스크롤아이템 width 저장\n                for (let i=0; i<this.childListTwo.length; i++) {\n                  if (this.$refs.threeDepth&&this.$refs.threeDepth.$refs.dragscroll&&this.$refs.threeDepth.$refs[`tabItem${i}`]&&this.$refs.threeDepth.$refs[`tabItem${i}`][0]) {\n                    // console.log('refs', this.$refs.threeDepth.$refs[`tabItem${i}`])\n                    let width = this.$refs.threeDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                    this.scrollArrayThree.push({\n                      id : this.childListTwo[i].id,\n                      name : this.childListTwo[i].name,\n                      width: width,                        // 본인 너비\n                      accumulatedWidth: totalWidth+width   // 본인 누적너비\n                    });\n                    totalWidth += width;                   // 총 너비\n                  }\n                }\n              }\n\n              // 스크롤 중앙 정렬\n              if(this.selectedChildTab === Number(this.$route.query.category2)) this.setScroll(idx, 'two');\n            }\n          })\n        },300)\n\n      },\n      scrollDepth3(item ,idx) {\n        if(this.$refs.twoDepth&&this.$refs.twoDepth.$refs.dragscroll) {\n          this.dragging = false;\n\n          // 스크롤 중앙 정렬\n          if(this.selectedChildTabTwo === Number(this.$route.query.category3)) this.setScroll(idx, 'three');\n        }\n      },\n      scrollInit1() {\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            let totalWidth = 0;\n            // 스크롤아이템 width 저장\n            let index;\n            for (let i=0; i<this.menu.length; i++) {\n              if (this.$refs.oneDepth&&this.$refs.oneDepth.$refs.dragscroll&&this.$refs.oneDepth.$refs[`tabItem${i}`]&&this.$refs.oneDepth.$refs[`tabItem${i}`][0]) {\n                // console.log('refs', this.$refs.oneDepth.$refs[`tabItem${i}`])\n                let width = this.$refs.oneDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                this.scrollArray.push({\n                  id : this.menu[i].id,\n                  name : this.menu[i].name,\n                  width: width,                        // 본인 너비\n                  accumulatedWidth: totalWidth+width   // 본인 누적너비\n                });\n                totalWidth += width;                   // 총 너비\n              }\n              // 현재 선택된 탭 index 저장\n              if (this.menu[i].id === this.selectedTab) {\n                index = i;\n              }\n            }\n            // 스크롤 중앙 정렬\n            // if(this.selectedTab === Number(this.$route.query.category1)) this.setScroll(index, 'one');\n          })\n        },200)\n      },\n      scrollInit2() {\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            let totalWidth = 0;\n            // 스크롤아이템 width 저장\n            let index;\n            for (let i=0; i<this.childListOne.length; i++) {\n              if (this.$refs.twoDepth&&this.$refs.twoDepth.$refs.dragscroll&&this.$refs.twoDepth.$refs[`tabItem${i}`]&&this.$refs.twoDepth.$refs[`tabItem${i}`][0]) {\n                // console.log('refs', this.$refs.twoDepth.$refs[`tabItem${i}`])\n                let width = this.$refs.twoDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                this.scrollArrayTwo.push({\n                  id : this.childListOne[i].id,\n                  name : this.childListOne[i].name,\n                  width: width,                        // 본인 너비\n                  accumulatedWidth: totalWidth+width   // 본인 누적너비\n                });\n                totalWidth += width;                   // 총 너비\n              }\n              // 현재 선택된 탭 index 저장\n              if (this.childListOne[i].id === this.selectedChildTab) {\n                index = i;\n              }\n            }\n            // 스크롤 중앙 정렬\n            // if(this.selectedChildTab === Number(this.$route.query.category2)) this.setScroll(index, 'two');\n          })\n        },200)\n      },\n      scrollInit3() {\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            let totalWidth = 0;\n            // 스크롤아이템 width 저장\n            let index;\n            for (let i=0; i<this.childListTwo.length; i++) {\n              if (this.$refs.threeDepth&&this.$refs.threeDepth.$refs.dragscroll&&this.$refs.threeDepth.$refs[`tabItem${i}`]&&this.$refs.threeDepth.$refs[`tabItem${i}`][0]) {\n                // console.log('refs', this.$refs.threeDepth.$refs[`tabItem${i}`])\n                let width = this.$refs.threeDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                this.scrollArrayThree.push({\n                  id : this.childListTwo[i].id,\n                  name : this.childListTwo[i].name,\n                  width: width,                        // 본인 너비\n                  accumulatedWidth: totalWidth+width   // 본인 누적너비\n                });\n                totalWidth += width;                   // 총 너비\n              }\n              // 현재 선택된 탭 index 저장\n              if (this.childListTwo[i].id === this.selectedChildTabTwo) {\n                index = i;\n              }\n            }\n            // 스크롤 중앙 정렬\n            // if(this.selectedChildTabTwo === Number(this.$route.query.category3)) this.setScroll(index, 'three');\n          })\n        },200)\n      },\n      async getMenu() {\n        let menu = await this.setMenus('gnb', 'mobile');\n        // 임시\n        // menu.unshift({\n        //   name: \"메인\",\n        //   link: \"home\"\n        // });\n        // let disableMenu = menu.filter(item=>{ return item.name === '매장거래' })[0];\n        // disableMenu.disabled = true;\n        //////\n\n        this.menu = menu;\n\n        this.init();\n      },\n      addAll(bor) {\n        // 특정 뎁스 카테고리에 전체를 추가하는 로직\n\n        // 2뎁스 이상 이동에서만 menu 전체 삭제 예외 처리\n        if(this.$route.query&&!this.$route.query.category2) {\n          if(bor.all && bor.all.indexOf(1)===-1) {\n            if(this.menu.length>0&&this.menu[0].index===-1) {\n              this.menu.splice(0,1);\n            }\n          }\n        }\n\n        if(bor.all && bor.all.length>0) {\n          bor.all.forEach(item => {\n            if(item===1) {\n              if(this.menu.length>0&&this.menu[0].index!==-1) {\n                this.menu.unshift({\n                  id: 0,\n                  value: 0,\n                  label: '전체',\n                  name: '전체',\n                  index: -1,\n                });\n              }\n            }\n\n            if(item===2) {\n              if(this.childListOne.length>0 && this.childListOne[0].index!==-1) {\n                this.childListOne.unshift({\n                  id: this.menu[this.selectedIndex1].id,\n                  value: this.menu[this.selectedIndex1].id,\n                  label: '전체',\n                  name: '전체',\n                  index: -1,\n                  parent_id: this.menu[this.selectedIndex1].id\n                });\n              }\n            }\n\n            if(item===3) {\n              if(this.childListTwo.length>0 && this.childListTwo[0].index!==-1) {\n                this.childListTwo.unshift({\n                  id: this.menu[this.selectedIndex1].child[this.selectedIndex2].id,\n                  value: this.menu[this.selectedIndex1].child[this.selectedIndex2].id,\n                  label: '전체',\n                  name: '전체',\n                  index: -1,\n                  parent_id: this.menu[this.selectedIndex1].child[this.selectedIndex2].id\n                });\n              }\n            }\n          })\n        }\n      },\n      getVisibleDepth() {\n        console.log('getVisibleDepth')\n        // 각 페이지보드마다 따로 정의한 visible gnb, depth 있는지 찾는 로직\n        if (this.pagesGnb && this.pagesGnb.length>0) {\n          console.log('pagesGnb')\n          for (let i=0;i<this.pagesGnb.length;i++) {\n            if('/'+this.pagesGnb[i].name === this.$route.path) {\n              console.log('path', this.$route.path);\n              if(this.pagesGnb[i].gnb.visible) {\n                if(this.pagesGnb[i].gnb.board && this.pagesGnb[i].gnb.board.length>0) {\n\n                  if(this.$route.query.category3) {\n                    let bor = this.pagesGnb[i].gnb.board.filter(item => {\n                      return item.category===Number(this.$route.query.category3)\n                    })\n                    if(bor.length>0) {\n                      this.addAll(bor[0]);\n                      this.visibleGnb = bor[0].visible;\n                      this.visibleDepth = bor[0].depth;\n                      if (bor[0].depth1) {\n                        bor[0].depth1 = this.camelToDash(bor[0].depth1.replace('/','T'));\n                        this.depthOne = bor[0].depth1;\n                      }\n                      if (bor[0].depth2) {\n                        bor[0].depth2 = this.camelToDash(bor[0].depth2.replace('/','T'));\n                        this.depthTwo = bor[0].depth2;\n                      }\n                      if (bor[0].depth3) {\n                        bor[0].depth3 = this.camelToDash(bor[0].depth3.replace('/','T'));\n                        this.depthThree = bor[0].depth3;\n                      }\n                      break;\n                    }\n                  }\n\n                  if(this.$route.query.category2) {\n                    let bor = this.pagesGnb[i].gnb.board.filter(item => {\n                      return item.category===Number(this.$route.query.category2)\n                    })\n                    if(bor.length>0) {\n                      this.addAll(bor[0]);\n                      this.visibleGnb = bor[0].visible;\n                      this.visibleDepth = bor[0].depth;\n                      if (bor[0].depth1) {\n                        bor[0].depth1 = this.camelToDash(bor[0].depth1.replace('/','T'));\n                        this.depthOne = bor[0].depth1;\n                      }\n                      if (bor[0].depth2) {\n                        bor[0].depth2 = this.camelToDash(bor[0].depth2.replace('/','T'));\n                        this.depthTwo = bor[0].depth2;\n                      }\n                      if (bor[0].depth3) {\n                        bor[0].depth3 = this.camelToDash(bor[0].depth3.replace('/','T'));\n                        this.depthThree = bor[0].depth3;\n                      }\n                      // 첫뎁스 클릭\n                      if (bor[0].clickFirst ? bor[0].clickFirst : this.clickFirst) {\n                        if(this.childListTwo && this.childListTwo.length>0 && !this.selectedChildTabTwo) {\n                          let query = cloneItem(this.$route.query);\n                          this.selectedChildTabTwo = this.childListTwo[0].id;\n                          query.gnb = this.selectedChildTabTwo;\n                          query.category3 = this.selectedChildTabTwo;\n                          this.$route.meta.clickPush = true;\n                          this.$router.replace({\n                            path: this.$route.path,\n                            query: query\n                          });\n                        }\n                      }\n                      break;\n                    }\n                  }\n\n                  if(this.$route.query.category1) {\n                    let bor = this.pagesGnb[i].gnb.board.filter(item => {\n                      return item.category===Number(this.$route.query.category1)\n                    })\n                    if(bor.length>0) {\n                      this.addAll(bor[0]);\n                      this.visibleGnb = bor[0].visible;\n                      this.visibleDepth = bor[0].depth;\n                      if (bor[0].depth1) {\n                        bor[0].depth1 = this.camelToDash(bor[0].depth1.replace('/','T'));\n                        this.depthOne = bor[0].depth1;\n                      }\n                      if (bor[0].depth2) {\n                        bor[0].depth2 = this.camelToDash(bor[0].depth2.replace('/','T'));\n                        this.depthTwo = bor[0].depth2;\n                      }\n                      if (bor[0].depth3) {\n                        bor[0].depth3 = this.camelToDash(bor[0].depth3.replace('/','T'));\n                        this.depthThree = bor[0].depth3;\n                      }\n                      // 첫뎁스 클릭\n                      if (bor[0].clickFirst ? bor[0].clickFirst : this.clickFirst) {\n                        if(this.childListOne && this.childListOne.length>0 && !this.selectedChildTab) {\n                          let query = cloneItem(this.$route.query);\n                          this.selectedChildTab = this.childListOne[0].id;\n                          query.gnb = this.selectedChildTab;\n                          query.category2 = this.selectedChildTab;\n                          if(query.category3) delete query.category3;\n                          this.$route.meta.clickPush = true;\n                          this.$router.replace({\n                            path: this.$route.path,\n                            query: query\n                          });\n                        }\n                      }\n                      break;\n                    }\n                  }\n\n                  this.visibleDepth = this.pagesGnb[i].gnb.depth ? this.pagesGnb[i].gnb.depth : [1,2,3];\n                  this.visibleGnb = this.pagesGnb[i].gnb.visible;\n                  this.addAll(this.pagesGnb[i].gnb);\n                  console.log('GnbComp1', this.pagesGnb[i].gnb.depth2)\n                  if(this.visibleDepth.indexOf(2)>-1 || this.visibleDepth.indexOf(3)>-1) {\n                    if(this.pagesGnb[i].gnb.depth1) {\n                      this.pagesGnb[i].gnb.depth1 = this.camelToDash(this.pagesGnb[i].gnb.depth1.replace('/','T'));\n                      this.depthOne = this.pagesGnb[i].gnb.depth1;\n                    }\n                    if(this.pagesGnb[i].gnb.depth2) {\n                      this.pagesGnb[i].gnb.depth2 = this.camelToDash(this.pagesGnb[i].gnb.depth2.replace('/','T'));\n                      this.depthTwo = this.pagesGnb[i].gnb.depth2;\n                      console.log('GnbComp2', this.depthTwo)\n                    }\n                    if(this.pagesGnb[i].gnb.depth3) {\n                      this.pagesGnb[i].gnb.depth3 = this.camelToDash(this.pagesGnb[i].gnb.depth3.replace('/','T'));\n                      this.depthThree = this.pagesGnb[i].gnb.depth3;\n                    }\n                  }\n                  else {\n                    if(this.pagesGnb[i].gnb.depth1) {\n                      this.pagesGnb[i].gnb.depth1 = this.camelToDash(this.pagesGnb[i].gnb.depth1.replace('/','T'));\n                      this.depthOne = this.pagesGnb[i].gnb.depth1;\n                    }\n                    else this.depthOne = this.camelToDash(this.defaultGnb.depth1.replace('/','T'));;\n                  }\n                  // 첫뎁스 클릭\n                  if(this.$route.query.category2) {\n                    if (this.pagesGnb[i].gnb.clickFirst ? this.pagesGnb[i].gnb.clickFirst : this.clickFirst) {\n                      if(this.childListTwo && this.childListTwo.length>0 && !this.selectedChildTabTwo) {\n                        let query = cloneItem(this.$route.query);\n                        this.selectedChildTabTwo = this.childListTwo[0].id;\n                        query.gnb = this.selectedChildTabTwo;\n                        query.category3 = this.selectedChildTabTwo;\n                        this.$route.meta.clickPush = true;\n                        this.$router.replace({\n                          path: this.$route.path,\n                          query: query\n                        });\n                        break;\n                      }\n                    }\n                  }\n                  if(this.$route.query.category1) {\n                    if (this.pagesGnb[i].gnb.clickFirst ? this.pagesGnb[i].gnb.clickFirst : this.clickFirst) {\n                      if(this.childListOne && this.childListOne.length>0 && !this.selectedChildTab) {\n                        let query = cloneItem(this.$route.query);\n                        this.selectedChildTab = this.childListOne[0].id;\n                        query.gnb = this.selectedChildTab;\n                        query.category2 = this.selectedChildTab;\n                        if(query.category3) delete query.category3;\n                        this.$route.meta.clickPush = true;\n                        this.$router.replace({\n                          path: this.$route.path,\n                          query: query\n                        });\n                        break;\n                      }\n                    }\n                  }\n\n                }\n\n                else {\n                  this.visibleDepth = this.pagesGnb[i].gnb.depth ? this.pagesGnb[i].gnb.depth : [1,2,3];\n                  this.visibleGnb = this.pagesGnb[i].gnb.visible;\n                  this.addAll(this.pagesGnb[i].gnb);\n\n                  if(this.visibleDepth.indexOf(2)>-1 || this.visibleDepth.indexOf(3)>-1) {\n                    if(this.pagesGnb[i].gnb.depth1) {\n                      this.pagesGnb[i].gnb.depth1 = this.camelToDash(this.pagesGnb[i].gnb.depth1.replace('/','T'));\n                      this.depthOne = this.pagesGnb[i].gnb.depth1;\n                    }\n                    if(this.pagesGnb[i].gnb.depth2) {\n                      this.pagesGnb[i].gnb.depth2 = this.camelToDash(this.pagesGnb[i].gnb.depth2.replace('/','T'));\n                      this.depthTwo = this.pagesGnb[i].gnb.depth2;\n                    }\n                    if(this.pagesGnb[i].gnb.depth3) {\n                      this.pagesGnb[i].gnb.depth3 = this.camelToDash(this.pagesGnb[i].gnb.depth3.replace('/','T'));\n                      this.depthThree = this.pagesGnb[i].gnb.depth3;\n                    }\n                  }\n                  else {\n                    if(this.pagesGnb[i].gnb.depth1) {\n                      this.pagesGnb[i].gnb.depth1 = this.camelToDash(this.pagesGnb[i].gnb.depth1.replace('/','T'));\n                      this.depthOne = this.pagesGnb[i].gnb.depth1;\n                    }\n                    else this.depthOne = this.camelToDash(this.defaultGnb.depth1.replace('/','T'));;\n                  }\n                  // 첫뎁스 클릭\n                  if(this.$route.query.category2) {\n                    if (this.pagesGnb[i].gnb.clickFirst ? this.pagesGnb[i].gnb.clickFirst : this.clickFirst) {\n                      if(this.childListTwo && this.childListTwo.length>0 && !this.selectedChildTabTwo) {\n                        let query = cloneItem(this.$route.query);\n                        this.selectedChildTabTwo = this.childListTwo[0].id;\n                        query.gnb = this.selectedChildTabTwo;\n                        query.category3 = this.selectedChildTabTwo;\n                        this.$route.meta.clickPush = true;\n                        this.$router.replace({\n                          path: this.$route.path,\n                          query: query\n                        });\n                        break;\n                      }\n                    }\n                  }\n                  if(this.$route.query.category1) {\n                    if (this.pagesGnb[i].gnb.clickFirst ? this.pagesGnb[i].gnb.clickFirst : this.clickFirst) {\n                      if(this.childListOne && this.childListOne.length>0 && !this.selectedChildTab) {\n                        let query = cloneItem(this.$route.query);\n                        this.selectedChildTab = this.childListOne[0].id;\n                        query.gnb = this.selectedChildTab;\n                        query.category2 = this.selectedChildTab;\n                        if(query.category3) delete query.category3;\n                        this.$route.meta.clickPush = true;\n                        this.$router.replace({\n                          path: this.$route.path,\n                          query: query\n                        });\n                        break;\n                      }\n                    }\n                  }\n\n                }\n\n              }\n              else {\n                this.visibleGnb = this.pagesGnb[i].gnb.visible;\n              }\n            }\n          }\n          if(this.depthOne === '') {\n            this.depthOne = this.camelToDash(this.defaultGnb.depth1.replace('/','T'));;\n          }\n        }\n      },\n      init() {\n        // 1,2,3차 카테고리 목록 가져오기\n        this.childListOne = [];\n        this.childListTwo = [];\n\n        if(this.$route.query.gnb && this.menu && this.menu.length>0) {\n          for(let i=0;i<this.menu.length;i++) {\n            if(this.menu[i].id === Number(this.$route.query.gnb)) {\n              this.selectedTab = this.menu[i].id;\n              this.selectedIndex1 = i;\n              this.selectedChildTab = undefined;\n              this.selectedChildTabTwo = undefined;\n              if(this.menu[i].child.length>0) this.childListOne = this.menu[i].child;\n              this.scrollInit1();\n              this.clickDepth1(this.menu[i], i);\n              break;\n            }\n            else {\n              if(this.menu[i].child && this.menu[i].child.length>0) {\n                for(let j=0;j<this.menu[i].child.length;j++) {\n                  if(this.menu[i].child[j].id === Number(this.$route.query.gnb)) {\n                    this.selectedTab = this.menu[i].id;\n                    this.selectedChildTab = this.menu[i].child[j].id;\n                    this.selectedChildTabTwo = undefined;\n                    this.selectedIndex1 = i;\n                    this.selectedIndex2 = j;\n                    this.childListOne = this.menu[i].child;\n                    if(this.menu[i].child[j].child.length>0) this.childListTwo = this.menu[i].child[j].child;\n                    this.scrollInit1();\n                    this.scrollInit2();\n                    this.clickDepth2(this.menu[i].child[j], j);\n                    break;\n                  }\n                  else {\n                    if(this.menu[i].child[j].child && this.menu[i].child[j].child.length>0) {\n                      for(let k=0;k<this.menu[i].child[j].child.length;k++) {\n                        if(this.menu[i].child[j].child[k].id === Number(this.$route.query.gnb)) {\n                          this.selectedTab = this.menu[i].id;\n                          this.selectedChildTab = this.menu[i].child[j].id;\n                          this.selectedChildTabTwo = this.menu[i].child[j].child[k].id;\n                          this.selectedIndex1 = i;\n                          this.selectedIndex2 = j;\n                          this.selectedIndex3 = k;\n                          this.childListOne = this.menu[i].child;\n                          this.childListTwo = this.menu[i].child[j].child;\n                          this.scrollInit1();\n                          this.scrollInit2();\n                          this.scrollInit3();\n                          this.clickDepth3(this.menu[i].child[j].child[k], k);\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n          }\n          // this.selectedTab = Number(this.$route.query.gnb);\n          // this.selectedChildTab = Number(this.$route.query.gnb);\n\n          if(this.isIE) {\n            setTimeout(() => {\n              dragscroll.reset();\n            },1000);\n          }\n          this.getVisibleDepth()\n        }\n        this.getVisibleDepth();\n        this.scrollInit1();\n      },\n      itemStyle(id) {\n        let obj = {\n          padding: '13px 16px'\n        };\n\n        if (id===this.selectedTab) {\n          if(this.selectedItemStyle) {\n            return Object.assign(obj, this.selectedItemStyle);\n          }\n          else {\n            obj.color = this.brandColor.brand.color;\n            obj.borderBottom = `2px solid ${this.brandColor.brand.color}`;\n          }\n        }\n\n        if (this.customItemStyle) {\n          return Object.assign(obj, this.customItemStyle);\n        } else {\n          return obj;\n        }\n      },\n      categoryImg(item) {\n        let obj = {\n          width: '36px',\n          height: '36px',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'noRepeat',\n          borderRadius: '4px'\n        };\n        if(item.id===this.selectedChildTab) {\n          if(item.img_after) {\n            obj.backgroundImage = `url(${item.img_after})`;\n          }\n          else {\n            obj.backgroundImage = `url(${this.dummyImage.bg})`;\n          }\n        }\n        else {\n          if(item.img_before) {\n            obj.backgroundImage = `url(${item.img_before})`;\n          }\n          else {\n            obj.backgroundImage = `url(${this.dummyImage.bg})`;\n          }\n        }\n\n        return obj;\n      },\n\n      childStyle(id) {\n        let obj = {\n          padding: '10px 0',\n          borderBottom: this.brandBorder.main.border,\n          borderRight: this.brandBorder.main.border\n        };\n\n        if (id===this.selectedChildTab) {\n          if(this.selectedItemStyle) {\n            return Object.assign(obj, this.selectedItemStyle);\n          }\n          else {\n            obj.color = this.brandColor.brand.color;\n          }\n        }\n\n        if (this.customItemStyle) {\n          return Object.assign(obj, this.customItemStyle);\n        } else {\n          return obj;\n        }\n      },\n\n      childTwoStyle(id) {\n        let obj = {\n          padding: '13px 16px'\n        };\n\n        if (id===this.selectedChildTabTwo) {\n          if(this.selectedItemStyle) {\n            return Object.assign(obj, this.selectedItemStyle);\n          }\n          else {\n            obj.color = this.brandColor.brand.color;\n            obj.borderBottom = `2px solid ${this.brandColor.brand.color}`;\n          }\n        }\n\n        if (this.customItemStyle) {\n          return Object.assign(obj, this.customItemStyle);\n        } else {\n          return obj;\n        }\n      },\n\n      clickTabOne(item, idx) {\n\n        // 드래그앤드 시 클릭방지\n        if (this.dragging) {\n          this.dragging = false;\n          return;\n        }\n        else {\n\n          this.childListOne = [];\n          this.childListTwo = [];\n          this.selectedChildTab = undefined;\n          this.selectedChildTabTwo = undefined;\n          this.selectedIndex2 = undefined;\n          this.selectedIndex3 = undefined;\n          this.selectedTab = item.id;\n          this.selectedIndex1 = idx;\n          if(item.child) this.childListOne = item.child;\n          console.log('childListOne',this.childListOne)\n          this.clickDepth1(item, idx);\n          if(this.childListOne.length===0) {\n            if(this.selectedTab || this.selectedTab===0) this.$emit('select', this.selectedTab, item);\n          }\n\n        }\n      },\n      clickTabTwo(item, idx) {\n        // 드래그앤드 시 클릭방지\n        if (this.dragging) {\n          this.dragging = false;\n          return;\n        }\n        else {\n\n          this.childListTwo = [];\n          this.selectedChildTabTwo = undefined;\n          this.selectedIndex3 = undefined;\n          this.selectedIndex2 = idx;\n          this.selectedTab = item.parent_id;\n          this.selectedChildTab = item.id;\n          if(item.child) this.childListTwo = item.child;\n\n          this.clickDepth2(item, idx);\n          if(this.childListTwo.length===0) {\n            this.$emit('select', this.selectedChildTab, item);\n          }\n        }\n      },\n      clickTabThree(item, idx) {\n        console.log('clickTabThree', item, idx);\n        // 드래그앤드 시 클릭방지\n        if (this.dragging) {\n          this.dragging = false;\n          return;\n        }\n        else {\n          this.selectedChildTab = item.parent_id;\n          this.selectedChildTabTwo = item.id;\n          this.selectedIndex3 = idx;\n\n          this.clickDepth3(item, idx);\n          this.$emit('select', this.selectedChildTabTwo, item);\n        }\n      },\n      onDrag(e) {\n        // 기종별 감도차이 때문에 0이 아닌 1로 약간의 여유있게 줌\n        if (Math.abs(e.detail.deltaX) > 1) {\n          this.dragging = true;\n        }\n      },\n      // 선택된 탭을 스크롤 중앙으로\n      setScroll(index, str) {\n        let target = undefined;\n        if(str==='one') {\n          target = this.scrollArray[index];\n          if (target) {\n            let result = (target.accumulatedWidth - (target.width/2));\n            result -= (this.$store.getters.deviceWidth/2);\n            this.$refs.oneDepth.$refs.dragscroll.scrollTo({\n              behavior: 'smooth',\n              left: result\n            });\n          }\n        }\n        else if(str==='two') {\n          target = this.scrollArrayTwo[index];\n          if (target) {\n            let result = (target.accumulatedWidth - (target.width/2));\n            result -= (this.$store.getters.deviceWidth/2);\n            this.$refs.twoDepth.$refs.dragscroll.scrollTo({\n              behavior: 'smooth',\n              left: result\n            });\n          }\n        }\n        else if(str==='three') {\n          target = this.scrollArrayThree[index];\n          if (target) {\n            let result = (target.accumulatedWidth - (target.width/2));\n            result -= (this.$store.getters.deviceWidth/2);\n            this.$refs.threeDepth.$refs.dragscroll.scrollTo({\n              behavior: 'smooth',\n              left: result\n            });\n          }\n        }\n\n      }\n    }\n\n  }\n",{"version":3,"sources":["GnbComp.vue"],"names":[],"mappingsfile":"GnbComp.vue","sourceRoot":"src/components/Components/Slot","sourcesContent":["<template>\n  <div class=\"full-width\" :style=\"containStyle\" v-if=\"visibleGnb\">\n\n    <slot name=\"banner\"></slot>\n\n    <div v-if=\"menu && menu.length>0 && visibleGnb && visibleDepth.indexOf(1)>-1\">\n      <component :is=\"depthOne\" :depth=\"1\" :menu=\"menu\" @clicked=\"clickTabOne\" :indicatorStyle=\"indicatorStyle\"\n                 :selectedItemStyle=\"selectedItemStyle\" :customItemStyle=\"customItemStyle\"\n                 ref=\"oneDepth\"></component>\n    </div>\n\n    <div v-if=\"childListOne && childListOne.length>0 && visibleGnb && visibleDepth.indexOf(2)>-1 && visiblePath\">\n      <slot name=\"townpickMobileBanner\"></slot>\n      <component :is=\"depthTwo\" :depth=\"2\"  @clicked=\"clickTabTwo\" :indicatorStyle=\"indicatorStyle\" :menu=\"childListOne\"\n                 :selectedItemStyle=\"selectedItemStyle\" :customItemStyle=\"customItemStyle\"\n                 ref=\"twoDepth\"></component>\n    </div>\n\n    <div v-if=\"childListTwo && childListTwo.length>0 && visibleGnb && visibleDepth.indexOf(3)>-1 && visiblePath\">\n      <component :is=\"depthThree\" :depth=\"3\"  @clicked=\"clickTabThree\" :indicatorStyle=\"indicatorStyle\" :menu=\"childListTwo\"\n                 :selectedItemStyle=\"selectedItemStyle\" :customItemStyle=\"customItemStyle\"\n                 ref=\"threeDepth\"></component>\n    </div>\n\n  </div>\n</template>\n\n<script>\n  import {dragscroll} from 'vue-dragscroll'\n  import MenuMixin from '@/components/Mixins/MenuMixin'\n  import TownpickImgTxtTGnbs from '@/components/LaunchPack_Common/Header/townpickImgTxt/Gnbs'\nimport TownpickImgTGnbs from '@/components/LaunchPack_Common/Header/townpickImg/Gnbs'\nimport ModowaImgTxtTGnbs from '@/components/LaunchPack_Common/Header/modowaImgTxt/Gnbs'\nimport TownpickImgTxtPcTGnbs from '@/components/LaunchPack_Common/Header/townpickImgTxtPc/Gnbs'\nimport Gnbs from '@/components/LaunchPack_Common/Header/Gnbs'\nimport TownpickImgPcTGnbs from '@/components/LaunchPack_Common/Header/townpickImgPc/Gnbs'\nimport BetweenTxtTGnbs from '@/components/LaunchPack_Common/Header/betweenTxt/Gnbs'\n  export default {\n    name: \"GnbComp\",\n    components: {\n      TownpickImgTxtTGnbs,\nTownpickImgTGnbs,\nModowaImgTxtTGnbs,\nTownpickImgTxtPcTGnbs,\nGnbs,\nTownpickImgPcTGnbs,\nBetweenTxtTGnbs\n    },\n    directives: {\n      dragscroll\n    },\n    mixins: [\n      MenuMixin\n    ],\n    props: {\n      defaultGnb: {\n        type: Object,\n        required: false,\n        default: function() {\n          return {\n            visible: true,\n            depth1: 'Gnbs'\n          }\n        }\n      },\n      pagesGnb: {\n        type: Array,\n        required: false\n      },\n      // /product로 푸쉬하지 않을 path 지정\n      exceptPath: {\n        type: Array,\n        required: false\n      },\n      // default path는 아니지만 gnb 2뎁스 이상을 보이게 하고 싶은 path\n      displayPath: {\n        type: Array,\n        required: false\n      },\n      // 이동할 default path\n      defaultPath: {\n        type: String,\n        required: false,\n        default: '/product'\n      },\n      // 뎁스 클릭시 다음 뎁스 첫번째 항목 클릭 여부 default\n      clickFirst: {\n        type: Boolean,\n        required: false,\n        default: false\n      },\n      containStyle: {\n        type: Object,\n        required: false,\n        default: function() {\n          return {\n            marginTop: '50px'\n          }\n        }\n      },\n      // 선택된 탭 id\n      // qeury와 같이 number로 판단하고 싶을때 number로 치환시켜 보내주어야 한다\n      initialTab: {\n        type: [String, Number],\n        required: false\n      },\n      selectedItemStyle: {\n        type: Object,\n        required: false\n      },\n      customItemStyle: {\n        type: Object,\n        required: false\n      },\n      indicatorStyle: {\n        type: Object,\n        required: false\n      },\n      scrollable: {\n        type: Boolean,\n        required: false,\n        default: true\n      }\n    },\n    created() {\n      if (this.initialTab!==undefined) {\n        if (typeof(this.initialTab)==='number') {\n          this.selectedTab = parseInt(this.initialTab);\n        }\n        else if (typeof(this.initialTab)==='string') {\n          this.selectedTab = this.initialTab;\n        }\n      }\n      this.menu = this.$store.getters.brand.menu_set.filter(item => { return item.style==='gnb' })[0].menu;\n\n      if(this.$route.path===this.defaultPath || (this.exceptPath && this.exceptPath.filter(item => { return item===this.$route.path}).length>0)) {\n        this.visiblePath = true;\n      }\n      else {\n        this.visiblePath = false;\n      }\n      \n      this.init();\n      // this.getMenu();\n    },\n    mounted() {\n    },\n    data() {\n      return {\n        selectedTab: 0,\n        selectedChildTab: undefined,\n        selectedChildTabTwo: undefined,\n\n        selectedBoard: undefined,\n        depthOne: '',\n        depthTwo: '',\n        depthThree: '',\n        visibleDepth: [1,2,3],\n        visibleGnb: this.defaultGnb.visible,\n        dragging: false,\n        scrollArray: [],\n        scrollArrayTwo: [],\n        scrollArrayThree: [],\n        selectedIndex1: undefined,\n        selectedIndex2: undefined,\n        selectedIndex3: undefined,\n        visiblePath: false,\n\n        childListOne: [],\n        childListTwo: [],\n\n        menu: undefined\n      }\n    },\n\n    computed: {\n      childStateOne() {\n        let menu = this.computedMenu[0];\n        if(menu && menu.child && menu.child.length>0) {\n          return true;\n        }\n        else {\n          return false;\n        }\n      },\n      childStateTwo() {\n        let menu = this.computedChildMenu ? this.computedChildMenu[0] : [];\n        if(menu && menu.child && menu.child.length>0) {\n          return true;\n        }\n        else {\n          return false;\n        }\n      },\n      grabStyle() {\n        return {\n          borderBottom: this.brandBorder.main.border,\n        }\n      },\n      computedChildMenu() {\n        let result = [];\n        if(this.childStateOne && this.childListOne.length>0) {\n          this.childListOne.forEach(item => {\n            if(item.id === this.selectedChildTab) {\n              result.push(item);\n            }\n          })\n          return result;\n        }\n      },\n      computedMenu() {\n        let result = [];\n        this.menu.forEach(item => {\n          if(item.id === this.selectedTab)\n            result.push(item);\n        });\n        return result;\n      },\n      divider1Style() {\n        let deco = {\n          backgroundColor: this.getColor('기본 테두리선 색상'),\n          width: '100%',\n          height: '1px'\n        };\n        if (this.dividerStyle!==undefined) deco = this.dividerStyle;\n        return deco;\n      },\n      tabListStyle() {\n        let deco = {};\n        if(this.scrollable) {\n          deco = {\n            overflowX: 'scroll',\n            flexWrap: 'nowrap',\n            display: '-webkit-box'\n          }\n        }\n        return deco;\n      },\n      isIE() {\n        if (navigator.userAgent.indexOf('Trident') > -1) return true;\n        else return false;\n      }\n    },\n\n    watch: {\n      '$route'(n,o) {\n        if(n.path!==o.path) {\n          if(n.path===this.defaultPath || (this.exceptPath && this.exceptPath.filter(item => { return item===n.path}).length>0) || (this.displayPath && this.displayPath.filter(item => { return item===n.path}).length>0) || (this.displayPath && this.displayPath.filter(item => { return item===n.path}).length>0)) {\n            this.visiblePath = true;\n          }\n          else {\n            this.visiblePath = false;\n\n            // getVisibleDepth clickFirst 조건 초기화\n            this.selectedChildTab = undefined;\n            this.selectedChildTabTwo = undefined;\n            \n            if(this.$refs.oneDepth && this.$refs.oneDepth.$refs.dragscroll) {\n              this.$refs.oneDepth.$refs.dragscroll.scrollTo({\n                behavior: 'smooth',\n                left: 0\n              });\n            }\n          }\n        }\n\n        // if(this.$store.getters.device==='pc') {\n          let n2 = n.query.category2;\n          let n1 = n.query.category1;\n          let menu = [];\n          let child = [];\n          if(n1) {\n            menu = this.menu.filter(item1 => { return item1.id===Number(n1)});\n            if(menu.length>0) {\n              let index = this.menu.indexOf(menu[0]);\n              if(this.$refs.oneDepth.$refs.dragscroll.scrollLeft===0) this.setScroll(index, 'one');\n              if(menu[0].child) {\n                this.childListOne = menu[0].child;\n                if(menu[0].child.length>0 && n2) {\n                  child = menu[0].child.filter(item2 => { return item2.id===Number(n2)});\n                  if(child.length>0 && child[0].child) this.childListTwo = child[0].child;\n                }\n                this.getVisibleDepth();\n              }\n            }\n          }\n        // }\n        \n      }\n    },\n\n    methods: {\n      // 클릭시 뎁스에 따라 알맞게 쿼리 변경\n      clickDepth1(item, idx) {\n        if(item.link) {\n          this.routerPush(item.link);\n        } else {\n          let query = cloneItem(this.$route.query);\n          if(this.selectedTab===0) query.gnb = '';\n          else query.gnb = this.selectedTab;\n          query.category1 = this.selectedTab;\n          if(query.category2) delete query.category2;\n          if(query.category3) delete query.category3;\n          this.$route.meta.clickPush = true;\n          if(this.exceptPath && this.exceptPath.length>0 && this.exceptPath.indexOf(this.$route.path)>-1) {\n            this.$router.replace({\n              path: this.$route.path,\n              query: query\n            }, ()=>{\n              this.getVisibleDepth();\n              this.scrollDepth1(item, idx);\n            });\n          }\n          else {\n            this.$router.replace({\n              path: this.defaultPath,\n              query: query\n            }, ()=>{\n              this.getVisibleDepth();\n              this.scrollDepth1(item, idx);\n            });\n          }\n        }\n      },\n      clickDepth2(item, idx) {\n        let query = cloneItem(this.$route.query);\n        query.gnb = this.selectedChildTab;\n        query.category1 = this.selectedTab;\n        query.category2 = this.selectedChildTab;\n        if(query.category3) delete query.category3;\n        this.$route.meta.clickPush = true;\n        this.$router.replace({\n          path: this.$route.path,\n          query: query\n        }, ()=>{\n              this.getVisibleDepth();\n              this.scrollDepth2(item, idx);\n        });\n      },\n      clickDepth3(item, idx) {\n        let query = cloneItem(this.$route.query);\n        query.gnb = this.selectedChildTabTwo;\n        query.category1 = this.selectedTab;\n        query.category2 = this.selectedChildTab;\n        query.category3 = this.selectedChildTabTwo;\n        this.$route.meta.clickPush = true;\n        this.$router.replace({\n          path: this.$route.path,\n          query: query\n        }, ()=>{\n            this.getVisibleDepth();\n            this.scrollDepth3(item, idx);\n        });\n      },\n      scrollDepth1(item, idx) {\n\n\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            this.scrollArrayTwo = [];\n            if(this.$refs.oneDepth&&this.$refs.oneDepth.$refs.dragscroll) {\n              this.dragging = false;\n              if(this.childListOne.length>0) {\n                let totalWidth = 0;\n                // 스크롤아이템 width 저장\n                for (let i=0; i<this.childListOne.length; i++) {\n                  if (this.$refs.twoDepth&&this.$refs.twoDepth.$refs.dragscroll&&this.$refs.twoDepth.$refs[`tabItem${i}`]&&this.$refs.twoDepth.$refs[`tabItem${i}`][0]) {\n                    // console.log('refs', this.$refs.twoDepth.$refs[`tabItem${i}`])\n                    let width = this.$refs.twoDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                    this.scrollArrayTwo.push({\n                      id : this.childListOne[i].id,\n                      name : this.childListOne[i].name,\n                      width: width,                        // 본인 너비\n                      accumulatedWidth: totalWidth+width   // 본인 누적너비\n                    });\n                    totalWidth += width;                   // 총 너비\n                  }\n                }\n              }\n\n              // 스크롤 중앙 정렬\n              if(this.selectedTab === Number(this.$route.query.category1)) this.setScroll(idx, 'one');\n            }\n          })\n        },300)\n\n      },\n      scrollDepth2(item, idx) {\n\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            this.scrollArrayThree = [];\n            if(this.$refs.twoDepth&&this.$refs.twoDepth.$refs.dragscroll) {\n              this.dragging = false;\n              if(this.childListTwo.length>0) {\n                let totalWidth = 0;\n                // 스크롤아이템 width 저장\n                for (let i=0; i<this.childListTwo.length; i++) {\n                  if (this.$refs.threeDepth&&this.$refs.threeDepth.$refs.dragscroll&&this.$refs.threeDepth.$refs[`tabItem${i}`]&&this.$refs.threeDepth.$refs[`tabItem${i}`][0]) {\n                    // console.log('refs', this.$refs.threeDepth.$refs[`tabItem${i}`])\n                    let width = this.$refs.threeDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                    this.scrollArrayThree.push({\n                      id : this.childListTwo[i].id,\n                      name : this.childListTwo[i].name,\n                      width: width,                        // 본인 너비\n                      accumulatedWidth: totalWidth+width   // 본인 누적너비\n                    });\n                    totalWidth += width;                   // 총 너비\n                  }\n                }\n              }\n\n              // 스크롤 중앙 정렬\n              if(this.selectedChildTab === Number(this.$route.query.category2)) this.setScroll(idx, 'two');\n            }\n          })\n        },300)\n\n      },\n      scrollDepth3(item ,idx) {\n        if(this.$refs.twoDepth&&this.$refs.twoDepth.$refs.dragscroll) {\n          this.dragging = false;\n\n          // 스크롤 중앙 정렬\n          if(this.selectedChildTabTwo === Number(this.$route.query.category3)) this.setScroll(idx, 'three');\n        }\n      },\n      scrollInit1() {\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            let totalWidth = 0;\n            // 스크롤아이템 width 저장\n            let index;\n            for (let i=0; i<this.menu.length; i++) {\n              if (this.$refs.oneDepth&&this.$refs.oneDepth.$refs.dragscroll&&this.$refs.oneDepth.$refs[`tabItem${i}`]&&this.$refs.oneDepth.$refs[`tabItem${i}`][0]) {\n                // console.log('refs', this.$refs.oneDepth.$refs[`tabItem${i}`])\n                let width = this.$refs.oneDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                this.scrollArray.push({\n                  id : this.menu[i].id,\n                  name : this.menu[i].name,\n                  width: width,                        // 본인 너비\n                  accumulatedWidth: totalWidth+width   // 본인 누적너비\n                });\n                totalWidth += width;                   // 총 너비\n              }\n              // 현재 선택된 탭 index 저장\n              if (this.menu[i].id === this.selectedTab) {\n                index = i;\n              }\n            }\n            // 스크롤 중앙 정렬\n            // if(this.selectedTab === Number(this.$route.query.category1)) this.setScroll(index, 'one');\n          })\n        },200)\n      },\n      scrollInit2() {\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            let totalWidth = 0;\n            // 스크롤아이템 width 저장\n            let index;\n            for (let i=0; i<this.childListOne.length; i++) {\n              if (this.$refs.twoDepth&&this.$refs.twoDepth.$refs.dragscroll&&this.$refs.twoDepth.$refs[`tabItem${i}`]&&this.$refs.twoDepth.$refs[`tabItem${i}`][0]) {\n                // console.log('refs', this.$refs.twoDepth.$refs[`tabItem${i}`])\n                let width = this.$refs.twoDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                this.scrollArrayTwo.push({\n                  id : this.childListOne[i].id,\n                  name : this.childListOne[i].name,\n                  width: width,                        // 본인 너비\n                  accumulatedWidth: totalWidth+width   // 본인 누적너비\n                });\n                totalWidth += width;                   // 총 너비\n              }\n              // 현재 선택된 탭 index 저장\n              if (this.childListOne[i].id === this.selectedChildTab) {\n                index = i;\n              }\n            }\n            // 스크롤 중앙 정렬\n            // if(this.selectedChildTab === Number(this.$route.query.category2)) this.setScroll(index, 'two');\n          })\n        },200)\n      },\n      scrollInit3() {\n        // 스크롤\n        setTimeout(() => {\n          this.$nextTick(() => {\n            let totalWidth = 0;\n            // 스크롤아이템 width 저장\n            let index;\n            for (let i=0; i<this.childListTwo.length; i++) {\n              if (this.$refs.threeDepth&&this.$refs.threeDepth.$refs.dragscroll&&this.$refs.threeDepth.$refs[`tabItem${i}`]&&this.$refs.threeDepth.$refs[`tabItem${i}`][0]) {\n                // console.log('refs', this.$refs.threeDepth.$refs[`tabItem${i}`])\n                let width = this.$refs.threeDepth.$refs[`tabItem${i}`][0].offsetWidth;\n                this.scrollArrayThree.push({\n                  id : this.childListTwo[i].id,\n                  name : this.childListTwo[i].name,\n                  width: width,                        // 본인 너비\n                  accumulatedWidth: totalWidth+width   // 본인 누적너비\n                });\n                totalWidth += width;                   // 총 너비\n              }\n              // 현재 선택된 탭 index 저장\n              if (this.childListTwo[i].id === this.selectedChildTabTwo) {\n                index = i;\n              }\n            }\n            // 스크롤 중앙 정렬\n            // if(this.selectedChildTabTwo === Number(this.$route.query.category3)) this.setScroll(index, 'three');\n          })\n        },200)\n      },\n      async getMenu() {\n        let menu = await this.setMenus('gnb', 'mobile');\n        // 임시\n        // menu.unshift({\n        //   name: \"메인\",\n        //   link: \"home\"\n        // });\n        // let disableMenu = menu.filter(item=>{ return item.name === '매장거래' })[0];\n        // disableMenu.disabled = true;\n        //////\n\n        this.menu = menu;\n\n        this.init();\n      },\n      addAll(bor) {\n        // 특정 뎁스 카테고리에 전체를 추가하는 로직\n\n        // 2뎁스 이상 이동에서만 menu 전체 삭제 예외 처리\n        if(this.$route.query&&!this.$route.query.category2) {\n          if(bor.all && bor.all.indexOf(1)===-1) {\n            if(this.menu.length>0&&this.menu[0].index===-1) {\n              this.menu.splice(0,1);\n            }\n          }\n        }\n\n        if(bor.all && bor.all.length>0) {\n          bor.all.forEach(item => {\n            if(item===1) {\n              if(this.menu.length>0&&this.menu[0].index!==-1) {\n                this.menu.unshift({\n                  id: 0,\n                  value: 0,\n                  label: '전체',\n                  name: '전체',\n                  index: -1,\n                });\n              }\n            }\n\n            if(item===2) {\n              if(this.childListOne.length>0 && this.childListOne[0].index!==-1) {\n                this.childListOne.unshift({\n                  id: this.menu[this.selectedIndex1].id,\n                  value: this.menu[this.selectedIndex1].id,\n                  label: '전체',\n                  name: '전체',\n                  index: -1,\n                  parent_id: this.menu[this.selectedIndex1].id\n                });\n              }\n            }\n\n            if(item===3) {\n              if(this.childListTwo.length>0 && this.childListTwo[0].index!==-1) {\n                this.childListTwo.unshift({\n                  id: this.menu[this.selectedIndex1].child[this.selectedIndex2].id,\n                  value: this.menu[this.selectedIndex1].child[this.selectedIndex2].id,\n                  label: '전체',\n                  name: '전체',\n                  index: -1,\n                  parent_id: this.menu[this.selectedIndex1].child[this.selectedIndex2].id\n                });\n              }\n            }\n          })\n        }\n      },\n      getVisibleDepth() {\n        console.log('getVisibleDepth')\n        // 각 페이지보드마다 따로 정의한 visible gnb, depth 있는지 찾는 로직\n        if (this.pagesGnb && this.pagesGnb.length>0) {\n          console.log('pagesGnb')\n          for (let i=0;i<this.pagesGnb.length;i++) {\n            if('/'+this.pagesGnb[i].name === this.$route.path) {\n              console.log('path', this.$route.path);\n              if(this.pagesGnb[i].gnb.visible) {\n                if(this.pagesGnb[i].gnb.board && this.pagesGnb[i].gnb.board.length>0) {\n\n                  if(this.$route.query.category3) {\n                    let bor = this.pagesGnb[i].gnb.board.filter(item => {\n                      return item.category===Number(this.$route.query.category3)\n                    })\n                    if(bor.length>0) {\n                      this.addAll(bor[0]);\n                      this.visibleGnb = bor[0].visible;\n                      this.visibleDepth = bor[0].depth;\n                      if (bor[0].depth1) {\n                        bor[0].depth1 = this.camelToDash(bor[0].depth1.replace('/','T'));\n                        this.depthOne = bor[0].depth1;\n                      }\n                      if (bor[0].depth2) {\n                        bor[0].depth2 = this.camelToDash(bor[0].depth2.replace('/','T'));\n                        this.depthTwo = bor[0].depth2;\n                      }\n                      if (bor[0].depth3) {\n                        bor[0].depth3 = this.camelToDash(bor[0].depth3.replace('/','T'));\n                        this.depthThree = bor[0].depth3;\n                      }\n                      break;\n                    }\n                  }\n\n                  if(this.$route.query.category2) {\n                    let bor = this.pagesGnb[i].gnb.board.filter(item => {\n                      return item.category===Number(this.$route.query.category2)\n                    })\n                    if(bor.length>0) {\n                      this.addAll(bor[0]);\n                      this.visibleGnb = bor[0].visible;\n                      this.visibleDepth = bor[0].depth;\n                      if (bor[0].depth1) {\n                        bor[0].depth1 = this.camelToDash(bor[0].depth1.replace('/','T'));\n                        this.depthOne = bor[0].depth1;\n                      }\n                      if (bor[0].depth2) {\n                        bor[0].depth2 = this.camelToDash(bor[0].depth2.replace('/','T'));\n                        this.depthTwo = bor[0].depth2;\n                      }\n                      if (bor[0].depth3) {\n                        bor[0].depth3 = this.camelToDash(bor[0].depth3.replace('/','T'));\n                        this.depthThree = bor[0].depth3;\n                      }\n                      // 첫뎁스 클릭\n                      if (bor[0].clickFirst ? bor[0].clickFirst : this.clickFirst) {\n                        if(this.childListTwo && this.childListTwo.length>0 && !this.selectedChildTabTwo) {\n                          let query = cloneItem(this.$route.query);\n                          this.selectedChildTabTwo = this.childListTwo[0].id;\n                          query.gnb = this.selectedChildTabTwo;\n                          query.category3 = this.selectedChildTabTwo;\n                          this.$route.meta.clickPush = true;\n                          this.$router.replace({\n                            path: this.$route.path,\n                            query: query\n                          });\n                        }\n                      }\n                      break;\n                    }\n                  }\n\n                  if(this.$route.query.category1) {\n                    let bor = this.pagesGnb[i].gnb.board.filter(item => {\n                      return item.category===Number(this.$route.query.category1)\n                    })\n                    if(bor.length>0) {\n                      this.addAll(bor[0]);\n                      this.visibleGnb = bor[0].visible;\n                      this.visibleDepth = bor[0].depth;\n                      if (bor[0].depth1) {\n                        bor[0].depth1 = this.camelToDash(bor[0].depth1.replace('/','T'));\n                        this.depthOne = bor[0].depth1;\n                      }\n                      if (bor[0].depth2) {\n                        bor[0].depth2 = this.camelToDash(bor[0].depth2.replace('/','T'));\n                        this.depthTwo = bor[0].depth2;\n                      }\n                      if (bor[0].depth3) {\n                        bor[0].depth3 = this.camelToDash(bor[0].depth3.replace('/','T'));\n                        this.depthThree = bor[0].depth3;\n                      }\n                      // 첫뎁스 클릭\n                      if (bor[0].clickFirst ? bor[0].clickFirst : this.clickFirst) {\n                        if(this.childListOne && this.childListOne.length>0 && !this.selectedChildTab) {\n                          let query = cloneItem(this.$route.query);\n                          this.selectedChildTab = this.childListOne[0].id;\n                          query.gnb = this.selectedChildTab;\n                          query.category2 = this.selectedChildTab;\n                          if(query.category3) delete query.category3;\n                          this.$route.meta.clickPush = true;\n                          this.$router.replace({\n                            path: this.$route.path,\n                            query: query\n                          });\n                        }\n                      }\n                      break;\n                    }\n                  }\n\n                  this.visibleDepth = this.pagesGnb[i].gnb.depth ? this.pagesGnb[i].gnb.depth : [1,2,3];\n                  this.visibleGnb = this.pagesGnb[i].gnb.visible;\n                  this.addAll(this.pagesGnb[i].gnb);\n                  console.log('GnbComp1', this.pagesGnb[i].gnb.depth2)\n                  if(this.visibleDepth.indexOf(2)>-1 || this.visibleDepth.indexOf(3)>-1) {\n                    if(this.pagesGnb[i].gnb.depth1) {\n                      this.pagesGnb[i].gnb.depth1 = this.camelToDash(this.pagesGnb[i].gnb.depth1.replace('/','T'));\n                      this.depthOne = this.pagesGnb[i].gnb.depth1;\n                    }\n                    if(this.pagesGnb[i].gnb.depth2) {\n                      this.pagesGnb[i].gnb.depth2 = this.camelToDash(this.pagesGnb[i].gnb.depth2.replace('/','T'));\n                      this.depthTwo = this.pagesGnb[i].gnb.depth2;\n                      console.log('GnbComp2', this.depthTwo)\n                    }\n                    if(this.pagesGnb[i].gnb.depth3) {\n                      this.pagesGnb[i].gnb.depth3 = this.camelToDash(this.pagesGnb[i].gnb.depth3.replace('/','T'));\n                      this.depthThree = this.pagesGnb[i].gnb.depth3;\n                    }\n                  }\n                  else {\n                    if(this.pagesGnb[i].gnb.depth1) {\n                      this.pagesGnb[i].gnb.depth1 = this.camelToDash(this.pagesGnb[i].gnb.depth1.replace('/','T'));\n                      this.depthOne = this.pagesGnb[i].gnb.depth1;\n                    }\n                    else this.depthOne = this.camelToDash(this.defaultGnb.depth1.replace('/','T'));;\n                  }\n                  // 첫뎁스 클릭\n                  if(this.$route.query.category2) {\n                    if (this.pagesGnb[i].gnb.clickFirst ? this.pagesGnb[i].gnb.clickFirst : this.clickFirst) {\n                      if(this.childListTwo && this.childListTwo.length>0 && !this.selectedChildTabTwo) {\n                        let query = cloneItem(this.$route.query);\n                        this.selectedChildTabTwo = this.childListTwo[0].id;\n                        query.gnb = this.selectedChildTabTwo;\n                        query.category3 = this.selectedChildTabTwo;\n                        this.$route.meta.clickPush = true;\n                        this.$router.replace({\n                          path: this.$route.path,\n                          query: query\n                        });\n                        break;\n                      }\n                    }\n                  }\n                  if(this.$route.query.category1) {\n                    if (this.pagesGnb[i].gnb.clickFirst ? this.pagesGnb[i].gnb.clickFirst : this.clickFirst) {\n                      if(this.childListOne && this.childListOne.length>0 && !this.selectedChildTab) {\n                        let query = cloneItem(this.$route.query);\n                        this.selectedChildTab = this.childListOne[0].id;\n                        query.gnb = this.selectedChildTab;\n                        query.category2 = this.selectedChildTab;\n                        if(query.category3) delete query.category3;\n                        this.$route.meta.clickPush = true;\n                        this.$router.replace({\n                          path: this.$route.path,\n                          query: query\n                        });\n                        break;\n                      }\n                    }\n                  }\n\n                }\n\n                else {\n                  this.visibleDepth = this.pagesGnb[i].gnb.depth ? this.pagesGnb[i].gnb.depth : [1,2,3];\n                  this.visibleGnb = this.pagesGnb[i].gnb.visible;\n                  this.addAll(this.pagesGnb[i].gnb);\n\n                  if(this.visibleDepth.indexOf(2)>-1 || this.visibleDepth.indexOf(3)>-1) {\n                    if(this.pagesGnb[i].gnb.depth1) {\n                      this.pagesGnb[i].gnb.depth1 = this.camelToDash(this.pagesGnb[i].gnb.depth1.replace('/','T'));\n                      this.depthOne = this.pagesGnb[i].gnb.depth1;\n                    }\n                    if(this.pagesGnb[i].gnb.depth2) {\n                      this.pagesGnb[i].gnb.depth2 = this.camelToDash(this.pagesGnb[i].gnb.depth2.replace('/','T'));\n                      this.depthTwo = this.pagesGnb[i].gnb.depth2;\n                    }\n                    if(this.pagesGnb[i].gnb.depth3) {\n                      this.pagesGnb[i].gnb.depth3 = this.camelToDash(this.pagesGnb[i].gnb.depth3.replace('/','T'));\n                      this.depthThree = this.pagesGnb[i].gnb.depth3;\n                    }\n                  }\n                  else {\n                    if(this.pagesGnb[i].gnb.depth1) {\n                      this.pagesGnb[i].gnb.depth1 = this.camelToDash(this.pagesGnb[i].gnb.depth1.replace('/','T'));\n                      this.depthOne = this.pagesGnb[i].gnb.depth1;\n                    }\n                    else this.depthOne = this.camelToDash(this.defaultGnb.depth1.replace('/','T'));;\n                  }\n                  // 첫뎁스 클릭\n                  if(this.$route.query.category2) {\n                    if (this.pagesGnb[i].gnb.clickFirst ? this.pagesGnb[i].gnb.clickFirst : this.clickFirst) {\n                      if(this.childListTwo && this.childListTwo.length>0 && !this.selectedChildTabTwo) {\n                        let query = cloneItem(this.$route.query);\n                        this.selectedChildTabTwo = this.childListTwo[0].id;\n                        query.gnb = this.selectedChildTabTwo;\n                        query.category3 = this.selectedChildTabTwo;\n                        this.$route.meta.clickPush = true;\n                        this.$router.replace({\n                          path: this.$route.path,\n                          query: query\n                        });\n                        break;\n                      }\n                    }\n                  }\n                  if(this.$route.query.category1) {\n                    if (this.pagesGnb[i].gnb.clickFirst ? this.pagesGnb[i].gnb.clickFirst : this.clickFirst) {\n                      if(this.childListOne && this.childListOne.length>0 && !this.selectedChildTab) {\n                        let query = cloneItem(this.$route.query);\n                        this.selectedChildTab = this.childListOne[0].id;\n                        query.gnb = this.selectedChildTab;\n                        query.category2 = this.selectedChildTab;\n                        if(query.category3) delete query.category3;\n                        this.$route.meta.clickPush = true;\n                        this.$router.replace({\n                          path: this.$route.path,\n                          query: query\n                        });\n                        break;\n                      }\n                    }\n                  }\n\n                }\n\n              }\n              else {\n                this.visibleGnb = this.pagesGnb[i].gnb.visible;\n              }\n            }\n          }\n          if(this.depthOne === '') {\n            this.depthOne = this.camelToDash(this.defaultGnb.depth1.replace('/','T'));;\n          }\n        }\n      },\n      init() {\n        // 1,2,3차 카테고리 목록 가져오기\n        this.childListOne = [];\n        this.childListTwo = [];\n\n        if(this.$route.query.gnb && this.menu && this.menu.length>0) {\n          for(let i=0;i<this.menu.length;i++) {\n            if(this.menu[i].id === Number(this.$route.query.gnb)) {\n              this.selectedTab = this.menu[i].id;\n              this.selectedIndex1 = i;\n              this.selectedChildTab = undefined;\n              this.selectedChildTabTwo = undefined;\n              if(this.menu[i].child.length>0) this.childListOne = this.menu[i].child;\n              this.scrollInit1();\n              this.clickDepth1(this.menu[i], i);\n              break;\n            }\n            else {\n              if(this.menu[i].child && this.menu[i].child.length>0) {\n                for(let j=0;j<this.menu[i].child.length;j++) {\n                  if(this.menu[i].child[j].id === Number(this.$route.query.gnb)) {\n                    this.selectedTab = this.menu[i].id;\n                    this.selectedChildTab = this.menu[i].child[j].id;\n                    this.selectedChildTabTwo = undefined;\n                    this.selectedIndex1 = i;\n                    this.selectedIndex2 = j;\n                    this.childListOne = this.menu[i].child;\n                    if(this.menu[i].child[j].child.length>0) this.childListTwo = this.menu[i].child[j].child;\n                    this.scrollInit1();\n                    this.scrollInit2();\n                    this.clickDepth2(this.menu[i].child[j], j);\n                    break;\n                  }\n                  else {\n                    if(this.menu[i].child[j].child && this.menu[i].child[j].child.length>0) {\n                      for(let k=0;k<this.menu[i].child[j].child.length;k++) {\n                        if(this.menu[i].child[j].child[k].id === Number(this.$route.query.gnb)) {\n                          this.selectedTab = this.menu[i].id;\n                          this.selectedChildTab = this.menu[i].child[j].id;\n                          this.selectedChildTabTwo = this.menu[i].child[j].child[k].id;\n                          this.selectedIndex1 = i;\n                          this.selectedIndex2 = j;\n                          this.selectedIndex3 = k;\n                          this.childListOne = this.menu[i].child;\n                          this.childListTwo = this.menu[i].child[j].child;\n                          this.scrollInit1();\n                          this.scrollInit2();\n                          this.scrollInit3();\n                          this.clickDepth3(this.menu[i].child[j].child[k], k);\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n          }\n          // this.selectedTab = Number(this.$route.query.gnb);\n          // this.selectedChildTab = Number(this.$route.query.gnb);\n\n          if(this.isIE) {\n            setTimeout(() => {\n              dragscroll.reset();\n            },1000);\n          }\n          this.getVisibleDepth()\n        }\n        this.getVisibleDepth();\n        this.scrollInit1();\n      },\n      itemStyle(id) {\n        let obj = {\n          padding: '13px 16px'\n        };\n\n        if (id===this.selectedTab) {\n          if(this.selectedItemStyle) {\n            return Object.assign(obj, this.selectedItemStyle);\n          }\n          else {\n            obj.color = this.brandColor.brand.color;\n            obj.borderBottom = `2px solid ${this.brandColor.brand.color}`;\n          }\n        }\n\n        if (this.customItemStyle) {\n          return Object.assign(obj, this.customItemStyle);\n        } else {\n          return obj;\n        }\n      },\n      categoryImg(item) {\n        let obj = {\n          width: '36px',\n          height: '36px',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'noRepeat',\n          borderRadius: '4px'\n        };\n        if(item.id===this.selectedChildTab) {\n          if(item.img_after) {\n            obj.backgroundImage = `url(${item.img_after})`;\n          }\n          else {\n            obj.backgroundImage = `url(${this.dummyImage.bg})`;\n          }\n        }\n        else {\n          if(item.img_before) {\n            obj.backgroundImage = `url(${item.img_before})`;\n          }\n          else {\n            obj.backgroundImage = `url(${this.dummyImage.bg})`;\n          }\n        }\n\n        return obj;\n      },\n\n      childStyle(id) {\n        let obj = {\n          padding: '10px 0',\n          borderBottom: this.brandBorder.main.border,\n          borderRight: this.brandBorder.main.border\n        };\n\n        if (id===this.selectedChildTab) {\n          if(this.selectedItemStyle) {\n            return Object.assign(obj, this.selectedItemStyle);\n          }\n          else {\n            obj.color = this.brandColor.brand.color;\n          }\n        }\n\n        if (this.customItemStyle) {\n          return Object.assign(obj, this.customItemStyle);\n        } else {\n          return obj;\n        }\n      },\n\n      childTwoStyle(id) {\n        let obj = {\n          padding: '13px 16px'\n        };\n\n        if (id===this.selectedChildTabTwo) {\n          if(this.selectedItemStyle) {\n            return Object.assign(obj, this.selectedItemStyle);\n          }\n          else {\n            obj.color = this.brandColor.brand.color;\n            obj.borderBottom = `2px solid ${this.brandColor.brand.color}`;\n          }\n        }\n\n        if (this.customItemStyle) {\n          return Object.assign(obj, this.customItemStyle);\n        } else {\n          return obj;\n        }\n      },\n\n      clickTabOne(item, idx) {\n\n        // 드래그앤드 시 클릭방지\n        if (this.dragging) {\n          this.dragging = false;\n          return;\n        }\n        else {\n\n          this.childListOne = [];\n          this.childListTwo = [];\n          this.selectedChildTab = undefined;\n          this.selectedChildTabTwo = undefined;\n          this.selectedIndex2 = undefined;\n          this.selectedIndex3 = undefined;\n          this.selectedTab = item.id;\n          this.selectedIndex1 = idx;\n          if(item.child) this.childListOne = item.child;\n          console.log('childListOne',this.childListOne)\n          this.clickDepth1(item, idx);\n          if(this.childListOne.length===0) {\n            if(this.selectedTab || this.selectedTab===0) this.$emit('select', this.selectedTab, item);\n          }\n\n        }\n      },\n      clickTabTwo(item, idx) {\n        // 드래그앤드 시 클릭방지\n        if (this.dragging) {\n          this.dragging = false;\n          return;\n        }\n        else {\n\n          this.childListTwo = [];\n          this.selectedChildTabTwo = undefined;\n          this.selectedIndex3 = undefined;\n          this.selectedIndex2 = idx;\n          this.selectedTab = item.parent_id;\n          this.selectedChildTab = item.id;\n          if(item.child) this.childListTwo = item.child;\n\n          this.clickDepth2(item, idx);\n          if(this.childListTwo.length===0) {\n            this.$emit('select', this.selectedChildTab, item);\n          }\n        }\n      },\n      clickTabThree(item, idx) {\n        console.log('clickTabThree', item, idx);\n        // 드래그앤드 시 클릭방지\n        if (this.dragging) {\n          this.dragging = false;\n          return;\n        }\n        else {\n          this.selectedChildTab = item.parent_id;\n          this.selectedChildTabTwo = item.id;\n          this.selectedIndex3 = idx;\n\n          this.clickDepth3(item, idx);\n          this.$emit('select', this.selectedChildTabTwo, item);\n        }\n      },\n      onDrag(e) {\n        // 기종별 감도차이 때문에 0이 아닌 1로 약간의 여유있게 줌\n        if (Math.abs(e.detail.deltaX) > 1) {\n          this.dragging = true;\n        }\n      },\n      // 선택된 탭을 스크롤 중앙으로\n      setScroll(index, str) {\n        let target = undefined;\n        if(str==='one') {\n          target = this.scrollArray[index];\n          if (target) {\n            let result = (target.accumulatedWidth - (target.width/2));\n            result -= (this.$store.getters.deviceWidth/2);\n            this.$refs.oneDepth.$refs.dragscroll.scrollTo({\n              behavior: 'smooth',\n              left: result\n            });\n          }\n        }\n        else if(str==='two') {\n          target = this.scrollArrayTwo[index];\n          if (target) {\n            let result = (target.accumulatedWidth - (target.width/2));\n            result -= (this.$store.getters.deviceWidth/2);\n            this.$refs.twoDepth.$refs.dragscroll.scrollTo({\n              behavior: 'smooth',\n              left: result\n            });\n          }\n        }\n        else if(str==='three') {\n          target = this.scrollArrayThree[index];\n          if (target) {\n            let result = (target.accumulatedWidth - (target.width/2));\n            result -= (this.$store.getters.deviceWidth/2);\n            this.$refs.threeDepth.$refs.dragscroll.scrollTo({\n              behavior: 'smooth',\n              left: result\n            });\n          }\n        }\n\n      }\n    }\n\n  }\n</script>\n\n<style lang=\"stylus\" type=\"stylus\" scoped>\n\n  .list-horizontal\n    overflow hidden\n\n  .list-wrap\n    overflow hidden\n\n  .grab-bing\n    white-space nowrap\n    position relative\n\n  .list-item\n    display inline-block\n\n</style>\n"]}]}