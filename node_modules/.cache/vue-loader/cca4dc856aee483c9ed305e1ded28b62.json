{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/components/Components/Button/BtnDelivery.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Components/Button/BtnDelivery.vue","mtime":1605259981000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  components: {},\n  name: \"btn-delivery\",\n  props: {\n    product: {\n      type: Object,\n      required: true\n    },\n    name: {\n      type: String,\n      default: '주문하기'\n    },\n    customStyle: {\n      type: Object,\n      required: false\n    },\n    // Google Analytics 세팅할 경우\n    ga: {\n      type: Object,\n      required: false\n    }\n  },\n  data () {\n    return {\n      fixedState: false,\n      showOption: false,\n      order_product: undefined,\n      selectorStocks: [],\n      deliveryMethodArr: [],\n      selectedDeliveryMethod: \"\"\n    }\n  },\n  created () {\n    this.order_product = {\n      product_id: this.product.id,\n      name: this.product.name,\n      quantity: 1,\n      comm_price: 0,\n      point: 0,\n      discount_price: 0,\n      total_price: 0,\n      img: this.product.img,\n      delivery_price: this.product.price.delivery_price,\n      order_product_option: [],\n      product: this.product,\n    }\n    // 옵션 사용할 경우\n    if(this.product.enable_option) this.getSelectorStocks();\n    // 자체 상품일 경우\n    else this.selectProduct();\n\n    this.initializeDeliveryMethod();\n\n\n    this.detectClientHeight();\n  },\n  updated() {\n    this.detectClientHeight();\n  },\n  computed: {\n    selectorStockStyle() {\n      if (this.$store.getters.device === 'mobile') {\n        return {\n          marginLeft: '16px',\n          marginRight: '16px'\n        }\n      }\n    },\n    quanStyle() {\n      return {\n        borderBottom: `1px solid ${this.getColor('기본 테두리선 색상')}`\n      }\n    },\n    optionDropdownStyle() {\n      return {\n        container: {\n          margin: '0 0 8px 0'\n        },\n        dropdown: {\n          backgroundColor: this.brandBgColor.sub,\n          color: this.brandColor.main.color,\n          height: '32px',\n          padding: '12px',\n          fontSize: '12px',\n          borderRadius: '4px'\n        },\n        label: {\n          backgroundColor: this.brandBgColor.white.backgroundColor,\n          fontSize: '14px',\n          fontWeight: 500,\n          color: this.brandColor.main.color,\n          paddingBottom: '4px'\n        }\n      }\n    },\n    optionQuantityStyle() {\n      return {\n        input: {\n          width: '48px',\n          height: '24px',\n          backgroundColor: '',\n          border: 'none',\n          textAlign: 'center',\n          fontSize: '14px',\n          color: this.brandColor.main.color,\n          fontWeight: '700',\n          fontFamily: 'Noto Sans CJK KR'\n        },\n        btn: {\n          backgroundColor: this.brandBgColor.sub.backgroundColor,\n          color: this.brandColor.main.color,\n          borderRadius: '4px',\n          width: '24px',\n          height: '24px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: '16px'\n        }\n      }\n    },\n    imgStyle() {\n      return {\n        width: '100%',\n        height: '256px',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        backgroundImage: `url(\"${this.product.img}\")`\n      }\n    },\n    arrowLeftStyle() {\n      return {\n        top: 'calc(50% - 20px)',\n        color: 'white',\n        left: '12px',\n        fontSize: '40px',\n      }\n    },\n    arrowRightStyle() {\n      return {\n        top: 'calc(50% - 20px)',\n        color: 'white',\n        right: '12px',\n        fontSize: '40px',\n      }\n    },\n    computedPrice() {\n      if(this.product.price.discount_type===1) {\n        return this.product.price.price - this.product.price.discount_price;\n      }\n      else if(this.product.price.discount_type===0) {\n        return this.product.price.price * (1 - (this.product.price.discount_rate / 100));\n      }\n    },\n    deliveryCharge() {\n      let delivery = this.product.price.delivery_price;\n      let type = delivery.delivery_type;\n      let result = ''\n      switch (type) {\n        // 고정배송비\n        case 0:\n          result = `<div>${delivery.fix_price}원</div>`;\n          break;\n        // 배송비 무료\n        case 1:\n          result = '<div>배송비 무료</div>';\n          break;\n        // 금액별 배송비\n        case 2:\n          let arr_price_charge = delivery.delivery_price_setting.sort((a,b) => {return a.min<b.min ? -1 : a.min>b.min ? 1 : 0})\n          let str_price_charge = '';\n          for(let i=0; i<arr_price_charge.length; i++) {\n            let item = arr_price_charge[i];\n            let price_price_charge = 0;\n            if (item.price!==undefined) price_price_charge = item.price;\n            else if (item.parcel_price!==undefined) price_price_charge = item.parcel_price;\n            if (i===arr_price_charge.length-1) {\n              str_price_charge += `<div>${item.min}원 이상 ~ <b>${price_price_charge}원</b></div>`;\n            }\n            else {\n              str_price_charge += `<div>${item.min}원 이상 ${item.max}원 미만 <b>${price_price_charge}원</b></div>`;\n            }\n          }\n          result = str_price_charge;\n          break;\n        // 수량별 배송비\n        case 3:\n          let arr_quantity_charge = delivery.delivery_price_setting.sort((a,b) => {return a.min<b.min ? -1 : a.min>b.min ? 1 : 0})\n          let str_quantity_charge = '';\n          for(let i=0; i<arr_quantity_charge.length; i++) {\n            let item = arr_quantity_charge[i];\n            let price_quantity_charge = 0;\n            if (item.price!==undefined) price_quantity_charge = item.price;\n            else if (item.parcel_price!==undefined) price_quantity_charge = item.parcel_price;\n            if (i===arr_quantity_charge.length-1) {\n              str_quantity_charge += `<div>${item.min}개 이상 ~ <b>${price_quantity_charge}원</b></div>`;\n            }\n            else {\n              str_quantity_charge += `<div>${item.min}개 이상 ${item.max}개 미만 <b>${price_quantity_charge}원</b></div>`;\n            }\n          }\n          result = str_quantity_charge;\n          break;\n      }\n      return result;\n    },\n    // 속성 옵션\n    optionArr1() {\n      let options = this.selectorStocks.filter(item=> {\n        return item.option_type===0;\n      })\n      return options;\n    },\n    // 속성 옵션\n    optionArr2() {\n      let options = this.selectorStocks.filter(item=> {\n        return item.option_type===1;\n      })\n      return options;\n    },\n    totalPrice() {\n      // console.log('전체 ',this.order_product)\n      let totalPrice = 0;\n      if(!this.order_product) return 0\n      if(this.product.enable_option) {\n        this.order_product.order_product_option.forEach(item=> {\n          let op = find(this.selectorStocks, 'id', item.option_id);\n          if(op!==undefined) {\n            // 속성 옵션\n            if(op.option_type===0) {\n              totalPrice += (this.discountedPrice + op.price) * parseInt(item.quantity)\n            }\n            else totalPrice += op.price * parseInt(item.quantity)\n          }\n        })\n      }\n      else {\n        totalPrice =this.discountedPrice * this.order_product.quantity;\n      }\n      return totalPrice;\n    },\n    discountedPrice() {\n      if(this.product.price.is_discount){\n\n        if (this.product.price.discount_rate!==0 && this.product.price.discount_type===0) {\n          let discountedPrice = this.product.price.price * (1 - (this.product.price.discount_rate / 100))\n          return discountedPrice;\n        }\n        else if(this.product.price.discount_price!==0 && this.product.price.discount_type===1) {\n          return this.product.price.price - this.product.price.discount_price;\n        }}\n      else return this.product.price.price;\n    }\n  },\n  methods: {\n    // 배송유형이 있을 경우 초기화 작업\n    initializeDeliveryMethod() {\n      let names = [\n        { label: 'parcel', value: '택배' },\n        { label: 'post', value: '등기 / 소포' },\n        { label: 'cargo', value: '화물배송' },\n        { label: 'visit', value: '방문수령' },\n        { label: 'quick', value: '퀵배송' }\n      ]\n      // 배송 유형\n      let items = this.product.price.delivery_price.delivery_method;\n      if(items.length>1) {\n        let arr = [];\n        items.forEach(item=> {\n          arr.push({ label: find(names, 'label', item).value, value: item })\n        })\n        this.deliveryMethodArr = arr;\n      }\n      else {\n        if(items.length===1) {\n          this.deliveryMethodArr = [\n            { label: find(names, 'label', items[0]).value, value: items[0] }\n          ]\n        }\n      }\n      if(items.length>0) this.selectedDeliveryMethod = items[0]\n    },\n    deleteOrderProduct(idx) {\n      this.order_product.order_product_option.remove(idx);\n    },\n    //상품 선택\n    selectProduct() {\n      let comm_price = 0;\n      let point_price = 0;\n      let discount_price = 0;\n      let price = this.product.price;\n      let product_price = price.price;\n\n      // 속성 옵션일 경우 상품가격 + 옵션가\n      // 0: 비율, 1: 금액\n      // 수수료, 포인트, 할인 계산\n      if(price.is_point) {\n        if(price.point_type===0) point_price = product_price * price.point_rate / 100;\n        else point_price = price.point;\n      }\n      if(price.is_discount) {\n        if(price.discount_type===0) discount_price = product_price * price.discount_rate / 100;\n        else discount_price = price.discount_price;\n      }\n      if(price.is_comm) {\n        if(price.comm_type===0) comm_price = product_price * price.comm_rate / 100;\n        else comm_price = price.comm_price;\n      }\n\n      this.order_product.comm_price = comm_price;\n      this.order_product.point = point_price;\n      this.order_product.discount_price = discount_price;\n      this.order_product.product_price = product_price;\n      console.log('product_price', product_price)\n      this.order_product.total_price = product_price - discount_price;\n    },\n    // 옵션 가져오기\n    getSelectorStocks() {\n      if(this.product.id) {\n        this.$axios.post(`public/product/${this.product.id}/selector_stocks`)\n          .then( res => {\n            this.selectorStocks = res.data.stocks;\n            this.order_product.selectorStocks = res.data.stocks;\n          });\n      }\n    },\n    // 상품옵션 선택\n    selectOption(value) {\n      // order_product 중복 체크 후(option id체크) 있을 경우 종료\n      let op = find(this.order_product.order_product_option, 'option_id', value);\n      if(op) return;\n\n      let total_price = 0;\n      let comm_price = 0;\n      let point_price = 0;\n      let discount_price = 0;\n      let price = this.product.price;\n\n      this.selectorStocks.forEach(selector=> {\n        if(selector.id===value) {\n          // console.log('옵션가',selector.price);\n          // console.log('상품가',price.price);\n          // 속성 옵션일 경우 상품가격 + 옵션가\n          if(selector.option_type===0) total_price = selector.price + price.price;\n          else total_price = selector.price;\n          // 0: 비율, 1: 금액\n          // 수수료, 포인트, 할인 계산\n          if(price.point_type===0) point_price = total_price * price.point_rate / 100;\n          else point_price = price.point;\n          if(price.discount_type===0) discount_price = total_price * price.discount_rate / 100;\n          else discount_price = price.discount_price;\n          if(price.comm_type===0) comm_price = total_price * price.comm_rate / 100;\n          else comm_price = price.comm_price;\n\n          let order_product_option = {\n            option_id: selector.id,\n            quantity: 1\n          }\n\n          this.order_product.order_product_option.push(order_product_option);\n          // console.log('확인', this.order_product);\n        }\n      })\n\n    },\n    // 주문하기\n    clickOrder() {\n      // 회원정보 유무 체크\n      let user = this.$store.getters.user;\n      //console.log('회원유무', user)\n      // if(user.user_id===0) {\n      //   this.toast('로그인후 결제하시기 바랍니다.');\n      //   return;\n      // }\n      // 속성옵션 필수값 체크\n      if(this.product.enable_option) {\n        if(this.order_product.order_product_option.length===0) {\n          this.toast('주문할 상품을 선택해주세요.');\n          return;\n        }\n\n        let isOptionType0 = false;\n        this.order_product.order_product_option.some(op=> {\n          let ss = find(this.selectorStocks, 'id', op.option_id);\n          // 속성옵션 0, 추가옵션 1\n          if(ss.option_type===0) isOptionType0 = true;\n          return (ss.option_type===0)\n        })\n        if(!isOptionType0) {\n          this.toast('상품 속성 옵션을 선택해주세요.');\n          return;\n        }\n      }\n\n      // 선택된 배송유형\n      let order_product = this.cloneItem(this.order_product);\n      order_product.delivery_method = this.selectedDeliveryMethod;\n      let order = order_product;\n      order.uid = this.uuidv4();\n      this.$store.commit('setOrder', [order]);\n      this.$router.push('order');\n    },\n    detectClientHeight() {\n      this.$nextTick(function() {\n        if(this.$refs.cardHeight) {\n          if (document.documentElement.scrollTop > this.$refs.cardHeight.clientHeight) {\n            this.fixedState = true;\n            this.$emit('fixedState', true);\n          }\n          else {\n            this.fixedState = false;\n            this.$emit('fixedState', false);\n          }\n        }\n      })\n    },\n    // 장바구니 넣기\n    clickCart() {\n      if(this.product.enable_option) {\n        if(this.order_product.order_product_option.length===0) {\n          this.toast('옵션을 선택하세요');\n          return;\n        }\n      }\n      let order_product = this.cloneItem(this.order_product);\n      // 선택된 배송유형\n      order_product.delivery_method = this.selectedDeliveryMethod;\n      let cart = order_product;\n      cart.uid = this.uuidv4();\n      this.$store.commit('setConcatCart', [cart]);\n      this.toast('장바구니에 담았습니다.');\n      this.$router.push('cart');\n    },\n    optionType(selectorStocks, option_id) {\n      if(!selectorStocks) return;\n      let stock = find(selectorStocks, 'id', option_id);\n      if (stock) return stock.option_type;\n    },\n    optionName(selectorStocks, option_id) {\n      if(!selectorStocks) return;\n      let stock = find(selectorStocks, 'id', option_id);\n      if (stock) return stock.price > 0 ? `${stock.name}: +${stock.price}원` : `${stock.name}: ${stock.price}원`;\n    },\n    optionPrice(selectorStocks, option_id) {\n      if(!selectorStocks) return;\n      let stock = find(selectorStocks, 'id', option_id);\n      if (stock) return stock.price;\n    },\n  }\n}\n",{"version":3,"sources":["BtnDelivery.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BtnDelivery.vue","sourceRoot":"src/components/Components/Button","sourcesContent":["<template>\r\n  <div v-if=\"product\" ref=\"cardHeight\">\r\n    <div class=\"full-width\"\r\n         :style=\"[\r\n          brandColor.main,\r\n          pagePadding,\r\n          {borderTop: brandBorder.main.border},\r\n          {borderBottom: brandBorder.main.border}\r\n        ]\"\r\n         style=\"padding-top:12px; padding-bottom:12px;\">\r\n      <div class=\"size-14 weight-500\">배송정보</div>\r\n      <div class=\"size-12\">\r\n        <div v-html=\"deliveryCharge\" :style=\"brandColor.primary\"></div>\r\n        <div v-if=\"product.common_info.delivery_info\" v-html=\"product.common_info.delivery_info\"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 주문 버튼 -->\r\n    <div>\r\n      <!-- 옵션 사용 -->\r\n      <div v-if=\"product.enable_option\" style=\"margin-top:20px\" :style=\"pagePadding\">\r\n        <c-input-dropdown\r\n            :style=\"brandBgColor.sub\"\r\n            :options=\"optionArr1\"\r\n            margin-top=\"0\"\r\n            @update:value=\"selectOption\"\r\n            :containerCustomStyle=\"optionDropdownStyle.container\"\r\n            :dropdownCustomStyle=\"optionDropdownStyle.dropdown\"\r\n            placeholder=\"필수 옵션 선택\"\r\n            label=\"옵션선택(필수)\"\r\n            :labelCustomStyle=\"optionDropdownStyle.label\"></c-input-dropdown>\r\n        <div v-if=\"optionArr2.length>0\" style=\"margin-bottom:16px\" :style=\"pagePadding\">\r\n          <c-input-dropdown\r\n              :style=\"brandBgColor.sub\"\r\n              :options=\"optionArr2\"\r\n              margin-top=\"0\"\r\n              @update:value=\"selectOption\"\r\n              :containerCustomStyle=\"optionDropdownStyle.container\"\r\n              :dropdownCustomStyle=\"optionDropdownStyle.dropdown\"\r\n              placeholder=\"추가 옵션 선택\"\r\n              label=\"추가선택\"\r\n              :labelCustomStyle=\"optionDropdownStyle.label\"></c-input-dropdown>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <!--이름 수량 가격-->\r\n      <div\r\n          v-if=\"order_product!==undefined && product.enable_option\"\r\n          v-for=\"(op, idx) in order_product.order_product_option\" :key=\"'op-'+idx\"\r\n          class=\" size-12\"\r\n          :style=\"[brandColor.sub, {backgroundColor: '#f8f8f8'}, brandBorder.main, radius, selectorStockStyle]\"\r\n          style=\"padding:12px; margin-bottom:12px;\">\r\n        <div class=\"flex-between\">\r\n          <div>\r\n            <div class=\"flex\">\r\n              <div v-if=\"optionType(selectorStocks, op.option_id)===0\" style=\"min-width:53px;\">[기본옵션]</div>\r\n              <div v-if=\"optionType(selectorStocks, op.option_id)===1\" style=\"min-width:53px;\">[추가옵션]</div>\r\n              <div style=\"margin-left:4px\">{{ optionName(selectorStocks, op.option_id) }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"flex-between\">\r\n          <div>\r\n            <div style=\"margin-top:8px\">\r\n              <quantity-input :value.sync=\"op.quantity\" :disabled=\"true\" :inputStyle=\"optionQuantityStyle.input\"\r\n                              :btnMinusStyle=\"optionQuantityStyle.btn\" :btnPlusStyle=\"optionQuantityStyle.btn\"></quantity-input>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"flex-end\">\r\n            <div class=\"size-16 weight-700\" :style=\"brandColor.main\">\r\n              {{ optionPrice(selectorStocks, op.option_id) * op.quantity | currency }}\r\n            </div>\r\n            <div class=\"option-delete-icon unselect\" :style=\"brandBgColor.brand\">\r\n              <i v-if=\"op.option_id\" class=\"material-icons size-16\"\r\n                 :style=\"brandColor.white\" @click=\"deleteOrderProduct(idx)\">close</i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n      <!--자체상품 (옵션 없을 경우)-->\r\n      <div v-if=\"order_product!==undefined && !product.enable_option\">\r\n        <div class=\"flex-between size-12\"\r\n             :style=\"[brandColor.sub, brandBgColor.white, pagePadding]\"\r\n             style=\"padding: 14px 0;\">\r\n          <div class=\"size-14 weight-500\" :style=\"brandColor.main\">수량</div>\r\n          <quantity-input :value.sync=\"order_product.quantity\" :disabled=\"true\" :inputStyle=\"optionQuantityStyle.input\"\r\n                          :btnMinusStyle=\"optionQuantityStyle.btn\" :btnPlusStyle=\"optionQuantityStyle.btn\"></quantity-input>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <div :style=\"[pagePadding, {borderTop: brandBorder.main.border}]\" style=\"padding-top: 16px\">\r\n        <div class=\"flex-between full-width\" :style=\"brandColor.main\"\r\n          style=\"margin-bottom:22px\">\r\n          <div class=\"size-14 weight-500\">상품 총액</div>\r\n          <div class=\"size-18 weight-700\">{{ totalPrice | currency }}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"$store.getters.device === 'mobile'\"\r\n        class=\"flex-between\" :style=\"pagePadding\">\r\n        <btn style=\"flex:1\"\r\n            @clicked=\"clickOrder\"\r\n            :customStyle=\"customStyle\"\r\n            :color=\"brandColor.white\"\r\n            :backgroundColor=\"brandBgColor.brand\"\r\n            :ga=\"ga\">{{ name }}</btn>\r\n        <i class=\"material-icons flex-center\" @click=\"clickCart\" :style=\"[brandBgColor.sub, brandColor.main]\"\r\n           style=\"margin:0 8px;width: 48px; height: 48px; border-radius: 8px;\">shopping_cart</i>\r\n        <icon-circle-share @share=\"$refs.share.share=true\" :style=\"brandBgColor.sub\" color=\"main\"></icon-circle-share>\r\n\r\n      </div>\r\n\r\n      <div v-else class=\"flex-between\" :style=\"pagePadding\">\r\n        <btn style=\"flex:1\"\r\n          @clicked=\"clickOrder\"\r\n          :customStyle=\"customStyle\"\r\n          :color=\"brandColor.white\"\r\n          :backgroundColor=\"brandBgColor.brand\"\r\n          :ga=\"ga\">{{ name }}</btn>\r\n        <div class=\"unselect size-14 bold flex-justify\" @click=\"clickCart\"\r\n          :style=\"[brandBgColor.white, brandColor.primary, {border: `1px solid ${brandColor.primary.color}`}]\"\r\n          style=\"margin: 0 8px; width: 108px; height: 48px; border-radius: 8px; align-items: center\">장바구니</div>\r\n        <icon-circle-like likeType=\"product\" :style=\"brandBgColor.sub\"></icon-circle-like>\r\n        <!-- <i class=\"material-icons flex-center\" @click=\"clickCart\" :style=\"[brandBgColor.sub, brandColor.main]\"\r\n           style=\"margin:0 8px;width: 48px; height: 48px; border-radius: 8px;\">shopping_cart</i> -->\r\n        <!-- <icon-circle-share @share=\"$refs.share.share=true\" :style=\"brandBgColor.sub\" color=\"main\"></icon-circle-share> -->\r\n\r\n      </div>\r\n\r\n    </div>\r\n    <!-- 주문 버튼 END -->\r\n    <share ref=\"share\" v-if=\"product\" :product=\"product\"></share>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    components: {},\r\n    name: \"btn-delivery\",\r\n    props: {\r\n      product: {\r\n        type: Object,\r\n        required: true\r\n      },\r\n      name: {\r\n        type: String,\r\n        default: '주문하기'\r\n      },\r\n      customStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      // Google Analytics 세팅할 경우\r\n      ga: {\r\n        type: Object,\r\n        required: false\r\n      }\r\n    },\r\n    data () {\r\n      return {\r\n        fixedState: false,\r\n        showOption: false,\r\n        order_product: undefined,\r\n        selectorStocks: [],\r\n        deliveryMethodArr: [],\r\n        selectedDeliveryMethod: \"\"\r\n      }\r\n    },\r\n    created () {\r\n      this.order_product = {\r\n        product_id: this.product.id,\r\n        name: this.product.name,\r\n        quantity: 1,\r\n        comm_price: 0,\r\n        point: 0,\r\n        discount_price: 0,\r\n        total_price: 0,\r\n        img: this.product.img,\r\n        delivery_price: this.product.price.delivery_price,\r\n        order_product_option: [],\r\n        product: this.product,\r\n      }\r\n      // 옵션 사용할 경우\r\n      if(this.product.enable_option) this.getSelectorStocks();\r\n      // 자체 상품일 경우\r\n      else this.selectProduct();\r\n\r\n      this.initializeDeliveryMethod();\r\n\r\n\r\n      this.detectClientHeight();\r\n    },\r\n    updated() {\r\n      this.detectClientHeight();\r\n    },\r\n    computed: {\r\n      selectorStockStyle() {\r\n        if (this.$store.getters.device === 'mobile') {\r\n          return {\r\n            marginLeft: '16px',\r\n            marginRight: '16px'\r\n          }\r\n        }\r\n      },\r\n      quanStyle() {\r\n        return {\r\n          borderBottom: `1px solid ${this.getColor('기본 테두리선 색상')}`\r\n        }\r\n      },\r\n      optionDropdownStyle() {\r\n        return {\r\n          container: {\r\n            margin: '0 0 8px 0'\r\n          },\r\n          dropdown: {\r\n            backgroundColor: this.brandBgColor.sub,\r\n            color: this.brandColor.main.color,\r\n            height: '32px',\r\n            padding: '12px',\r\n            fontSize: '12px',\r\n            borderRadius: '4px'\r\n          },\r\n          label: {\r\n            backgroundColor: this.brandBgColor.white.backgroundColor,\r\n            fontSize: '14px',\r\n            fontWeight: 500,\r\n            color: this.brandColor.main.color,\r\n            paddingBottom: '4px'\r\n          }\r\n        }\r\n      },\r\n      optionQuantityStyle() {\r\n        return {\r\n          input: {\r\n            width: '48px',\r\n            height: '24px',\r\n            backgroundColor: '',\r\n            border: 'none',\r\n            textAlign: 'center',\r\n            fontSize: '14px',\r\n            color: this.brandColor.main.color,\r\n            fontWeight: '700',\r\n            fontFamily: 'Noto Sans CJK KR'\r\n          },\r\n          btn: {\r\n            backgroundColor: this.brandBgColor.sub.backgroundColor,\r\n            color: this.brandColor.main.color,\r\n            borderRadius: '4px',\r\n            width: '24px',\r\n            height: '24px',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            fontSize: '16px'\r\n          }\r\n        }\r\n      },\r\n      imgStyle() {\r\n        return {\r\n          width: '100%',\r\n          height: '256px',\r\n          backgroundSize: 'cover',\r\n          backgroundRepeat: 'no-repeat',\r\n          backgroundPosition: 'center',\r\n          backgroundImage: `url(\"${this.product.img}\")`\r\n        }\r\n      },\r\n      arrowLeftStyle() {\r\n        return {\r\n          top: 'calc(50% - 20px)',\r\n          color: 'white',\r\n          left: '12px',\r\n          fontSize: '40px',\r\n        }\r\n      },\r\n      arrowRightStyle() {\r\n        return {\r\n          top: 'calc(50% - 20px)',\r\n          color: 'white',\r\n          right: '12px',\r\n          fontSize: '40px',\r\n        }\r\n      },\r\n      computedPrice() {\r\n        if(this.product.price.discount_type===1) {\r\n          return this.product.price.price - this.product.price.discount_price;\r\n        }\r\n        else if(this.product.price.discount_type===0) {\r\n          return this.product.price.price * (1 - (this.product.price.discount_rate / 100));\r\n        }\r\n      },\r\n      deliveryCharge() {\r\n        let delivery = this.product.price.delivery_price;\r\n        let type = delivery.delivery_type;\r\n        let result = ''\r\n        switch (type) {\r\n          // 고정배송비\r\n          case 0:\r\n            result = `<div>${delivery.fix_price}원</div>`;\r\n            break;\r\n          // 배송비 무료\r\n          case 1:\r\n            result = '<div>배송비 무료</div>';\r\n            break;\r\n          // 금액별 배송비\r\n          case 2:\r\n            let arr_price_charge = delivery.delivery_price_setting.sort((a,b) => {return a.min<b.min ? -1 : a.min>b.min ? 1 : 0})\r\n            let str_price_charge = '';\r\n            for(let i=0; i<arr_price_charge.length; i++) {\r\n              let item = arr_price_charge[i];\r\n              let price_price_charge = 0;\r\n              if (item.price!==undefined) price_price_charge = item.price;\r\n              else if (item.parcel_price!==undefined) price_price_charge = item.parcel_price;\r\n              if (i===arr_price_charge.length-1) {\r\n                str_price_charge += `<div>${item.min}원 이상 ~ <b>${price_price_charge}원</b></div>`;\r\n              }\r\n              else {\r\n                str_price_charge += `<div>${item.min}원 이상 ${item.max}원 미만 <b>${price_price_charge}원</b></div>`;\r\n              }\r\n            }\r\n            result = str_price_charge;\r\n            break;\r\n          // 수량별 배송비\r\n          case 3:\r\n            let arr_quantity_charge = delivery.delivery_price_setting.sort((a,b) => {return a.min<b.min ? -1 : a.min>b.min ? 1 : 0})\r\n            let str_quantity_charge = '';\r\n            for(let i=0; i<arr_quantity_charge.length; i++) {\r\n              let item = arr_quantity_charge[i];\r\n              let price_quantity_charge = 0;\r\n              if (item.price!==undefined) price_quantity_charge = item.price;\r\n              else if (item.parcel_price!==undefined) price_quantity_charge = item.parcel_price;\r\n              if (i===arr_quantity_charge.length-1) {\r\n                str_quantity_charge += `<div>${item.min}개 이상 ~ <b>${price_quantity_charge}원</b></div>`;\r\n              }\r\n              else {\r\n                str_quantity_charge += `<div>${item.min}개 이상 ${item.max}개 미만 <b>${price_quantity_charge}원</b></div>`;\r\n              }\r\n            }\r\n            result = str_quantity_charge;\r\n            break;\r\n        }\r\n        return result;\r\n      },\r\n      // 속성 옵션\r\n      optionArr1() {\r\n        let options = this.selectorStocks.filter(item=> {\r\n          return item.option_type===0;\r\n        })\r\n        return options;\r\n      },\r\n      // 속성 옵션\r\n      optionArr2() {\r\n        let options = this.selectorStocks.filter(item=> {\r\n          return item.option_type===1;\r\n        })\r\n        return options;\r\n      },\r\n      totalPrice() {\r\n        // console.log('전체 ',this.order_product)\r\n        let totalPrice = 0;\r\n        if(!this.order_product) return 0\r\n        if(this.product.enable_option) {\r\n          this.order_product.order_product_option.forEach(item=> {\r\n            let op = find(this.selectorStocks, 'id', item.option_id);\r\n            if(op!==undefined) {\r\n              // 속성 옵션\r\n              if(op.option_type===0) {\r\n                totalPrice += (this.discountedPrice + op.price) * parseInt(item.quantity)\r\n              }\r\n              else totalPrice += op.price * parseInt(item.quantity)\r\n            }\r\n          })\r\n        }\r\n        else {\r\n          totalPrice =this.discountedPrice * this.order_product.quantity;\r\n        }\r\n        return totalPrice;\r\n      },\r\n      discountedPrice() {\r\n        if(this.product.price.is_discount){\r\n\r\n          if (this.product.price.discount_rate!==0 && this.product.price.discount_type===0) {\r\n            let discountedPrice = this.product.price.price * (1 - (this.product.price.discount_rate / 100))\r\n            return discountedPrice;\r\n          }\r\n          else if(this.product.price.discount_price!==0 && this.product.price.discount_type===1) {\r\n            return this.product.price.price - this.product.price.discount_price;\r\n          }}\r\n        else return this.product.price.price;\r\n      }\r\n    },\r\n    methods: {\r\n      // 배송유형이 있을 경우 초기화 작업\r\n      initializeDeliveryMethod() {\r\n        let names = [\r\n          { label: 'parcel', value: '택배' },\r\n          { label: 'post', value: '등기 / 소포' },\r\n          { label: 'cargo', value: '화물배송' },\r\n          { label: 'visit', value: '방문수령' },\r\n          { label: 'quick', value: '퀵배송' }\r\n        ]\r\n        // 배송 유형\r\n        let items = this.product.price.delivery_price.delivery_method;\r\n        if(items.length>1) {\r\n          let arr = [];\r\n          items.forEach(item=> {\r\n            arr.push({ label: find(names, 'label', item).value, value: item })\r\n          })\r\n          this.deliveryMethodArr = arr;\r\n        }\r\n        else {\r\n          if(items.length===1) {\r\n            this.deliveryMethodArr = [\r\n              { label: find(names, 'label', items[0]).value, value: items[0] }\r\n            ]\r\n          }\r\n        }\r\n        if(items.length>0) this.selectedDeliveryMethod = items[0]\r\n      },\r\n      deleteOrderProduct(idx) {\r\n        this.order_product.order_product_option.remove(idx);\r\n      },\r\n      //상품 선택\r\n      selectProduct() {\r\n        let comm_price = 0;\r\n        let point_price = 0;\r\n        let discount_price = 0;\r\n        let price = this.product.price;\r\n        let product_price = price.price;\r\n\r\n        // 속성 옵션일 경우 상품가격 + 옵션가\r\n        // 0: 비율, 1: 금액\r\n        // 수수료, 포인트, 할인 계산\r\n        if(price.is_point) {\r\n          if(price.point_type===0) point_price = product_price * price.point_rate / 100;\r\n          else point_price = price.point;\r\n        }\r\n        if(price.is_discount) {\r\n          if(price.discount_type===0) discount_price = product_price * price.discount_rate / 100;\r\n          else discount_price = price.discount_price;\r\n        }\r\n        if(price.is_comm) {\r\n          if(price.comm_type===0) comm_price = product_price * price.comm_rate / 100;\r\n          else comm_price = price.comm_price;\r\n        }\r\n\r\n        this.order_product.comm_price = comm_price;\r\n        this.order_product.point = point_price;\r\n        this.order_product.discount_price = discount_price;\r\n        this.order_product.product_price = product_price;\r\n        console.log('product_price', product_price)\r\n        this.order_product.total_price = product_price - discount_price;\r\n      },\r\n      // 옵션 가져오기\r\n      getSelectorStocks() {\r\n        if(this.product.id) {\r\n          this.$axios.post(`public/product/${this.product.id}/selector_stocks`)\r\n            .then( res => {\r\n              this.selectorStocks = res.data.stocks;\r\n              this.order_product.selectorStocks = res.data.stocks;\r\n            });\r\n        }\r\n      },\r\n      // 상품옵션 선택\r\n      selectOption(value) {\r\n        // order_product 중복 체크 후(option id체크) 있을 경우 종료\r\n        let op = find(this.order_product.order_product_option, 'option_id', value);\r\n        if(op) return;\r\n\r\n        let total_price = 0;\r\n        let comm_price = 0;\r\n        let point_price = 0;\r\n        let discount_price = 0;\r\n        let price = this.product.price;\r\n\r\n        this.selectorStocks.forEach(selector=> {\r\n          if(selector.id===value) {\r\n            // console.log('옵션가',selector.price);\r\n            // console.log('상품가',price.price);\r\n            // 속성 옵션일 경우 상품가격 + 옵션가\r\n            if(selector.option_type===0) total_price = selector.price + price.price;\r\n            else total_price = selector.price;\r\n            // 0: 비율, 1: 금액\r\n            // 수수료, 포인트, 할인 계산\r\n            if(price.point_type===0) point_price = total_price * price.point_rate / 100;\r\n            else point_price = price.point;\r\n            if(price.discount_type===0) discount_price = total_price * price.discount_rate / 100;\r\n            else discount_price = price.discount_price;\r\n            if(price.comm_type===0) comm_price = total_price * price.comm_rate / 100;\r\n            else comm_price = price.comm_price;\r\n\r\n            let order_product_option = {\r\n              option_id: selector.id,\r\n              quantity: 1\r\n            }\r\n\r\n            this.order_product.order_product_option.push(order_product_option);\r\n            // console.log('확인', this.order_product);\r\n          }\r\n        })\r\n\r\n      },\r\n      // 주문하기\r\n      clickOrder() {\r\n        // 회원정보 유무 체크\r\n        let user = this.$store.getters.user;\r\n        //console.log('회원유무', user)\r\n        // if(user.user_id===0) {\r\n        //   this.toast('로그인후 결제하시기 바랍니다.');\r\n        //   return;\r\n        // }\r\n        // 속성옵션 필수값 체크\r\n        if(this.product.enable_option) {\r\n          if(this.order_product.order_product_option.length===0) {\r\n            this.toast('주문할 상품을 선택해주세요.');\r\n            return;\r\n          }\r\n\r\n          let isOptionType0 = false;\r\n          this.order_product.order_product_option.some(op=> {\r\n            let ss = find(this.selectorStocks, 'id', op.option_id);\r\n            // 속성옵션 0, 추가옵션 1\r\n            if(ss.option_type===0) isOptionType0 = true;\r\n            return (ss.option_type===0)\r\n          })\r\n          if(!isOptionType0) {\r\n            this.toast('상품 속성 옵션을 선택해주세요.');\r\n            return;\r\n          }\r\n        }\r\n\r\n        // 선택된 배송유형\r\n        let order_product = this.cloneItem(this.order_product);\r\n        order_product.delivery_method = this.selectedDeliveryMethod;\r\n        let order = order_product;\r\n        order.uid = this.uuidv4();\r\n        this.$store.commit('setOrder', [order]);\r\n        this.$router.push('order');\r\n      },\r\n      detectClientHeight() {\r\n        this.$nextTick(function() {\r\n          if(this.$refs.cardHeight) {\r\n            if (document.documentElement.scrollTop > this.$refs.cardHeight.clientHeight) {\r\n              this.fixedState = true;\r\n              this.$emit('fixedState', true);\r\n            }\r\n            else {\r\n              this.fixedState = false;\r\n              this.$emit('fixedState', false);\r\n            }\r\n          }\r\n        })\r\n      },\r\n      // 장바구니 넣기\r\n      clickCart() {\r\n        if(this.product.enable_option) {\r\n          if(this.order_product.order_product_option.length===0) {\r\n            this.toast('옵션을 선택하세요');\r\n            return;\r\n          }\r\n        }\r\n        let order_product = this.cloneItem(this.order_product);\r\n        // 선택된 배송유형\r\n        order_product.delivery_method = this.selectedDeliveryMethod;\r\n        let cart = order_product;\r\n        cart.uid = this.uuidv4();\r\n        this.$store.commit('setConcatCart', [cart]);\r\n        this.toast('장바구니에 담았습니다.');\r\n        this.$router.push('cart');\r\n      },\r\n      optionType(selectorStocks, option_id) {\r\n        if(!selectorStocks) return;\r\n        let stock = find(selectorStocks, 'id', option_id);\r\n        if (stock) return stock.option_type;\r\n      },\r\n      optionName(selectorStocks, option_id) {\r\n        if(!selectorStocks) return;\r\n        let stock = find(selectorStocks, 'id', option_id);\r\n        if (stock) return stock.price > 0 ? `${stock.name}: +${stock.price}원` : `${stock.name}: ${stock.price}원`;\r\n      },\r\n      optionPrice(selectorStocks, option_id) {\r\n        if(!selectorStocks) return;\r\n        let stock = find(selectorStocks, 'id', option_id);\r\n        if (stock) return stock.price;\r\n      },\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .option-modal-wrap {\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    background: rgba(0,0,0,0.5);\r\n    z-index: 999;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    align-items: flex-end;\r\n  }\r\n  .option-modal {\r\n    width: 100%;\r\n    height: 375px;\r\n    overflow-y: scroll;\r\n    background-color: #fff;\r\n  }\r\n  .option-delete-icon {\r\n    border-radius: 4px;\r\n    width: 24px;\r\n    height: 24px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-left: 8px;\r\n  }\r\n  .divider {\r\n    width: 100%;\r\n    height: 1px;\r\n    margin: 16px 0;\r\n  }\r\n</style>"]}]}