{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputColor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputColor.vue","mtime":1605259986000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FormMixin from \"@/components/Mixins/FormMixin\";\nexport default {\n  name: 'CInputColor',\n  mixins: [\n    FormMixin\n  ],\n  props: {\n    options: {\n      type: Array,\n      required: true\n    },\n    value: {\n      type: Array,\n      required: false\n    },\n    label: {\n      type: String,\n      required: false\n    },\n    customColorShape: {\n      type: Object,\n      required: false\n    },\n    customColorWrapperStyle: {\n      type: Object,\n      required: false\n    },\n    // 'full'스타일 일 경우\n    // column, gutter(px)\n    radioButtonFull: {\n      type: Object,\n      required: false\n    }\n  },\n  data() {\n    return {\n      align: 'left',\n      selectedValue: []\n    }\n  },\n  computed: {\n    colorWrapperStyle() {\n      let deco = {\n        marginRight: '8px'\n      }\n      if (this.customColorWrapperStyle) {\n        deco = this.customColorWrapperStyle;\n      }\n      return deco;\n    },\n    columnStyle() {\n      if (this.radioButtonFull && this.radioButtonFull.col!==undefined) {\n        return `col-${this.radioButtonFull.col}`;\n      }\n      else return 'col-6';\n    },\n    colorShape() {\n      let deco = {\n        width: '32px',\n        height: '32px',\n        borderRadius: '16px',\n      }\n      if (this.customColorShape) {\n        deco = this.customColorShape;\n      }\n      deco.border = this.brandBorder.main.border;\n      return deco;\n    }\n  },\n  created() {\n    if (this.value===undefined) this.selectedValue = [];\n    else this.selectedValue = this.value;\n  },\n  watch: {\n    value(n) {\n      if (this.value===undefined) this.selectedValue = [];\n      else this.selectedValue = this.value;\n    },\n    selectedValue(n) {\n      this.$emit('update:value', n);\n    }\n  },\n  methods: {\n    checkedStyle(item) {\n      let deco = {\n        fontSize: '20px'\n      }\n      deco.color = this.getTextColorByBgColor(item.color);\n      return deco;\n    },\n    colorStyle(item) {\n      return {\n        backgroundColor: `${item.color}`\n      };\n    },\n    getTextColorByBgColor(hexColor) {\n      let c = hexColor.substring(1); // 색상 앞 # 제거\n      let rgb = parseInt(c, 16) // rrggbb를 10진수로 변환\n      let r = (rgb >> 16 ) & 0xff // red 추출\n      let g = (rgb >> 8) & 0xff; // green 추출\n      let b = (rgb >> 0) & 0xff; // blue 추출\n      let luma = 0.2126 * r + 0.7152 * g + 0.0722 * b; // ITU-R BT.709(16:9 비율 HDTV 색상표준)에 기반한 색상 변환\n      \n      // 글자 색 반환\n      return luma < 127.5 ? this.brandColor.white.color : '#000000';\n    },\n    gutterStyle(idx) {\n      let deco = {};\n      let gutter = '4px';\n      if (this.radioButtonFull && this.radioButtonFull.gutter!==undefined) {\n        gutter = this.radioButtonFull.gutter + 'px';\n      }\n      deco.padding = gutter;\n      let col = 6;\n      if (this.radioButtonFull && this.radioButtonFull.col!=undefined) {\n        col = this.radioButtonFull.col;\n      }\n      let num = 12/col;\n      if (idx % num === 0) deco.paddingLeft = 0;              // 열 첫번째\n      else if (idx % num === (num-1)) deco.paddingRight = 0;  // 열 마지막\n      return deco;\n    },\n    toggleCheck(item) {\n      if (this.selectedValue === '') this.selectedValue = [];\n      if (!this.selectedValue.includes(item['id'])) {\n        this.selectedValue.push(item['id']);\n      }\n      else {\n        let index = this.selectedValue.indexOf(item['id'])\n        if (index >= 0) {\n          this.selectedValue.remove(index);\n        }\n      }\n      this.$emit('changed');\n    },\n    isChecked(item) {\n      if (!this.selectedValue.includes(item['id'])) return false;\n      else return true;\n    },\n    btnStyle(item) {\n        if (this.selectedValue.indexOf(item.id)>-1) {\n          if (this.fullSelectedCustomStyle) return this.fullSelectedCustomStyle;\n        }\n        else {\n          if (this.fullUnselectedCustomStyle) return this.fullUnselectedCustomStyle;\n        }\n\n      let deco = {\n        borderRadius: this.radius.borderRadius,\n        border: this.brandBorder.main.border,\n        color: this.brandColor.sub.color,\n        backgroundColor: this.brandBgColor.sub.backgroundColor,\n        height: '48px',\n        textAlign: 'center',\n        // lineHeight: '48px',\n      };\n      if(this.selectedValue.indexOf(item.id)>-1) {\n        deco.color = this.brandColor.white.color;\n        deco.backgroundColor = this.brandBgColor.brand.backgroundColor;\n      }\n\n      return deco;\n    }\n  }\n}\n",{"version":3,"sources":["CInputColor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"CInputColor.vue","sourceRoot":"src/components/Components/Form","sourcesContent":["<template>\r\n<div :style=\"containerStyle\">\r\n  <!-- 레이블 -->\r\n  <div v-if=\"formType.label && label\" :style=\"labelStyle\">{{ label }}</div>\r\n\r\n  <div class=\"flex wrap\">\r\n    <div class=\"unselect\" v-for=\"(item, idx) in options\" :key=\"'color-checkbox-'+idx\"\r\n      :style=\"colorWrapperStyle\"\r\n      @click=\"toggleCheck(item)\">\r\n      <div class=\"flex-center\" :style=\"[colorShape, colorStyle(item)]\">\r\n        <i v-if=\"isChecked(item)\" :style=\"checkedStyle(item)\" class=\"material-icons\">check</i>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n</template>\r\n<script>\r\n  import FormMixin from \"@/components/Mixins/FormMixin\";\r\n  export default {\r\n    name: 'CInputColor',\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n    props: {\r\n      options: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      value: {\r\n        type: Array,\r\n        required: false\r\n      },\r\n      label: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      customColorShape: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      customColorWrapperStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      // 'full'스타일 일 경우\r\n      // column, gutter(px)\r\n      radioButtonFull: {\r\n        type: Object,\r\n        required: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        align: 'left',\r\n        selectedValue: []\r\n      }\r\n    },\r\n    computed: {\r\n      colorWrapperStyle() {\r\n        let deco = {\r\n          marginRight: '8px'\r\n        }\r\n        if (this.customColorWrapperStyle) {\r\n          deco = this.customColorWrapperStyle;\r\n        }\r\n        return deco;\r\n      },\r\n      columnStyle() {\r\n        if (this.radioButtonFull && this.radioButtonFull.col!==undefined) {\r\n          return `col-${this.radioButtonFull.col}`;\r\n        }\r\n        else return 'col-6';\r\n      },\r\n      colorShape() {\r\n        let deco = {\r\n          width: '32px',\r\n          height: '32px',\r\n          borderRadius: '16px',\r\n        }\r\n        if (this.customColorShape) {\r\n          deco = this.customColorShape;\r\n        }\r\n        deco.border = this.brandBorder.main.border;\r\n        return deco;\r\n      }\r\n    },\r\n    created() {\r\n      if (this.value===undefined) this.selectedValue = [];\r\n      else this.selectedValue = this.value;\r\n    },\r\n    watch: {\r\n      value(n) {\r\n        if (this.value===undefined) this.selectedValue = [];\r\n        else this.selectedValue = this.value;\r\n      },\r\n      selectedValue(n) {\r\n        this.$emit('update:value', n);\r\n      }\r\n    },\r\n    methods: {\r\n      checkedStyle(item) {\r\n        let deco = {\r\n          fontSize: '20px'\r\n        }\r\n        deco.color = this.getTextColorByBgColor(item.color);\r\n        return deco;\r\n      },\r\n      colorStyle(item) {\r\n        return {\r\n          backgroundColor: `${item.color}`\r\n        };\r\n      },\r\n      getTextColorByBgColor(hexColor) {\r\n        let c = hexColor.substring(1); // 색상 앞 # 제거\r\n        let rgb = parseInt(c, 16) // rrggbb를 10진수로 변환\r\n        let r = (rgb >> 16 ) & 0xff // red 추출\r\n        let g = (rgb >> 8) & 0xff; // green 추출\r\n        let b = (rgb >> 0) & 0xff; // blue 추출\r\n        let luma = 0.2126 * r + 0.7152 * g + 0.0722 * b; // ITU-R BT.709(16:9 비율 HDTV 색상표준)에 기반한 색상 변환\r\n        \r\n        // 글자 색 반환\r\n        return luma < 127.5 ? this.brandColor.white.color : '#000000';\r\n      },\r\n      gutterStyle(idx) {\r\n        let deco = {};\r\n        let gutter = '4px';\r\n        if (this.radioButtonFull && this.radioButtonFull.gutter!==undefined) {\r\n          gutter = this.radioButtonFull.gutter + 'px';\r\n        }\r\n        deco.padding = gutter;\r\n        let col = 6;\r\n        if (this.radioButtonFull && this.radioButtonFull.col!=undefined) {\r\n          col = this.radioButtonFull.col;\r\n        }\r\n        let num = 12/col;\r\n        if (idx % num === 0) deco.paddingLeft = 0;              // 열 첫번째\r\n        else if (idx % num === (num-1)) deco.paddingRight = 0;  // 열 마지막\r\n        return deco;\r\n      },\r\n      toggleCheck(item) {\r\n        if (this.selectedValue === '') this.selectedValue = [];\r\n        if (!this.selectedValue.includes(item['id'])) {\r\n          this.selectedValue.push(item['id']);\r\n        }\r\n        else {\r\n          let index = this.selectedValue.indexOf(item['id'])\r\n          if (index >= 0) {\r\n            this.selectedValue.remove(index);\r\n          }\r\n        }\r\n        this.$emit('changed');\r\n      },\r\n      isChecked(item) {\r\n        if (!this.selectedValue.includes(item['id'])) return false;\r\n        else return true;\r\n      },\r\n      btnStyle(item) {\r\n          if (this.selectedValue.indexOf(item.id)>-1) {\r\n            if (this.fullSelectedCustomStyle) return this.fullSelectedCustomStyle;\r\n          }\r\n          else {\r\n            if (this.fullUnselectedCustomStyle) return this.fullUnselectedCustomStyle;\r\n          }\r\n\r\n        let deco = {\r\n          borderRadius: this.radius.borderRadius,\r\n          border: this.brandBorder.main.border,\r\n          color: this.brandColor.sub.color,\r\n          backgroundColor: this.brandBgColor.sub.backgroundColor,\r\n          height: '48px',\r\n          textAlign: 'center',\r\n          // lineHeight: '48px',\r\n        };\r\n        if(this.selectedValue.indexOf(item.id)>-1) {\r\n          deco.color = this.brandColor.white.color;\r\n          deco.backgroundColor = this.brandBgColor.brand.backgroundColor;\r\n        }\r\n\r\n        return deco;\r\n      }\r\n    }\r\n  }\r\n</script>\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n\r\n</style>"]}]}