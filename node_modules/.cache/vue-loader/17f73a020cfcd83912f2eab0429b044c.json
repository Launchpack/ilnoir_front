{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/components/Components/Common/TimePicker.vue?vue&type=style&index=0&id=6731fad6&lang=stylus&scoped=true&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Components/Common/TimePicker.vue","mtime":1605259985000},{"path":"/Users/mard/dev/ilnoir/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n@import '~assets/css/lp_main';\r\n\r\n.time-picker-container {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\r\n  border-radius: 8px;\r\n  border: 1px solid #dfdfdf;\r\n  padding-left: 8px !important;\r\n  background: white;\r\n  color: #9b9b9b;\r\n  min-width: 99px;\r\n  min-height: 32px;\r\n}\r\n\r\n.icon-alarm {\r\n  // position: absolute;\r\n  // top: 5px;\r\n  // right: 4px;\r\n  margin-right: 7px;\r\n  // color: #989898;\r\n  font-size: 18px;\r\n}\r\n\r\n.time-picker-select {\r\n  position: absolute;\r\n  top: 29px;\r\n  left: 0;\r\n  background: white;\r\n  z-index: 1000;\r\n  border: 1px solid #ddd;\r\n  width: 200px;\r\n  display: flex;\r\n}\r\n\r\n.item {\r\n  text-align: center;\r\n  padding: 4px;\r\n  height: 30px;\r\n  color: #707070;\r\n}\r\n\r\n.item:hover, .selected {\r\n  background-color: $primary;\r\n  color: white;\r\n}\r\n\r\n.time-list {\r\n  overflow-y: scroll;\r\n  height: 240px;\r\n  width: 50%;\r\n}\r\n\r\n.disabled {\r\n  color: #d8d8d8;\r\n}\r\n\r\n.lp-outsider-layout {\r\n  position: fixed;\r\n  z-index: 10;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n}\r\n",{"version":3,"sources":["TimePicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TimePicker.vue","sourceRoot":"src/components/Components/Common","sourcesContent":["<template>\r\n  <div class=\"time-picker-container\" :style=\"containerStyle\" @click=\"clickContainer\">\r\n    <div>{{ timeValue }}</div>\r\n    <div class=\"lp-outsider-layout\" v-if=\"vSelect\" @click.stop.prevent=\"vSelect=false\"></div>\r\n    <i class=\"material-icons icon-alarm\" :style=\"iconStyle\">alarm</i>\r\n\r\n    <!-- 시작 선택 -->\r\n    <div class=\"time-picker-select\" v-if=\"vSelect\" @click.stop.prevent>\r\n      <div class=\"time-list\" id=\"hour-list\">\r\n        <div\r\n          v-for=\"hour in hours\"\r\n          :key=\"'hour-'+hour\"\r\n          :class=\"{'selected': hour === selectedTime.hour}\"\r\n          class=\"item unselect\"\r\n          @click=\"clickHour(hour)\"\r\n        >{{ '%02d'.format(hour) }}</div>\r\n      </div>\r\n      <div class=\"time-list\" id=\"min-list\">\r\n        <div\r\n          v-for=\"minute in minutes\"\r\n          :key=\"'minute-'+minute.min\"\r\n          :class=\"{'disabled' : minute.disabled, 'selected': (minute === selectedTime.min || minute.min === selectedTime.min)}\"\r\n          class=\"item unselect\"\r\n          @click=\"clickMinute(minute)\"\r\n        >{{ '%02d'.format(minute.min) }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"TimePicker\",\r\n  props: {\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    width: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: \"시간 선택\"\r\n    },\r\n    value: {\r\n      type: String\r\n    },\r\n    // 시간 단위\r\n    unit: {\r\n      type: Number,\r\n      default: 5\r\n    },\r\n    // 시간 범위 - 시작\r\n    start: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          hour: 0,\r\n          min: 0\r\n        };\r\n      }\r\n    },\r\n    // 시간 범위 - 종료\r\n    end: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          hour: 23,\r\n          min: 59\r\n        };\r\n      }\r\n    },\r\n    // 선택 불가능 시간 범위 기능 사용하기\r\n    usingRange: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 선택 불가능 시간 범위\r\n    disableRange: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          start: {\r\n            hour: 13,\r\n            min: 0\r\n          },\r\n          end: {\r\n            hour: 14,\r\n            min: 0\r\n          }\r\n        };\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      vSelect: false,\r\n      hours: [],\r\n      minutes: [],\r\n      selectedTime: {\r\n        hour: -1,\r\n        min: -1\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    containerStyle() {\r\n      let deco = {};\r\n\r\n      if (this.width !== \"\") {\r\n        deco.width = this.width + \"px\";\r\n      }\r\n      if (this.disabled) {\r\n        deco.backgroundColor = \"#eeeeee\";\r\n        deco.color = \"#d2d2d2\";\r\n      }\r\n\r\n      return deco;\r\n    },\r\n    iconStyle() {\r\n      return this.disabled ? { color: \"#d2d2d2\" } : { color: \"#9b9b9b\" };\r\n    },\r\n    timeValue() {\r\n      return this.selectedTime.hour === -1 || this.selectedTime.min === -1\r\n        ? this.placeholder\r\n        : \"%02d:%02d\".format(this.selectedTime.hour, this.selectedTime.min);\r\n    }\r\n  },\r\n  created() {\r\n    this.initHour();\r\n  },\r\n  methods: {\r\n    clickContainer() {\r\n      if (!this.disabled) this.vSelect = true;\r\n    },\r\n    initHour() {\r\n      this.hours = [];\r\n      for (let i = this.start.hour; i <= this.end.hour; i++) {\r\n        this.hours.push(i);\r\n      }\r\n      if (this.value && this.value !== \"\") {\r\n        let value = this.value.split(\":\");\r\n        this.clickHour(parseInt(value[0]));\r\n        this.selectedTime = {\r\n          hour: parseInt(value[0]),\r\n          min: parseInt(value[1])\r\n        };\r\n      }\r\n    },\r\n    clickHour(hour) {\r\n      this.selectedTime.hour = hour;\r\n      this.selectedTime.min = -1;\r\n      //this.$emit('update:value', '');\r\n\r\n      this.minutes = [];\r\n      for (let i = 0; i < 60 / this.unit; i++) {\r\n        let min = i * this.unit;\r\n        let disabled = false;\r\n\r\n        if (\r\n          // 시작시간\r\n          (this.start.hour === hour && min < this.start.min) ||\r\n          // 종료시간\r\n          (this.end.hour === hour && min > this.end.min) ||\r\n          // 불가능한 시간대 - 시작시간\r\n          (this.usingRange &&\r\n            this.disableRange.start.hour === hour &&\r\n            min >= this.disableRange.start.min) ||\r\n          // 불가능한 시간대 - 종료시간\r\n          (this.usingRange &&\r\n            this.disableRange.end.hour === hour &&\r\n            min <= this.disableRange.end.min)\r\n        ) {\r\n          disabled = true;\r\n        }\r\n\r\n        this.minutes.push({\r\n          min: min,\r\n          disabled: disabled\r\n        });\r\n      }\r\n    },\r\n    clickMinute(minute) {\r\n      if (minute.disabled) return;\r\n      this.selectedTime.min = minute.min;\r\n      this.$emit(\r\n        \"update:value\",\r\n        \"%02d:%02d\".format(this.selectedTime.hour, this.selectedTime.min)\r\n      );\r\n      this.vSelect = false;\r\n    }\r\n  },\r\n  watch: {\r\n    start() {\r\n      this.initHour();\r\n    },\r\n    value(n) {\r\n      if (!n) {\r\n        this.selectedTime = {\r\n          hour: -1,\r\n          min: -1\r\n        };\r\n      }\r\n      if (n.indexOf(\":\") > -1) {\r\n        let time = n.split(\":\");\r\n        let hour = parseInt(time[0]);\r\n        let min = parseInt(time[1]);\r\n        if (hour !== this.selectedTime.hour || min !== this.selectedTime.min) {\r\n          this.selectedTime = {\r\n            hour: hour,\r\n            min: min\r\n          };\r\n        }\r\n      } else {\r\n        if (this.selectedTime.hour !== -1 && this.selectedTime.min !== -1) {\r\n          this.selectedTime = {\r\n            hour: -1,\r\n            min: -1\r\n          };\r\n        }\r\n      }\r\n    },\r\n    vSelect(n) {\r\n      if (n) {\r\n        // 목록 열릴 때, body에 스크롤 숨김처리\r\n        document\r\n          .getElementsByTagName(\"body\")[0]\r\n          .setAttribute(\"style\", \"overflow-y:hidden !important\");\r\n\r\n        // 선택되어있는 hour, min 위치로 이동\r\n        if (this.selectedTime.hour > -1) {\r\n          this.$nextTick(() => {\r\n            for (let i = 0; i < this.hours.length; i++) {\r\n              if (this.hours[i] === this.selectedTime.hour) {\r\n                document.getElementById(\"hour-list\").scrollTop = 30 * i;\r\n                break;\r\n              }\r\n            }\r\n            if (this.selectedTime.min > -1) {\r\n              for (let i = 0; i < this.minutes.length; i++) {\r\n                if (this.minutes[i].min === this.selectedTime.min) {\r\n                  document.getElementById(\"min-list\").scrollTop = 30 * i;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        // 목록 닫힐 때, body에 스크롤 처리\r\n        document\r\n          .getElementsByTagName(\"body\")[0]\r\n          .setAttribute(\"style\", \"overflow-y:scroll !important\");\r\n        if (this.selectedTime.min === -1) {\r\n          this.$emit(\"update:value\", \"\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n@import '~assets/css/lp_main';\r\n\r\n.time-picker-container {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\r\n  border-radius: 8px;\r\n  border: 1px solid #dfdfdf;\r\n  padding-left: 8px !important;\r\n  background: white;\r\n  color: #9b9b9b;\r\n  min-width: 99px;\r\n  min-height: 32px;\r\n}\r\n\r\n.icon-alarm {\r\n  // position: absolute;\r\n  // top: 5px;\r\n  // right: 4px;\r\n  margin-right: 7px;\r\n  // color: #989898;\r\n  font-size: 18px;\r\n}\r\n\r\n.time-picker-select {\r\n  position: absolute;\r\n  top: 29px;\r\n  left: 0;\r\n  background: white;\r\n  z-index: 1000;\r\n  border: 1px solid #ddd;\r\n  width: 200px;\r\n  display: flex;\r\n}\r\n\r\n.item {\r\n  text-align: center;\r\n  padding: 4px;\r\n  height: 30px;\r\n  color: #707070;\r\n}\r\n\r\n.item:hover, .selected {\r\n  background-color: $primary;\r\n  color: white;\r\n}\r\n\r\n.time-list {\r\n  overflow-y: scroll;\r\n  height: 240px;\r\n  width: 50%;\r\n}\r\n\r\n.disabled {\r\n  color: #d8d8d8;\r\n}\r\n\r\n.lp-outsider-layout {\r\n  position: fixed;\r\n  z-index: 10;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n}\r\n</style>\r\n"]}]}