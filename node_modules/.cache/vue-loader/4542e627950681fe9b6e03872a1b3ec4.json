{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputImgUploader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputImgUploader.vue","mtime":1605259987000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport FormMixin from \"@/components/Mixins/FormMixin\";\r\nimport ImageUploaderMixin from \"@/components/Mixins/ImageUploaderMixin\";\r\nimport uuidv4 from \"uuid/v4\";\r\nexport default {\r\n  name: \"c-input-imgUploader\",\r\n  mixins: [ImageUploaderMixin, FormMixin],\r\n  props: {\r\n    data: {\r\n      type: String,\r\n      required: false\r\n    },\r\n    label: {\r\n      type: String,\r\n      required: false\r\n    },\r\n    index: {\r\n      type: Number,\r\n      required: false\r\n    },\r\n    borderStyle: {\r\n      type: String,\r\n      default: \"rectangle\" // circle, rectangle, radius\r\n    },\r\n    align: {\r\n      type: String,\r\n      default: \"left\" // left, center, right\r\n    },\r\n    isImgDeletable: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      uid: \"\",\r\n      file: this.value,\r\n      imageArray: []\r\n    };\r\n  },\r\n  created() {\r\n    this.uid = uuidv4();\r\n    // if(this.data!==undefined) {\r\n    //   this.properties.img = this.objectValue(this.getDataSet(), this.properties.data);\r\n    // }\r\n    //this.element('a-input-label').properties.enable = true;\r\n  },\r\n  computed: {\r\n    alignStyle() {\r\n      let deco = {};\r\n      if (this.align === \"center\") {\r\n        deco.display = \"flex\";\r\n        deco.justifyContent = \"center\";\r\n      }\r\n\r\n      return deco;\r\n    },\r\n    viewStyles() {\r\n      let deco = {\r\n        border: \"1px solid \" + this.getColor(\"기본 테두리선 색상\"),\r\n        backgroundImage: \"url(\" + this.file + \")\",\r\n        marginTop: \"8px\",\r\n        marginRight: \"6px\",\r\n        width: \"80px\",\r\n        height: \"80px\"\r\n      };\r\n\r\n      if (this.imgUploaderStyle) {\r\n        if (this.imgUploaderStyle.width)\r\n          deco.width = this.imgUploaderStyle.width;\r\n        if (this.imgUploaderStyle.height)\r\n          deco.height = this.imgUploaderStyle.height;\r\n      }\r\n\r\n      switch (this.borderStyle) {\r\n        case \"circle\":\r\n          deco.borderRadius = \"50%\";\r\n          break;\r\n        case \"radius\":\r\n          deco.borderRadius = this.radius.borderRadius;\r\n          break;\r\n      }\r\n\r\n      return deco;\r\n    },\r\n    closeStyles() {\r\n      return {};\r\n    },\r\n    addIconStyle() {\r\n      return { color: this.getColor(\"브랜드 강조 색상\") };\r\n    }\r\n  },\r\n  watch: {\r\n    value(n) {\r\n      if (Array.isArray(this.file)) {\r\n        this.file = n;\r\n      } else {\r\n        this.file = this.image(n);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async onFileChange(e) {\r\n      this.$store.commit(\"setLoadingSpinner\", true);\r\n      let files = e.target.files || e.dataTransfer.files;\r\n      if (!files.length) {\r\n        this.$store.commit(\"setLoadingSpinner\", false);\r\n        return;\r\n      }\r\n\r\n      let length = Object.keys(files).length;\r\n\r\n      for (let j = 0; j < length; j++) {\r\n        await this.loadFile(files[j], length, j);\r\n      }\r\n    },\r\n    loadFile(file, length, index) {\r\n      return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = f => {\r\n          let params = {\r\n            f: f,\r\n            file: file,\r\n            length: length,\r\n            index: index\r\n          };\r\n          resolve(params);\r\n        };\r\n      })\r\n        .then(params => {\r\n          return this.loadImage(\r\n            params.f,\r\n            params.file,\r\n            params.length,\r\n            params.index\r\n          );\r\n        })\r\n        .catch(err => {\r\n          this.$store.commit(\"setLoadingSpinner\", false);\r\n          console.log(err);\r\n        });\r\n    },\r\n    loadImage(f, file, length, index) {\r\n      return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.onload = () => {\r\n          let params = {\r\n            file: file,\r\n            image: image,\r\n            length: length,\r\n            index: index\r\n          };\r\n          resolve(params);\r\n        };\r\n        image.src = f.target.result;\r\n      })\r\n        .then(params => {\r\n          let afterAction = function(file, resizeImg, length, index) {\r\n            let self = this;\r\n            self.imageArray.push(resizeImg);\r\n            if (length === self.imageArray.length) {\r\n              if (length === 1) self.file = self.imageArray[0];\r\n              else self.file = self.imageArray;\r\n              self.$emit(\"update:value\", self.file);\r\n              self.imageArray = [];\r\n              self.$store.commit(\"setLoadingSpinner\", false);\r\n            }\r\n          }.bind(this);\r\n\r\n          return this.getFixedImage(\r\n            params.file,\r\n            params.image,\r\n            params.length,\r\n            params.index,\r\n            afterAction\r\n          );\r\n          // return this.getFixedImage(params.file, params.image, params.length, params.index);\r\n        })\r\n        .catch(err => {\r\n          this.$store.commit(\"setLoadingSpinner\", false);\r\n          console.log(err);\r\n        });\r\n    },\r\n    deleteImg() {\r\n      if (this.file && this.file !== \"\") {\r\n        this.file = \"\";\r\n        this.$emit(\"delImg\", this.index);\r\n      }\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["CInputImgUploader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CInputImgUploader.vue","sourceRoot":"src/components/Components/Form","sourcesContent":["<template>\r\n  <div\r\n    :style=\"[containerStyle, alignStyle]\"\r\n    class=\"c-input-imgUploader-container c-root position-relative\"\r\n  >\r\n    <!-- 레이블 -->\r\n    <div\r\n      v-if=\"formType.label && label\"\r\n      :class=\"{hiddenLabel: index >= 1}\"\r\n      :style=\"labelStyle\"\r\n    >{{ label }}</div>\r\n\r\n    <!-- 이미지 업로더 -->\r\n    <div class=\"imgUploader-view flex-center\" :style=\"viewStyles\">\r\n      <!-- 이미지 데이터가 있는 경우 -->\r\n      <input\r\n        class=\"imgUploader-input\"\r\n        v-if=\"(file === undefined || file==='')\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        @click.stop\r\n        :id=\"uid\"\r\n        @change=\"onFileChange\"\r\n        multiple=\"multiple\"\r\n      />\r\n      <label\r\n        class=\"imgUploader-box\"\r\n        v-if=\"(file === undefined || file==='')\"\r\n        @click.stop\r\n        :for=\"uid\"\r\n      >\r\n        <!-- :style=\"boxStyles\"> -->\r\n        <i class=\"material-icons\" :style=\"addIconStyle\">add</i>\r\n      </label>\r\n\r\n      <!-- 이미지 데이터가 없는 경우 -->\r\n      <div v-if=\"file && file!==''\" style=\"position: relative; width: 100%; height: 100%;\">\r\n        <!-- 닫기버튼 -->\r\n        <i v-if=\"file && file!=='' && isImgDeletable\"\r\n          class=\"imgUploader-close material-icons\"\r\n          style=\"cursor: pointer;\"\r\n          :style=\"closeStyles\"\r\n          @click.stop.prevent=\"deleteImg\"\r\n        >close</i>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport FormMixin from \"@/components/Mixins/FormMixin\";\r\nimport ImageUploaderMixin from \"@/components/Mixins/ImageUploaderMixin\";\r\nimport uuidv4 from \"uuid/v4\";\r\nexport default {\r\n  name: \"c-input-imgUploader\",\r\n  mixins: [ImageUploaderMixin, FormMixin],\r\n  props: {\r\n    data: {\r\n      type: String,\r\n      required: false\r\n    },\r\n    label: {\r\n      type: String,\r\n      required: false\r\n    },\r\n    index: {\r\n      type: Number,\r\n      required: false\r\n    },\r\n    borderStyle: {\r\n      type: String,\r\n      default: \"rectangle\" // circle, rectangle, radius\r\n    },\r\n    align: {\r\n      type: String,\r\n      default: \"left\" // left, center, right\r\n    },\r\n    isImgDeletable: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      uid: \"\",\r\n      file: this.value,\r\n      imageArray: []\r\n    };\r\n  },\r\n  created() {\r\n    this.uid = uuidv4();\r\n    // if(this.data!==undefined) {\r\n    //   this.properties.img = this.objectValue(this.getDataSet(), this.properties.data);\r\n    // }\r\n    //this.element('a-input-label').properties.enable = true;\r\n  },\r\n  computed: {\r\n    alignStyle() {\r\n      let deco = {};\r\n      if (this.align === \"center\") {\r\n        deco.display = \"flex\";\r\n        deco.justifyContent = \"center\";\r\n      }\r\n\r\n      return deco;\r\n    },\r\n    viewStyles() {\r\n      let deco = {\r\n        border: \"1px solid \" + this.getColor(\"기본 테두리선 색상\"),\r\n        backgroundImage: \"url(\" + this.file + \")\",\r\n        marginTop: \"8px\",\r\n        marginRight: \"6px\",\r\n        width: \"80px\",\r\n        height: \"80px\"\r\n      };\r\n\r\n      if (this.imgUploaderStyle) {\r\n        if (this.imgUploaderStyle.width)\r\n          deco.width = this.imgUploaderStyle.width;\r\n        if (this.imgUploaderStyle.height)\r\n          deco.height = this.imgUploaderStyle.height;\r\n      }\r\n\r\n      switch (this.borderStyle) {\r\n        case \"circle\":\r\n          deco.borderRadius = \"50%\";\r\n          break;\r\n        case \"radius\":\r\n          deco.borderRadius = this.radius.borderRadius;\r\n          break;\r\n      }\r\n\r\n      return deco;\r\n    },\r\n    closeStyles() {\r\n      return {};\r\n    },\r\n    addIconStyle() {\r\n      return { color: this.getColor(\"브랜드 강조 색상\") };\r\n    }\r\n  },\r\n  watch: {\r\n    value(n) {\r\n      if (Array.isArray(this.file)) {\r\n        this.file = n;\r\n      } else {\r\n        this.file = this.image(n);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async onFileChange(e) {\r\n      this.$store.commit(\"setLoadingSpinner\", true);\r\n      let files = e.target.files || e.dataTransfer.files;\r\n      if (!files.length) {\r\n        this.$store.commit(\"setLoadingSpinner\", false);\r\n        return;\r\n      }\r\n\r\n      let length = Object.keys(files).length;\r\n\r\n      for (let j = 0; j < length; j++) {\r\n        await this.loadFile(files[j], length, j);\r\n      }\r\n    },\r\n    loadFile(file, length, index) {\r\n      return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = f => {\r\n          let params = {\r\n            f: f,\r\n            file: file,\r\n            length: length,\r\n            index: index\r\n          };\r\n          resolve(params);\r\n        };\r\n      })\r\n        .then(params => {\r\n          return this.loadImage(\r\n            params.f,\r\n            params.file,\r\n            params.length,\r\n            params.index\r\n          );\r\n        })\r\n        .catch(err => {\r\n          this.$store.commit(\"setLoadingSpinner\", false);\r\n          console.log(err);\r\n        });\r\n    },\r\n    loadImage(f, file, length, index) {\r\n      return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.onload = () => {\r\n          let params = {\r\n            file: file,\r\n            image: image,\r\n            length: length,\r\n            index: index\r\n          };\r\n          resolve(params);\r\n        };\r\n        image.src = f.target.result;\r\n      })\r\n        .then(params => {\r\n          let afterAction = function(file, resizeImg, length, index) {\r\n            let self = this;\r\n            self.imageArray.push(resizeImg);\r\n            if (length === self.imageArray.length) {\r\n              if (length === 1) self.file = self.imageArray[0];\r\n              else self.file = self.imageArray;\r\n              self.$emit(\"update:value\", self.file);\r\n              self.imageArray = [];\r\n              self.$store.commit(\"setLoadingSpinner\", false);\r\n            }\r\n          }.bind(this);\r\n\r\n          return this.getFixedImage(\r\n            params.file,\r\n            params.image,\r\n            params.length,\r\n            params.index,\r\n            afterAction\r\n          );\r\n          // return this.getFixedImage(params.file, params.image, params.length, params.index);\r\n        })\r\n        .catch(err => {\r\n          this.$store.commit(\"setLoadingSpinner\", false);\r\n          console.log(err);\r\n        });\r\n    },\r\n    deleteImg() {\r\n      if (this.file && this.file !== \"\") {\r\n        this.file = \"\";\r\n        this.$emit(\"delImg\", this.index);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n// @import '~assets/css/ui_main'\r\n.imgUploader-view {\r\n  background-size: cover;\r\n  background-position: center;\r\n}\r\n\r\n.imgUploader-input {\r\n  position: fixed;\r\n  top: -20px;\r\n  left: -20px;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n.imgUploader-box {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.imgUploader-close {\r\n  cursor: pointer;\r\n  background-color: rgba(0, 0, 0, 0.4);\r\n  color: #eee;\r\n  border-radius: 50%;\r\n  padding: 2px;\r\n  font-size: 12px;\r\n  text-align: center;\r\n  position: absolute;\r\n  top: 0px;\r\n  right: 0px;\r\n  z-index: 10;\r\n}\r\n\r\n.hiddenLabel {\r\n  visibility: hidden;\r\n}\r\n</style>\r\n"]}]}