{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/components/Components/Form/CInputCheckboxFullGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Components/Form/CInputCheckboxFullGroup.vue","mtime":1605259986000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FormMixin from '@/components/Mixins/FormMixin'\n\nexport default {\n  name: 'CInputCheckboxFullGroup',\n  mixins: [\n    FormMixin\n  ],\n  props: {\n    options: {\n      type: Array,\n      required: true\n    },\n    value: {\n      type: Array,\n      required: false\n    },\n    label: {\n      type: String,\n      required: false\n    },\n    // 'full'스타일 일 경우\n    // column, gutter(px)\n    radioButtonFull: {\n      type: Object,\n      required: false\n    }\n  },\n  data() {\n    return {\n      align: 'left',\n      selectedValue: []\n    }\n  },\n  computed: {\n    columnStyle() {\n      if (this.radioButtonFull && this.radioButtonFull.col!==undefined) {\n        return `col-${this.radioButtonFull.col}`;\n      }\n      else return 'col-6';\n    },\n  },\n  created() {\n    if (this.value===undefined) this.selectedValue = [];\n    else this.selectedValue = this.value;\n  },\n  watch: {\n    value(n) {\n      if (this.value===undefined) this.selectedValue = [];\n      else this.selectedValue = this.value;\n    },\n    selectedValue(n) {\n      this.$emit('update:value', n);\n    }\n  },\n  methods: {\n    gutterStyle(idx) {\n      let deco = {};\n      let gutter = '4px';\n      if (this.radioButtonFull && this.radioButtonFull.gutter!==undefined) {\n        gutter = this.radioButtonFull.gutter + 'px';\n      }\n      deco.padding = gutter;\n      let col = 6;\n      if (this.radioButtonFull && this.radioButtonFull.col!=undefined) {\n        col = this.radioButtonFull.col;\n      }\n      let num = 12/col;\n      if (idx % num === 0) deco.paddingLeft = 0;              // 열 첫번째\n      else if (idx % num === (num-1)) deco.paddingRight = 0;  // 열 마지막\n      return deco;\n    },\n    toggleCheck(item) {\n      if (!this.selectedValue.includes(item['id'])) {\n        this.selectedValue.push(item['id']);\n      }\n      else {\n        let index = this.selectedValue.indexOf(item['id'])\n        if (index >= 0) {\n          this.selectedValue.remove(index);\n        }\n      }\n      this.$emit('changed');\n    },\n    isChecked(item) {\n      if (!this.selectedValue.includes(item['id'])) return false;\n      else return true;\n    },\n    btnStyle(item) {\n      if (this.selectedValue.indexOf(item.id)>-1) {\n        if (this.fullSelectedCustomStyle) return this.fullSelectedCustomStyle;\n      }\n      else {\n        if (this.fullUnselectedCustomStyle) return this.fullUnselectedCustomStyle;\n      }\n\n      let deco = {\n        borderRadius: this.radius.borderRadius,\n        border: this.brandBorder.main.border,\n        color: this.brandColor.sub.color,\n        backgroundColor: this.brandBgColor.sub.backgroundColor,\n        height: '48px',\n        textAlign: 'center',\n        // lineHeight: '48px',\n      };\n      if(this.selectedValue.indexOf(item.id)>-1) {\n        deco.color = this.brandColor.white.color;\n        deco.backgroundColor = this.brandBgColor.brand.backgroundColor;\n      }\n\n      return deco;\n    }\n  }\n}\n",{"version":3,"sources":["CInputCheckboxFullGroup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"CInputCheckboxFullGroup.vue","sourceRoot":"src/components/Components/Form","sourcesContent":["<template>\r\n  <div :style=\"containerStyle\">\r\n    <!-- 레이블 -->\r\n    <div v-if=\"formType.label && label\" :style=\"labelStyle\">{{ label }}</div>\r\n\r\n    <div class=\"grid-box\">\r\n      <div class=\"unselect\"\r\n           :class=\"columnStyle\"\r\n           :style=\"[gutterStyle(idx)]\"\r\n           v-for=\"(item, idx) in options\"\r\n           :key=\"`check-box-${idx}`\">\r\n        <div class=\"flex-center\" @click=\"toggleCheck(item)\" :style=\"btnStyle(item)\">{{ item.label }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import FormMixin from '@/components/Mixins/FormMixin'\r\n\r\n  export default {\r\n    name: 'CInputCheckboxFullGroup',\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n    props: {\r\n      options: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      value: {\r\n        type: Array,\r\n        required: false\r\n      },\r\n      label: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      // 'full'스타일 일 경우\r\n      // column, gutter(px)\r\n      radioButtonFull: {\r\n        type: Object,\r\n        required: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        align: 'left',\r\n        selectedValue: []\r\n      }\r\n    },\r\n    computed: {\r\n      columnStyle() {\r\n        if (this.radioButtonFull && this.radioButtonFull.col!==undefined) {\r\n          return `col-${this.radioButtonFull.col}`;\r\n        }\r\n        else return 'col-6';\r\n      },\r\n    },\r\n    created() {\r\n      if (this.value===undefined) this.selectedValue = [];\r\n      else this.selectedValue = this.value;\r\n    },\r\n    watch: {\r\n      value(n) {\r\n        if (this.value===undefined) this.selectedValue = [];\r\n        else this.selectedValue = this.value;\r\n      },\r\n      selectedValue(n) {\r\n        this.$emit('update:value', n);\r\n      }\r\n    },\r\n    methods: {\r\n      gutterStyle(idx) {\r\n        let deco = {};\r\n        let gutter = '4px';\r\n        if (this.radioButtonFull && this.radioButtonFull.gutter!==undefined) {\r\n          gutter = this.radioButtonFull.gutter + 'px';\r\n        }\r\n        deco.padding = gutter;\r\n        let col = 6;\r\n        if (this.radioButtonFull && this.radioButtonFull.col!=undefined) {\r\n          col = this.radioButtonFull.col;\r\n        }\r\n        let num = 12/col;\r\n        if (idx % num === 0) deco.paddingLeft = 0;              // 열 첫번째\r\n        else if (idx % num === (num-1)) deco.paddingRight = 0;  // 열 마지막\r\n        return deco;\r\n      },\r\n      toggleCheck(item) {\r\n        if (!this.selectedValue.includes(item['id'])) {\r\n          this.selectedValue.push(item['id']);\r\n        }\r\n        else {\r\n          let index = this.selectedValue.indexOf(item['id'])\r\n          if (index >= 0) {\r\n            this.selectedValue.remove(index);\r\n          }\r\n        }\r\n        this.$emit('changed');\r\n      },\r\n      isChecked(item) {\r\n        if (!this.selectedValue.includes(item['id'])) return false;\r\n        else return true;\r\n      },\r\n      btnStyle(item) {\r\n        if (this.selectedValue.indexOf(item.id)>-1) {\r\n          if (this.fullSelectedCustomStyle) return this.fullSelectedCustomStyle;\r\n        }\r\n        else {\r\n          if (this.fullUnselectedCustomStyle) return this.fullUnselectedCustomStyle;\r\n        }\r\n\r\n        let deco = {\r\n          borderRadius: this.radius.borderRadius,\r\n          border: this.brandBorder.main.border,\r\n          color: this.brandColor.sub.color,\r\n          backgroundColor: this.brandBgColor.sub.backgroundColor,\r\n          height: '48px',\r\n          textAlign: 'center',\r\n          // lineHeight: '48px',\r\n        };\r\n        if(this.selectedValue.indexOf(item.id)>-1) {\r\n          deco.color = this.brandColor.white.color;\r\n          deco.backgroundColor = this.brandBgColor.brand.backgroundColor;\r\n        }\r\n\r\n        return deco;\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n  .check-box\r\n  .check-box-text\r\n    cursor pointer\r\n\r\n  .check-box-label\r\n    cursor pointer\r\n\r\n  .check-align\r\n    margin-right 10px\r\n\r\n</style>\r\n"]}]}