{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/components/Components/Form/CInputCascadingDropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Components/Form/CInputCascadingDropdown.vue","mtime":1605259985000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FormMixin from \"@/components/Mixins/FormMixin\";\n\nexport default {\n  name: \"c-input-cascadingDropdown\",\n\n  mixins: [\n    FormMixin\n  ],\n\n  props: {\n    dropdown: {\n      type: Array,\n      required: true\n    },\n    dropItemCustomStyle: {\n      type: Object,\n      required: false\n    }\n  },\n\n  created() {\n    this.drop1.options = this.dropdown;\n    if(this.value) {\n      if(this.value.dropdown1) {\n        let selItem = find(this.drop1.options, 'id', this.value.dropdown1);\n        this.drop1.value = selItem.value;\n        this.drop1.selectedValue = typeof(this.drop1.value) === 'object' ? this.drop1.value.value : this.drop1.value;\n\n        if(this.value.dropdown2) {\n          setTimeout(()=> {\n            this.drop2.options = selItem.child;\n            let selItem2 = find(this.drop2.options, 'id', this.value.dropdown2);\n            this.drop2.value = selItem2.value;\n            this.drop2.selectedValue = typeof(this.drop2.value) === 'object' ? this.drop2.value.value : this.drop2.value;\n            \n            setTimeout(()=> {\n              if(this.value.dropdown3) {\n                this.drop3.options = selItem2.child;\n                this.drop3.value = find(this.drop3.options, 'id', this.value.dropdown3).value;\n                this.drop3.selectedValue = typeof(this.drop3.value) === 'object' ? this.drop3.value.value : this.drop3.value;\n              }\n            },300);\n          },300);\n        }\n      }\n    }\n  },\n\n  data() {\n    return {\n      selectedLabel: '',\n      drop1: {\n        label: '',\n        options: [],\n        selectedValue: undefined,\n        init: true\n      },\n      drop2: {\n        label: '',\n        options: [],\n        selectedValue: undefined,\n        init: true\n      },\n      drop3: {\n        label: '',\n        options: [],\n        selectedValue: undefined,\n        init: true\n      }\n\n    }\n  },\n\n  methods: {\n    selectedItem(item, idx) {\n      console.log(item. idx)\n      if(idx === 0) {\n        if(this.drop1.init) {\n          this.drop1.init = false;\n          return;\n        }\n        let selItem = find(this.drop1.options, 'value', item);\n\n        this.drop1.selectedValue = item;\n        this.drop2.options = selItem.child;\n        this.drop2.selectedValue = (selItem.child && selItem.child.length > 0) ? selItem.child[0].value : undefined;\n        this.drop2.value = this.drop2.selectedValue;\n      }\n\n      else if(idx === 1){\n        if(this.drop2.init) {\n          this.drop2.init = false;\n          return;\n        }\n        let selItem = find(this.drop2.options, 'value', item);\n        this.drop2.selectedValue = item;\n        this.drop3.options = selItem.child;\n        this.drop3.selectedValue = (selItem.child && selItem.child.length > 0) ? selItem.child[0].value : undefined;\n        this.drop3.value = this.drop3.selectedValue;\n      }\n\n      else if(idx === 2){\n        if(this.drop3.init) {\n          this.drop3.init = false;\n          return;\n        }\n        this.drop3.selectedValue = item;\n      }\n\n      this.$emit('update:value', {\n        dropdown1: this.drop1.selectedValue,\n        dropdown2: this.drop2.selectedValue,\n        dropdown3: this.drop3.selectedValue\n      });\n      let sel = '';\n      if(this.drop1.selectedValue) {\n        sel = find(this.drop1.options, 'id', this.drop1.selectedValue).label;\n      }\n\n\n      if(this.drop2.selectedValue) {\n        if(sel !== '') sel += ' ';\n        sel = find(this.drop2.options, 'id', this.drop2.selectedValue).label;\n      }\n\n      if(this.drop3.selectedValue) {\n        if(sel !== '') sel += ' ';\n        sel = find(this.drop3.options, 'id', this.drop3.selectedValue).label;\n      }\n\n\n      this.$emit('update:selectedValue', sel);\n    }\n  }\n}\n",{"version":3,"sources":["CInputCascadingDropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA","file":"CInputCascadingDropdown.vue","sourceRoot":"src/components/Components/Form","sourcesContent":["<template>\r\n  <div :style=\"containerStyle\">\r\n\r\n    <transition-group name=\"fade\">\r\n\r\n      <div v-if=\"formType.label && label\" :style=\"labelStyle\" key=\"drop1-label\">{{ label }}</div>\r\n      <c-input-dropdown v-bind=\"drop1\" :gutter=\"0\"\r\n                        :dropdownCustomStyle=\"dropdownCustomStyle\"\r\n                        :dropItemCustomStyle=\"dropItemCustomStyle\"\r\n                        @update:value=\"res => selectedItem(res, 0)\"\r\n                        key=\"drop1-dropdown\"></c-input-dropdown>\r\n      <div v-if=\"drop2.options && drop2.options.length>0\" style=\"width:100%;height:8px\" key=\"drop2-label\"></div>\r\n      <c-input-dropdown v-bind=\"drop2\" v-if=\"drop2.options && drop2.options.length>0\" :gutter=\"0\"\r\n                        :dropdownCustomStyle=\"dropdownCustomStyle\"\r\n                        :dropItemCustomStyle=\"dropItemCustomStyle\"\r\n                        @update:value=\"res => selectedItem(res, 1)\"\r\n                        key=\"drop2-dropdown\"></c-input-dropdown>\r\n      <div v-if=\"drop2.options && drop2.options.length>0 && drop3.options && drop3.options.length>0\" style=\"width:100%;height:8px\" key=\"drop3-label\"></div>\r\n      <c-input-dropdown v-bind=\"drop3\" v-if=\"drop2.options && drop2.options.length>0 && drop3.options && drop3.options.length>0\" :gutter=\"0\"\r\n                        :dropdownCustomStyle=\"dropdownCustomStyle\"\r\n                        :dropItemCustomStyle=\"dropItemCustomStyle\"\r\n                        @update:value=\"res => selectedItem(res, 2)\"\r\n                        key=\"drop3-dropdown\"></c-input-dropdown>\r\n\r\n    </transition-group>                        \r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import FormMixin from \"@/components/Mixins/FormMixin\";\r\n\r\n  export default {\r\n    name: \"c-input-cascadingDropdown\",\r\n\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n\r\n    props: {\r\n      dropdown: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      dropItemCustomStyle: {\r\n        type: Object,\r\n        required: false\r\n      }\r\n    },\r\n\r\n    created() {\r\n      this.drop1.options = this.dropdown;\r\n      if(this.value) {\r\n        if(this.value.dropdown1) {\r\n          let selItem = find(this.drop1.options, 'id', this.value.dropdown1);\r\n          this.drop1.value = selItem.value;\r\n          this.drop1.selectedValue = typeof(this.drop1.value) === 'object' ? this.drop1.value.value : this.drop1.value;\r\n\r\n          if(this.value.dropdown2) {\r\n            setTimeout(()=> {\r\n              this.drop2.options = selItem.child;\r\n              let selItem2 = find(this.drop2.options, 'id', this.value.dropdown2);\r\n              this.drop2.value = selItem2.value;\r\n              this.drop2.selectedValue = typeof(this.drop2.value) === 'object' ? this.drop2.value.value : this.drop2.value;\r\n              \r\n              setTimeout(()=> {\r\n                if(this.value.dropdown3) {\r\n                  this.drop3.options = selItem2.child;\r\n                  this.drop3.value = find(this.drop3.options, 'id', this.value.dropdown3).value;\r\n                  this.drop3.selectedValue = typeof(this.drop3.value) === 'object' ? this.drop3.value.value : this.drop3.value;\r\n                }\r\n              },300);\r\n            },300);\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        selectedLabel: '',\r\n        drop1: {\r\n          label: '',\r\n          options: [],\r\n          selectedValue: undefined,\r\n          init: true\r\n        },\r\n        drop2: {\r\n          label: '',\r\n          options: [],\r\n          selectedValue: undefined,\r\n          init: true\r\n        },\r\n        drop3: {\r\n          label: '',\r\n          options: [],\r\n          selectedValue: undefined,\r\n          init: true\r\n        }\r\n\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      selectedItem(item, idx) {\r\n        console.log(item. idx)\r\n        if(idx === 0) {\r\n          if(this.drop1.init) {\r\n            this.drop1.init = false;\r\n            return;\r\n          }\r\n          let selItem = find(this.drop1.options, 'value', item);\r\n\r\n          this.drop1.selectedValue = item;\r\n          this.drop2.options = selItem.child;\r\n          this.drop2.selectedValue = (selItem.child && selItem.child.length > 0) ? selItem.child[0].value : undefined;\r\n          this.drop2.value = this.drop2.selectedValue;\r\n        }\r\n\r\n        else if(idx === 1){\r\n          if(this.drop2.init) {\r\n            this.drop2.init = false;\r\n            return;\r\n          }\r\n          let selItem = find(this.drop2.options, 'value', item);\r\n          this.drop2.selectedValue = item;\r\n          this.drop3.options = selItem.child;\r\n          this.drop3.selectedValue = (selItem.child && selItem.child.length > 0) ? selItem.child[0].value : undefined;\r\n          this.drop3.value = this.drop3.selectedValue;\r\n        }\r\n\r\n        else if(idx === 2){\r\n          if(this.drop3.init) {\r\n            this.drop3.init = false;\r\n            return;\r\n          }\r\n          this.drop3.selectedValue = item;\r\n        }\r\n\r\n        this.$emit('update:value', {\r\n          dropdown1: this.drop1.selectedValue,\r\n          dropdown2: this.drop2.selectedValue,\r\n          dropdown3: this.drop3.selectedValue\r\n        });\r\n        let sel = '';\r\n        if(this.drop1.selectedValue) {\r\n          sel = find(this.drop1.options, 'id', this.drop1.selectedValue).label;\r\n        }\r\n\r\n\r\n        if(this.drop2.selectedValue) {\r\n          if(sel !== '') sel += ' ';\r\n          sel = find(this.drop2.options, 'id', this.drop2.selectedValue).label;\r\n        }\r\n\r\n        if(this.drop3.selectedValue) {\r\n          if(sel !== '') sel += ' ';\r\n          sel = find(this.drop3.options, 'id', this.drop3.selectedValue).label;\r\n        }\r\n\r\n\r\n        this.$emit('update:selectedValue', sel);\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n\r\n.fade-enter-active \r\n  transition opacity .3s ease-in-out\r\n.fade-enter \r\n  opacity 0\r\n\r\n</style>"]}]}