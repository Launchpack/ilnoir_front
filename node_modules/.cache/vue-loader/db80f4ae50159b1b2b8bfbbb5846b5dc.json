{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputRangeDual.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputRangeDual.vue","mtime":1605259988000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport vueSlider from 'vue-slider-component'\nimport FormMixin from \"@/components/Mixins/FormMixin\";\nimport 'vue-slider-component/theme/antd.css'\n\n\nexport default {\n  name: 'c-input-rangeDual',\n\n  components: {\n    vueSlider\n  },\n\n  mixins: [\n    FormMixin\n  ],\n\n  props: {\n    min: {\n      type: [Number, String],\n      required: true,\n    },\n    max: {\n      type: [Number, String],\n      required: true,\n    },\n    unit: {\n      type: String,\n      required: false,\n    },\n    interval: {\n      type: [Number, String],\n      required: true,\n    }\n  },\n\n  mounted() {\n    if(this.value) {\n      this.onChange();\n    }\n  },\n\n  watch: {\n    value(n) {\n      this.inputValue = n;\n    }\n  },\n\n  data() {\n    return {\n      inputValue: this.value,\n      delay: false\n    };\n  },\n\n  computed: {\n    computedInterval() {\n      if(this.interval)  return this.interval;\n      else {\n        if(this.max > 100)\n          return this.max / 100;\n\n        else if(this.max > 10)\n          return this.max / 10;\n\n        else\n          return 1;\n      }\n    },\n    bgStyle() {\n      return this.brandBgColor.white;\n    },\n    dotStyle() {\n      return {\n        border: '2px solid '+this.getColor('브랜드 강조 색상'),\n        width: '100%',\n        height: '100%',\n        borderRadius: '100%',\n        backgroundColor:'white'\n      };\n    },\n    processStyle() {\n      return this.brandBgColor.brand;\n    },\n    sliderStyle() {\n      return this.brandBgColor.brand;\n    },\n    tooltipStyle() {\n      let processColor = this.getColor('브랜드 강조 색상');\n      return {\n        background: processColor,\n        border: `1px solid ${processColor}`\n      };\n    },\n    selectedLabel() {\n      return `${this.getLabel(this.inputValue[0])} ~ ${this.getLabel(this.inputValue[1])}`;\n    },\n    unitStyle() {\n      return this.brandColor.sub;\n    }\n  },\n\n  methods: {\n    onChange() {\n      this.$emit('update:value', this.inputValue);\n      this.$emit('update:selectedValue', this.selectedLabel);\n    },\n    getLabel(value) {\n      let val = parseInt(value);\n      if(val === 0)\n        return `0${this.unit ? this.unit : ''}`;\n\n      let txt = '';\n      let unit = 1000000000000;\n\n      let unitTextArray = ['조 ','억 ','만 '];\n      let utIdx = 0;\n      while(unit >= 10000) {\n        let divideVal = Math.floor(val / unit);\n        if(divideVal>=1) {\n          txt += divideVal + unitTextArray[utIdx];\n          val = val - divideVal*unit;\n        }\n        utIdx++;\n        unit /= 10000;\n      }\n      if(val>0 || val === '')\n        txt += val;\n      return `${txt} ${this.unit ? this.unit : ''}`;\n    }\n  }\n}\n",{"version":3,"sources":["CInputRangeDual.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"CInputRangeDual.vue","sourceRoot":"src/components/Components/Form","sourcesContent":["<template>\r\n  <div :style=\"containerStyle\" class=\"c-input-range-dual-container\r\n              c-root\r\n              position-relative\r\n              full-width\">\r\n\r\n    <div style=\"padding:0 24px\">\r\n      <!-- 레이블 -->\r\n      <div v-if=\"formType.label && label\" :style=\"labelStyle\">{{ label }}</div>\r\n\r\n      <vue-slider ref=\"slider\"\r\n                  v-model=\"inputValue\"\r\n                  :min=\"parseInt(min)\"\r\n                  :max=\"parseInt(max)\"\r\n                  :interval=\"computedInterval\"\r\n                  :height=\"8\"\r\n                  :dotSize=\"20\"\r\n                  :bgStyle=\"bgStyle\"\r\n                  :dotStyle=\"dotStyle\"\r\n                  :processStyle=\"processStyle\"\r\n                  :sliderStyle=\"sliderStyle\"\r\n                  :tooltipStyle=\"tooltipStyle\"\r\n                  tooltip=\"none\"\r\n                  @change=\"onChange\"\r\n      >\r\n        <template v-slot:dot=\"{ value, focus }\">\r\n          <div :style=\"dotStyle\"></div>\r\n        </template>\r\n\r\n      </vue-slider>\r\n      <!-- Label Number -->\r\n      <div class=\"unit\" :style=\"unitStyle\">{{ selectedLabel }}</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import vueSlider from 'vue-slider-component'\r\n  import FormMixin from \"@/components/Mixins/FormMixin\";\r\n  import 'vue-slider-component/theme/antd.css'\r\n\r\n\r\n  export default {\r\n    name: 'c-input-rangeDual',\r\n\r\n    components: {\r\n      vueSlider\r\n    },\r\n\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n\r\n    props: {\r\n      min: {\r\n        type: [Number, String],\r\n        required: true,\r\n      },\r\n      max: {\r\n        type: [Number, String],\r\n        required: true,\r\n      },\r\n      unit: {\r\n        type: String,\r\n        required: false,\r\n      },\r\n      interval: {\r\n        type: [Number, String],\r\n        required: true,\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      if(this.value) {\r\n        this.onChange();\r\n      }\r\n    },\r\n\r\n    watch: {\r\n      value(n) {\r\n        this.inputValue = n;\r\n      }\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        inputValue: this.value,\r\n        delay: false\r\n      };\r\n    },\r\n\r\n    computed: {\r\n      computedInterval() {\r\n        if(this.interval)  return this.interval;\r\n        else {\r\n          if(this.max > 100)\r\n            return this.max / 100;\r\n\r\n          else if(this.max > 10)\r\n            return this.max / 10;\r\n\r\n          else\r\n            return 1;\r\n        }\r\n      },\r\n      bgStyle() {\r\n        return this.brandBgColor.white;\r\n      },\r\n      dotStyle() {\r\n        return {\r\n          border: '2px solid '+this.getColor('브랜드 강조 색상'),\r\n          width: '100%',\r\n          height: '100%',\r\n          borderRadius: '100%',\r\n          backgroundColor:'white'\r\n        };\r\n      },\r\n      processStyle() {\r\n        return this.brandBgColor.brand;\r\n      },\r\n      sliderStyle() {\r\n        return this.brandBgColor.brand;\r\n      },\r\n      tooltipStyle() {\r\n        let processColor = this.getColor('브랜드 강조 색상');\r\n        return {\r\n          background: processColor,\r\n          border: `1px solid ${processColor}`\r\n        };\r\n      },\r\n      selectedLabel() {\r\n        return `${this.getLabel(this.inputValue[0])} ~ ${this.getLabel(this.inputValue[1])}`;\r\n      },\r\n      unitStyle() {\r\n        return this.brandColor.sub;\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      onChange() {\r\n        this.$emit('update:value', this.inputValue);\r\n        this.$emit('update:selectedValue', this.selectedLabel);\r\n      },\r\n      getLabel(value) {\r\n        let val = parseInt(value);\r\n        if(val === 0)\r\n          return `0${this.unit ? this.unit : ''}`;\r\n\r\n        let txt = '';\r\n        let unit = 1000000000000;\r\n\r\n        let unitTextArray = ['조 ','억 ','만 '];\r\n        let utIdx = 0;\r\n        while(unit >= 10000) {\r\n          let divideVal = Math.floor(val / unit);\r\n          if(divideVal>=1) {\r\n            txt += divideVal + unitTextArray[utIdx];\r\n            val = val - divideVal*unit;\r\n          }\r\n          utIdx++;\r\n          unit /= 10000;\r\n        }\r\n        if(val>0 || val === '')\r\n          txt += val;\r\n        return `${txt} ${this.unit ? this.unit : ''}`;\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n  .unit\r\n    font-size 0.9rem\r\n    margin-top 4px\r\n    text-align right\r\n</style>\r\n"]}]}