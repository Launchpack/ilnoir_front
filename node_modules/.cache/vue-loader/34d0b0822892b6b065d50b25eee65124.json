{"remainingRequest":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/PagePc/Termsofservice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/PagePc/Termsofservice.vue","mtime":1605259996000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\n\n\nexport default {\n  components: {  },\n  data() {\n    return {\n      enablePage: false,\n      componentName: '/',\n      category_id: 0,\n      category: {},\n      boards: []\n    }\n  },\n  watch: {\n    componentName(n) {\n      if(n === '') {\n        if(!this.isLogin) {\n          this.$router.replace('/signin');\n        }\n        else {\n          let partner_grade = this.boards.map(item=>{ return item.partner_grade }).reduce((p,c) => { return p > c ? c : p; });\n          let grade = this.boards.map(item=>{ return item.grade }).reduce((p,c) => { return p > c ? c : p; });\n\n\n          // 파트너 등급 설정 된 페이지가 있을 경우\n          if(partner_grade > 0) {\n            // 파트너가 아닌 경우\n            if(!this.user.partner) {\n              this.$router.replace('/partner_signup');\n            }\n            // 파트너일땐, 등급 안맞는 페이지로 이동\n            else {\n              this.$router.replace('/wrong_partner_grade?order='+partner_grade);\n            }\n          }\n          else if(grade > 0) {\n            this.$router.replace('/wrong_grade?order='+grade);\n          }\n        }\n      }\n    },\n    '$route'() {\n      this.findName();\n    }\n  },\n  created() {\n    this.findName();\n  },\n  methods: {\n    findName() {\n      this.getProductCategories().then(res => {\n        if (res === 'ok') {\n          this.enablePage = true;\n          this.componentName = this.getComponentName();\n        }\n      });\n    },\n    getProductCategories() {\n      return new Promise((resolve)=>{\n        if(this.$route.path === '/product_detail') {\n          this.$axios.get(`/user/0/mapping/product/${this.$route.query.id}?fields=category1,category2,category3`).then(cat_res=>{\n            if(cat_res.status === 200) {\n              this.category = cat_res.data;\n              if(cat_res.data.category3) {\n                this.category_id = cat_res.data.category3;\n              } else if(cat_res.data.category2) {\n                this.category_id = cat_res.data.category2;\n              } else if(cat_res.data.category1) {\n                this.category_id = cat_res.data.category1;\n              }\n            }\n            resolve('ok');\n          }).catch(()=>{\n            resolve('ok');\n          });\n        }\n        else {\n          resolve('ok');\n        }\n      });\n    },\n    getComponentName() {\n      if(this.isLogin) {\n        let name = '';\n        if(this.user.grade) {\n          for(let i=this.user.grade.order; i>=1; i--) {\n            name = this.getBoardsUserGrade(i);\n            if(name!=='') {\n              break;\n            }\n          }\n        }\n        else {\n          name = this.getBoardsUserLogin();\n        }\n\n        if(name === '') {\n          name = this.getBoardsGuest();\n        }\n        return name;\n      }\n      else {\n        return this.getBoardsGuest();\n      }\n    },\n    getName(board) {\n      if(board.template_name !== '') {\n        return this.dashToPascal(`${board.template_name}${board.name}`);\n      } else {\n        return board.name;\n      }\n    },\n    dashToPascal(value) {\n      let camel = value.replace(/([-_][a-z])/ig, ($1) => {\n        return $1.toUpperCase()\n          .replace('-', '')\n          .replace('_', '');\n      });\n      return camel[0].toUpperCase() + camel.substring(1);\n    },\n    getBoardsGuest() {\n      let board = this.boards.filter(item=>{ return item.activated && item.login_required === false });\n      board = this.getCategories(board, true, 0);\n      return board.length === 0 ? '' : this.getName(board[0]);\n    },\n    getBoardsUserLogin() {\n      let board = this.boards.filter(item=>{ return item.activated && item.login_required === true && (item.grade === 1 || !item.grade) });\n      board = this.getCategories(board, false, 1);\n      return board.length === 0 ? '' : this.getName(board[0]);\n    },\n    getBoardsUserGrade(grade) {\n      let board = this.boards.filter(item=>{ return item.activated && item.login_required === true && item.grade === grade });\n      board = this.getCategories(board, false, grade);\n      return board.length === 0 ? '' : this.getName(board[0]);\n    },\n    \n    getCategories(boards, guest, grade) {\n        if((['/product','/search','/product_detail','/filter'].indexOf(this.$route.path)===-1) || boards.length === 0) {\n          return boards;\n        }\n  \n        // 해당 카테고리 페이지가 있는 경우 반환\n        let category_id = this.$route.query.gnb ? this.$route.query.gnb : this.$route.query.tab ? this.$route.query.tab : this.$route.query.category;\n        \n        let cat_board = [];\n        if(this.$route.query.category3) {\n          cat_board = boards.filter(item => { return item.category3 === Number(this.$route.query.category3) })\n          if(cat_board.length>0) {\n            category_id = this.$route.query.category3;\n          }\n        }\n        if(cat_board.length === 0 && this.$route.query.category2) {\n          cat_board = boards.filter(item => { return item.category2 === Number(this.$route.query.category2) })\n          if(cat_board.length>0) {\n            category_id = this.$route.query.category2;\n          }\n        }\n        if(cat_board.length === 0 && this.$route.query.category1) {\n          cat_board = boards.filter(item => { return item.category1 === Number(this.$route.query.category1) })\n          if(cat_board.length>0) {\n            category_id = this.$route.query.category1;\n          }\n        }\n        \n        if(this.category_id>0) {\n          category_id = this.category_id;\n        }\n  \n        // query로 tab 또는 category로 id 가져온게 없는 경우\n        if(category_id === undefined) {\n          // 카테고리 설정 없는 보드 존재할 경우\n          let board_all = boards.filter(item=>{ return !item.category1 });\n          if(board_all.length>0) {    \n            return board_all;\n          } else {\n            return [];\n          }\n        }\n        category_id = parseInt(category_id);\n        cat_board = boards.filter(item=>{ return item.category1 === category_id || item.category2 === category_id || item.category3 === category_id });\n        // 현재 카테고리와 일치하는 카테고리가 없는 경우, 부모 카테고리로 된 보드 찾기\n        if(cat_board.length === 0) {\n          cat_board = boards.filter(item => { return item.category1 === this.category.category1 && item.category2 === this.category.category2 });\n  \n          if (cat_board.length === 0) {\n            cat_board = boards.filter(item => { return item.category1 === this.category.category1 });\n          }\n          \n          if (cat_board.length === 0) {\n            cat_board = boards.filter(item=>{ return !item.category1});\n          }\n        }\n  \n        // 해당 보드가 없는 경우\n        if(cat_board.length === 0) {\n          return [];\n        }\n        else {\n          if(guest) {\n            // 비회원일 때, 상위 회원등급에 해당 카테고리 있는 경우 빈값\n            if(this.getBoardsUserLogin() !== '') {\n              return [];\n            } \n            else {\n              let hasUpperGrade = false;\n              for(let i = 1; i<=10; i++ ) {\n                let upper_board = this.getBoardsUserGrade(i);\n                if(upper_board !== '') {\n                  hasUpperGrade = true;\n                  break;\n                }\n              }\n              if(hasUpperGrade) {\n                return [];\n              }\n            }\n          }\n  \n          // 상위등급에서 해당 카테고리가 있는 경우\n          if(!guest && grade > 1) {\n            let hasUpperGrade = false;\n            for(let i = grade+1; i<=10; i++ ) {\n              let upper_board = this.getBoardsUserGrade(i);\n              if(upper_board !== '') {\n                hasUpperGrade = true;\n              }\n            }\n            if(hasUpperGrade) {\n              // 하위등급에 해당 카테고리가 없는 경우\n              let hasLowerGrade = false;\n              for(let i = grade-1; i>0; i-- ) {\n                let lower_board = this.getBoardsUserGrade(i);\n                if(lower_board !== '') {\n                  hasLowerGrade = true;\n                }\n              }\n              if(hasLowerGrade === false) {\n                return [];\n              }\n            }\n          }        \n          return cat_board;\n        }\n      }\n  }\n}\n",{"version":3,"sources":["Termsofservice.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Termsofservice.vue","sourceRoot":"src/components/PagePc","sourcesContent":["<template>\n  <component v-if=\"enablePage\" :is=\"componentName\"></component>\n</template>\n\n<script>\n  \n\n  export default {\n    components: {  },\n    data() {\n      return {\n        enablePage: false,\n        componentName: '/',\n        category_id: 0,\n        category: {},\n        boards: []\n      }\n    },\n    watch: {\n      componentName(n) {\n        if(n === '') {\n          if(!this.isLogin) {\n            this.$router.replace('/signin');\n          }\n          else {\n            let partner_grade = this.boards.map(item=>{ return item.partner_grade }).reduce((p,c) => { return p > c ? c : p; });\n            let grade = this.boards.map(item=>{ return item.grade }).reduce((p,c) => { return p > c ? c : p; });\n\n\n            // 파트너 등급 설정 된 페이지가 있을 경우\n            if(partner_grade > 0) {\n              // 파트너가 아닌 경우\n              if(!this.user.partner) {\n                this.$router.replace('/partner_signup');\n              }\n              // 파트너일땐, 등급 안맞는 페이지로 이동\n              else {\n                this.$router.replace('/wrong_partner_grade?order='+partner_grade);\n              }\n            }\n            else if(grade > 0) {\n              this.$router.replace('/wrong_grade?order='+grade);\n            }\n          }\n        }\n      },\n      '$route'() {\n        this.findName();\n      }\n    },\n    created() {\n      this.findName();\n    },\n    methods: {\n      findName() {\n        this.getProductCategories().then(res => {\n          if (res === 'ok') {\n            this.enablePage = true;\n            this.componentName = this.getComponentName();\n          }\n        });\n      },\n      getProductCategories() {\n        return new Promise((resolve)=>{\n          if(this.$route.path === '/product_detail') {\n            this.$axios.get(`/user/0/mapping/product/${this.$route.query.id}?fields=category1,category2,category3`).then(cat_res=>{\n              if(cat_res.status === 200) {\n                this.category = cat_res.data;\n                if(cat_res.data.category3) {\n                  this.category_id = cat_res.data.category3;\n                } else if(cat_res.data.category2) {\n                  this.category_id = cat_res.data.category2;\n                } else if(cat_res.data.category1) {\n                  this.category_id = cat_res.data.category1;\n                }\n              }\n              resolve('ok');\n            }).catch(()=>{\n              resolve('ok');\n            });\n          }\n          else {\n            resolve('ok');\n          }\n        });\n      },\n      getComponentName() {\n        if(this.isLogin) {\n          let name = '';\n          if(this.user.grade) {\n            for(let i=this.user.grade.order; i>=1; i--) {\n              name = this.getBoardsUserGrade(i);\n              if(name!=='') {\n                break;\n              }\n            }\n          }\n          else {\n            name = this.getBoardsUserLogin();\n          }\n\n          if(name === '') {\n            name = this.getBoardsGuest();\n          }\n          return name;\n        }\n        else {\n          return this.getBoardsGuest();\n        }\n      },\n      getName(board) {\n        if(board.template_name !== '') {\n          return this.dashToPascal(`${board.template_name}${board.name}`);\n        } else {\n          return board.name;\n        }\n      },\n      dashToPascal(value) {\n        let camel = value.replace(/([-_][a-z])/ig, ($1) => {\n          return $1.toUpperCase()\n            .replace('-', '')\n            .replace('_', '');\n        });\n        return camel[0].toUpperCase() + camel.substring(1);\n      },\n      getBoardsGuest() {\n        let board = this.boards.filter(item=>{ return item.activated && item.login_required === false });\n        board = this.getCategories(board, true, 0);\n        return board.length === 0 ? '' : this.getName(board[0]);\n      },\n      getBoardsUserLogin() {\n        let board = this.boards.filter(item=>{ return item.activated && item.login_required === true && (item.grade === 1 || !item.grade) });\n        board = this.getCategories(board, false, 1);\n        return board.length === 0 ? '' : this.getName(board[0]);\n      },\n      getBoardsUserGrade(grade) {\n        let board = this.boards.filter(item=>{ return item.activated && item.login_required === true && item.grade === grade });\n        board = this.getCategories(board, false, grade);\n        return board.length === 0 ? '' : this.getName(board[0]);\n      },\n      \n      getCategories(boards, guest, grade) {\n          if((['/product','/search','/product_detail','/filter'].indexOf(this.$route.path)===-1) || boards.length === 0) {\n            return boards;\n          }\n    \n          // 해당 카테고리 페이지가 있는 경우 반환\n          let category_id = this.$route.query.gnb ? this.$route.query.gnb : this.$route.query.tab ? this.$route.query.tab : this.$route.query.category;\n          \n          let cat_board = [];\n          if(this.$route.query.category3) {\n            cat_board = boards.filter(item => { return item.category3 === Number(this.$route.query.category3) })\n            if(cat_board.length>0) {\n              category_id = this.$route.query.category3;\n            }\n          }\n          if(cat_board.length === 0 && this.$route.query.category2) {\n            cat_board = boards.filter(item => { return item.category2 === Number(this.$route.query.category2) })\n            if(cat_board.length>0) {\n              category_id = this.$route.query.category2;\n            }\n          }\n          if(cat_board.length === 0 && this.$route.query.category1) {\n            cat_board = boards.filter(item => { return item.category1 === Number(this.$route.query.category1) })\n            if(cat_board.length>0) {\n              category_id = this.$route.query.category1;\n            }\n          }\n          \n          if(this.category_id>0) {\n            category_id = this.category_id;\n          }\n    \n          // query로 tab 또는 category로 id 가져온게 없는 경우\n          if(category_id === undefined) {\n            // 카테고리 설정 없는 보드 존재할 경우\n            let board_all = boards.filter(item=>{ return !item.category1 });\n            if(board_all.length>0) {    \n              return board_all;\n            } else {\n              return [];\n            }\n          }\n          category_id = parseInt(category_id);\n          cat_board = boards.filter(item=>{ return item.category1 === category_id || item.category2 === category_id || item.category3 === category_id });\n          // 현재 카테고리와 일치하는 카테고리가 없는 경우, 부모 카테고리로 된 보드 찾기\n          if(cat_board.length === 0) {\n            cat_board = boards.filter(item => { return item.category1 === this.category.category1 && item.category2 === this.category.category2 });\n    \n            if (cat_board.length === 0) {\n              cat_board = boards.filter(item => { return item.category1 === this.category.category1 });\n            }\n            \n            if (cat_board.length === 0) {\n              cat_board = boards.filter(item=>{ return !item.category1});\n            }\n          }\n    \n          // 해당 보드가 없는 경우\n          if(cat_board.length === 0) {\n            return [];\n          }\n          else {\n            if(guest) {\n              // 비회원일 때, 상위 회원등급에 해당 카테고리 있는 경우 빈값\n              if(this.getBoardsUserLogin() !== '') {\n                return [];\n              } \n              else {\n                let hasUpperGrade = false;\n                for(let i = 1; i<=10; i++ ) {\n                  let upper_board = this.getBoardsUserGrade(i);\n                  if(upper_board !== '') {\n                    hasUpperGrade = true;\n                    break;\n                  }\n                }\n                if(hasUpperGrade) {\n                  return [];\n                }\n              }\n            }\n    \n            // 상위등급에서 해당 카테고리가 있는 경우\n            if(!guest && grade > 1) {\n              let hasUpperGrade = false;\n              for(let i = grade+1; i<=10; i++ ) {\n                let upper_board = this.getBoardsUserGrade(i);\n                if(upper_board !== '') {\n                  hasUpperGrade = true;\n                }\n              }\n              if(hasUpperGrade) {\n                // 하위등급에 해당 카테고리가 없는 경우\n                let hasLowerGrade = false;\n                for(let i = grade-1; i>0; i-- ) {\n                  let lower_board = this.getBoardsUserGrade(i);\n                  if(lower_board !== '') {\n                    hasLowerGrade = true;\n                  }\n                }\n                if(hasLowerGrade === false) {\n                  return [];\n                }\n              }\n            }        \n            return cat_board;\n          }\n        }\n    }\n  }\n</script>"]}]}