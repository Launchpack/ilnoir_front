{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/App.vue","mtime":1605259958000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport Toast from \"@/components/Components/Common/Toast\";\nimport Vue from 'vue'\nimport VueAnalytics from 'vue-analytics'\nimport router from './router/index'\nlet fernet = require('fernet');\nimport AuthMixin from \"./components/Mixins/AuthMixin\";\n\nexport default {\n  components: {\n    Toast\n  },\n  name: 'App',\n  mixins: [\n    AuthMixin\n  ],\n  head: {\n    link: function () {\n      return [\n        {\n          rel: 'icon',\n          href: this.favicon,\n          type: 'image/x-icon'\n        }\n      ];\n    },\n    meta: function () {\n      return [\n        { name: 'viewport', content: this.viewportContent }\n      ]\n    }\n  },\n  created() {\n    this.serviceInit();\n    this.setAuthHeader();\n\n    //토큰 유효한지 체크\n    this.validAuth();\n\n    this.sendToNativeApp();\n  },\n  data() {\n    return {\n      vHeadDone: false,\n      backendUrl: 'http://localhost:8000/',\n      vRouter: false,\n      appStyle: {\n        minHeight: '100vh',\n        maxWidth: '100%',\n        margin: 0,\n        paddingLeft: 0,\n        paddingRight: 0,\n        overflow: 'hidden'\n      },\n      overlayLink: '',\n      viewportContent: 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'\n    }\n  },\n  methods: {\n    naverRedirect() {\n      if (location.pathname.indexOf('/naver/')>-1) {\n        let access_token = location.hash.replace('#access_token=', '').split('&')[0];\n        location.replace(`${this.backendUrl}auth/user/signin/naver?access_token=${access_token}`);\n      }\n    },\n    serviceInit() {\n      this.backendUrl = process.env.VUE_APP_BACKEND_URL;\n      this.$axios.defaults.baseURL = this.backendUrl;\n      // ie cache 방지\n      this.$axios.defaults.headers['Pragma'] = 'no-cache';\n\n      // 네이버 로그인 후 진입한 경우 리다이렉트\n      this.naverRedirect();\n\n      // 메타 뷰포트 vue-head 설정\n      this.setMetaViewport();\n\n      // 브랜드 디자인 가져오기\n      this.getBrand();\n\n      // 서비스 정보 가져오기\n      this.getServiceInfo();\n\n      // PC Mode 여부 가져오기\n      this.getServicePcMode();\n\n      // API Key 가져오기\n      this.getAPIKey();\n\n      //기본 공통 스타일 지정\n      this.setCommonStyle();\n    },\n\n    setMetaViewport() {\n      if (navigator.userAgent.match(/Android/i)) {\n        this.viewportContent = 'width=device-width,initial-scale=1.0';\n      }\n      else {\n        this.viewportContent = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';\n      }\n      this.$emit('updateHead');\n    },\n\n    validAuth() {\n      if(this.$store.getters.user.user_id>0) {\n        this.$axios.get(`user/${this.$store.getters.user.user_id}`).then(res => {\n          this.setUserData(res.data);\n        }).catch(err => {\n          if(err.response.status === 401) {\n            this.$store.commit('logout');\n          }\n        });\n      }\n    },\n\n    getServicePcMode() {\n      this.$axios.get('public/service/pc_mode').then(res => {\n        // 경로에 overlay 포함 된 경우 pc mode\n        if(this.$route.path.indexOf('_overlay')>-1) {\n          this.$store.commit('setPcMode', true);\n        }\n        else {\n          this.$store.commit('setPcMode', res.data.pc_mode);\n        }\n        // 디바이스 너비 설정\n        this.setDevice();\n        // 디바이스 리사이즈 처리\n        this.$nextTick(() => {\n          window.addEventListener('resize', () => {\n            this.setDevice();\n          });\n        })\n      });\n    },\n\n    getServiceInfo() {\n      this.$axios.get('public/service/info').then(res => {\n        this.$store.commit('setServiceInfo', res.data);\n        this.$emit('updateHead');\n      });\n    },\n\n    getAPIKey() {\n      this.$axios.get('public/service/social_key').then(res => {\n        let keys = undefined;\n        if(res.data.result) {\n          let result = res.data.result.split('_!_');\n          let token = new fernet.Token({secret: new fernet.Secret(result[1]), token:result[0], ttl:0});\n          keys = JSON.parse(token.decode());\n        } else {\n          keys = res.data.social_key;\n        }\n        this.$store.commit('setSocialKey', keys);\n        // 구글애널리틱스\n        let ga = this.$store.getters.social_key.google.ga;\n        if (ga) {\n          Vue.use(VueAnalytics, {\n            id: ga,\n            checkDuplicatedScript: true,\n            router\n          })\n        }\n\n        // 네이버지도\n        if(this.$store.getters.social_key.naver.enable.map) {\n          let naverMap = this.$store.getters.social_key.naver.map.client_id;\n          this.addHeadJs(`https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${naverMap}&submodules=geocoder`);\n          setTimeout(()=>{\n            this.addHeadJs('/static/marker_clustering.js');\n            this.vHeadDone = true;\n          },1000);\n\n        } else {\n          this.vHeadDone = true;\n        }\n      });\n    },\n\n    addHeadJs(src) {\n      let head = document.getElementsByTagName('head')[0];\n      let el = document.createElement('script');\n      el.setAttribute('type', 'text/javascript');\n      el.setAttribute('src', src);\n      head.appendChild(el);\n    },\n\n    setDevice() {\n      // 서비스 PC모드 (서비스 PC device 지원 여부)\n      let pc_enable = this.$store.getters.pcMode;\n      console.log('setDevice', navigator.userAgent)\n      \n      // 화면 너비\n      // 모바일\n      if (navigator.userAgent.match(/Android/i)\n        || navigator.userAgent.match(/webOS/i)\n        || navigator.userAgent.match(/iPhone/i)\n        || navigator.userAgent.match(/iPod/i)\n        || navigator.userAgent.match(/iPad/i)\n        || navigator.userAgent.match(/BlackBerry/i)\n        || navigator.userAgent.match(/Windows Phone/i)\n      ) {\n        console.log('mobile')\n        this.$store.commit('setDevice', 'mobile');\n        this.$store.commit('setBrowserType', 'mobile');\n        this.$store.commit('setDeviceWidth', window.innerWidth);\n        console.log(this.$store.getters.device)\n      }\n      // PC\n      else {\n        console.log('pc')\n        this.$store.commit('setBrowserType', 'pc');\n\n        // PC모드 지원 서비스\n        if (pc_enable) {\n          this.$store.commit('setDevice', 'pc');\n          this.$store.commit('setDeviceWidth', screen.width);\n        }\n        // PC모드 지원하지 않는 서비스 (only 모바일)\n        else {\n          this.$store.commit('setDevice', 'mobile');\n          this.$store.commit('setDeviceWidth', 416);\n\n          this.appStyle.maxWidth = '416px';\n          this.appStyle.margin = '0 auto';\n          this.appStyle.borderLeft = '1px solid #eeeeee';\n          this.appStyle.borderRight = '1px solid #eeeeee';\n        }\n        console.log(this.$store.getters.device)\n      }\n    },\n    getBrand() {\n      this.$axios.get('public/ui/brand/admin').then(res => {\n        // this.$store.commit('setBrand', res.data);\n        document.getElementsByTagName('html')[0].style.fontFamily = res.data.font;\n        this.$axios.get('public/service/grade').then(res => {\n          this.$store.commit('setGrade', res.data);\n\n        });\n\n        this.$store.commit('setBrand', res.data);\n\n        this.vRouter = true;\n        this.favicon = this.$store.getters.brand.favicon || '';\n\n        this.$emit('updateHead');\n      });\n    },\n    setCommonStyle() {\n      this.$store.commit('setCommonStyle', {\n          borderRadius: '12px',\n          blockMarginBottom: '8px',\n          blockMarginBottomPc: '8px'\n      });\n    },\n    sendToNativeApp() {\n      if(window.Android && this.$store.getters.user.user_id > 0) {\n        window.Android.sendMessage(this.$store.getters.user.username, this.$store.getters.user.token, this.$store.getters.user.user_id);\n\n        let params = JSON.stringify({\n          username: this.$store.getters.user.username,\n          token: this.$store.getters.user.token,\n          user_id: this.$store.getters.user.user_id,\n        });\n        window.postMessage(params, '*');\n      }\n    }\n  }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <div id=\"app\" :style=\"appStyle\">\r\n    <router-view v-if=\"vRouter && vHeadDone\" />\r\n    <toast/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Toast from \"@/components/Components/Common/Toast\";\r\n  import Vue from 'vue'\r\n  import VueAnalytics from 'vue-analytics'\r\n  import router from './router/index'\r\n  let fernet = require('fernet');\r\n  import AuthMixin from \"./components/Mixins/AuthMixin\";\r\n\r\n  export default {\r\n    components: {\r\n      Toast\r\n    },\r\n    name: 'App',\r\n    mixins: [\r\n      AuthMixin\r\n    ],\r\n    head: {\r\n      link: function () {\r\n        return [\r\n          {\r\n            rel: 'icon',\r\n            href: this.favicon,\r\n            type: 'image/x-icon'\r\n          }\r\n        ];\r\n      },\r\n      meta: function () {\r\n        return [\r\n          { name: 'viewport', content: this.viewportContent }\r\n        ]\r\n      }\r\n    },\r\n    created() {\r\n      this.serviceInit();\r\n      this.setAuthHeader();\r\n\r\n      //토큰 유효한지 체크\r\n      this.validAuth();\r\n\r\n      this.sendToNativeApp();\r\n    },\r\n    data() {\r\n      return {\r\n        vHeadDone: false,\r\n        backendUrl: 'http://localhost:8000/',\r\n        vRouter: false,\r\n        appStyle: {\r\n          minHeight: '100vh',\r\n          maxWidth: '100%',\r\n          margin: 0,\r\n          paddingLeft: 0,\r\n          paddingRight: 0,\r\n          overflow: 'hidden'\r\n        },\r\n        overlayLink: '',\r\n        viewportContent: 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'\r\n      }\r\n    },\r\n    methods: {\r\n      naverRedirect() {\r\n        if (location.pathname.indexOf('/naver/')>-1) {\r\n          let access_token = location.hash.replace('#access_token=', '').split('&')[0];\r\n          location.replace(`${this.backendUrl}auth/user/signin/naver?access_token=${access_token}`);\r\n        }\r\n      },\r\n      serviceInit() {\r\n        this.backendUrl = process.env.VUE_APP_BACKEND_URL;\r\n        this.$axios.defaults.baseURL = this.backendUrl;\r\n        // ie cache 방지\r\n        this.$axios.defaults.headers['Pragma'] = 'no-cache';\r\n\r\n        // 네이버 로그인 후 진입한 경우 리다이렉트\r\n        this.naverRedirect();\r\n\r\n        // 메타 뷰포트 vue-head 설정\r\n        this.setMetaViewport();\r\n\r\n        // 브랜드 디자인 가져오기\r\n        this.getBrand();\r\n\r\n        // 서비스 정보 가져오기\r\n        this.getServiceInfo();\r\n\r\n        // PC Mode 여부 가져오기\r\n        this.getServicePcMode();\r\n\r\n        // API Key 가져오기\r\n        this.getAPIKey();\r\n\r\n        //기본 공통 스타일 지정\r\n        this.setCommonStyle();\r\n      },\r\n\r\n      setMetaViewport() {\r\n        if (navigator.userAgent.match(/Android/i)) {\r\n          this.viewportContent = 'width=device-width,initial-scale=1.0';\r\n        }\r\n        else {\r\n          this.viewportContent = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';\r\n        }\r\n        this.$emit('updateHead');\r\n      },\r\n\r\n      validAuth() {\r\n        if(this.$store.getters.user.user_id>0) {\r\n          this.$axios.get(`user/${this.$store.getters.user.user_id}`).then(res => {\r\n            this.setUserData(res.data);\r\n          }).catch(err => {\r\n            if(err.response.status === 401) {\r\n              this.$store.commit('logout');\r\n            }\r\n          });\r\n        }\r\n      },\r\n\r\n      getServicePcMode() {\r\n        this.$axios.get('public/service/pc_mode').then(res => {\r\n          // 경로에 overlay 포함 된 경우 pc mode\r\n          if(this.$route.path.indexOf('_overlay')>-1) {\r\n            this.$store.commit('setPcMode', true);\r\n          }\r\n          else {\r\n            this.$store.commit('setPcMode', res.data.pc_mode);\r\n          }\r\n          // 디바이스 너비 설정\r\n          this.setDevice();\r\n          // 디바이스 리사이즈 처리\r\n          this.$nextTick(() => {\r\n            window.addEventListener('resize', () => {\r\n              this.setDevice();\r\n            });\r\n          })\r\n        });\r\n      },\r\n\r\n      getServiceInfo() {\r\n        this.$axios.get('public/service/info').then(res => {\r\n          this.$store.commit('setServiceInfo', res.data);\r\n          this.$emit('updateHead');\r\n        });\r\n      },\r\n\r\n      getAPIKey() {\r\n        this.$axios.get('public/service/social_key').then(res => {\r\n          let keys = undefined;\r\n          if(res.data.result) {\r\n            let result = res.data.result.split('_!_');\r\n            let token = new fernet.Token({secret: new fernet.Secret(result[1]), token:result[0], ttl:0});\r\n            keys = JSON.parse(token.decode());\r\n          } else {\r\n            keys = res.data.social_key;\r\n          }\r\n          this.$store.commit('setSocialKey', keys);\r\n          // 구글애널리틱스\r\n          let ga = this.$store.getters.social_key.google.ga;\r\n          if (ga) {\r\n            Vue.use(VueAnalytics, {\r\n              id: ga,\r\n              checkDuplicatedScript: true,\r\n              router\r\n            })\r\n          }\r\n\r\n          // 네이버지도\r\n          if(this.$store.getters.social_key.naver.enable.map) {\r\n            let naverMap = this.$store.getters.social_key.naver.map.client_id;\r\n            this.addHeadJs(`https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${naverMap}&submodules=geocoder`);\r\n            setTimeout(()=>{\r\n              this.addHeadJs('/static/marker_clustering.js');\r\n              this.vHeadDone = true;\r\n            },1000);\r\n\r\n          } else {\r\n            this.vHeadDone = true;\r\n          }\r\n        });\r\n      },\r\n\r\n      addHeadJs(src) {\r\n        let head = document.getElementsByTagName('head')[0];\r\n        let el = document.createElement('script');\r\n        el.setAttribute('type', 'text/javascript');\r\n        el.setAttribute('src', src);\r\n        head.appendChild(el);\r\n      },\r\n\r\n      setDevice() {\r\n        // 서비스 PC모드 (서비스 PC device 지원 여부)\r\n        let pc_enable = this.$store.getters.pcMode;\r\n        console.log('setDevice', navigator.userAgent)\r\n        \r\n        // 화면 너비\r\n        // 모바일\r\n        if (navigator.userAgent.match(/Android/i)\r\n          || navigator.userAgent.match(/webOS/i)\r\n          || navigator.userAgent.match(/iPhone/i)\r\n          || navigator.userAgent.match(/iPod/i)\r\n          || navigator.userAgent.match(/iPad/i)\r\n          || navigator.userAgent.match(/BlackBerry/i)\r\n          || navigator.userAgent.match(/Windows Phone/i)\r\n        ) {\r\n          console.log('mobile')\r\n          this.$store.commit('setDevice', 'mobile');\r\n          this.$store.commit('setBrowserType', 'mobile');\r\n          this.$store.commit('setDeviceWidth', window.innerWidth);\r\n          console.log(this.$store.getters.device)\r\n        }\r\n        // PC\r\n        else {\r\n          console.log('pc')\r\n          this.$store.commit('setBrowserType', 'pc');\r\n\r\n          // PC모드 지원 서비스\r\n          if (pc_enable) {\r\n            this.$store.commit('setDevice', 'pc');\r\n            this.$store.commit('setDeviceWidth', screen.width);\r\n          }\r\n          // PC모드 지원하지 않는 서비스 (only 모바일)\r\n          else {\r\n            this.$store.commit('setDevice', 'mobile');\r\n            this.$store.commit('setDeviceWidth', 416);\r\n\r\n            this.appStyle.maxWidth = '416px';\r\n            this.appStyle.margin = '0 auto';\r\n            this.appStyle.borderLeft = '1px solid #eeeeee';\r\n            this.appStyle.borderRight = '1px solid #eeeeee';\r\n          }\r\n          console.log(this.$store.getters.device)\r\n        }\r\n      },\r\n      getBrand() {\r\n        this.$axios.get('public/ui/brand/admin').then(res => {\r\n          // this.$store.commit('setBrand', res.data);\r\n          document.getElementsByTagName('html')[0].style.fontFamily = res.data.font;\r\n          this.$axios.get('public/service/grade').then(res => {\r\n            this.$store.commit('setGrade', res.data);\r\n\r\n          });\r\n\r\n          this.$store.commit('setBrand', res.data);\r\n\r\n          this.vRouter = true;\r\n          this.favicon = this.$store.getters.brand.favicon || '';\r\n\r\n          this.$emit('updateHead');\r\n        });\r\n      },\r\n      setCommonStyle() {\r\n        this.$store.commit('setCommonStyle', {\r\n            borderRadius: '12px',\r\n            blockMarginBottom: '8px',\r\n            blockMarginBottomPc: '8px'\r\n        });\r\n      },\r\n      sendToNativeApp() {\r\n        if(window.Android && this.$store.getters.user.user_id > 0) {\r\n          window.Android.sendMessage(this.$store.getters.user.username, this.$store.getters.user.token, this.$store.getters.user.user_id);\r\n\r\n          let params = JSON.stringify({\r\n            username: this.$store.getters.user.username,\r\n            token: this.$store.getters.user.token,\r\n            user_id: this.$store.getters.user.user_id,\r\n          });\r\n          window.postMessage(params, '*');\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n\r\n\r\n  /* ***\r\n    img lazy loading \r\n    *** */\r\n\r\n  /* img tag */\r\n  img[lazy='loading'] {\r\n  }\r\n  img[lazy='error'] {\r\n  }\r\n  img[lazy='loaded'] {\r\n    animation-name: imgloaded;\r\n    animation-duration: 1s;\r\n    animation-timing-function: ease-out;\r\n  }\r\n  /* background-image */\r\n  .lazy-background-image[lazy='loading'] {\r\n  }\r\n  .lazy-background-image[lazy='error'] {\r\n  }\r\n  .lazy-background-image[lazy='loaded'] {\r\n    animation-name: imgloaded;\r\n    animation-duration: 1s;\r\n    animation-timing-function: ease-out;\r\n  }\r\n  .lazy-background-image-cover[lazy='loaded'] {\r\n    animation-name: imgloaded;\r\n    animation-duration: 1s;\r\n    animation-timing-function: ease-out;\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  .lazy-background-image-contain[lazy='loaded'] {\r\n    animation-name: imgloaded;\r\n    animation-duration: 1s;\r\n    animation-timing-function: ease-out;\r\n    background-size: contain;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  /* animation */\r\n  @keyframes imgloaded {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n</style>"]}]}