{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/components/Components/Form/CInputCheckboxTextarea.vue?vue&type=style&index=0&id=902dbe74&lang=stylus&scoped=true&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Components/Form/CInputCheckboxTextarea.vue","mtime":1605259986000},{"path":"/Users/mard/dev/ilnoir/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.check-box\n  .check-box-text\n    cursor pointer\n\n  .check-box-text\n    margin 0 !important\n\n  .check-box\n    display flex\n    align-items center\n    justify-content center\n    background-color white\n",{"version":3,"sources":["CInputCheckboxTextarea.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"CInputCheckboxTextarea.vue","sourceRoot":"src/components/Components/Form","sourcesContent":["<template>\r\n  <div :style=\"containerStyle\" class=\"full-width\">\r\n    <!-- 레이블 -->\r\n    <div v-if=\"formType.label && label\" :style=\"labelStyle\">{{ label }}</div>\r\n\r\n    <!-- text area -->\r\n    <div v-html=\"textarea\" class=\"full-width\" style=\"height:100px;overflow-y:scroll; border: 1px solid #ddd; padding:12px; margin:12px 0\"></div>\r\n\r\n    <div class=\"flex-align\">\r\n      <!-- 박스(좌측) -->\r\n      <div v-if=\"boxAlign === 'left'\"\r\n           class=\"check-box unselect\"\r\n           :style=\"boxStyle\"\r\n           style=\"margin-right:4px\"\r\n           @click.stop.prevent=\"toggleCheck\">\r\n        <i v-if=\"checked\"\r\n           class=\"material-icons\"\r\n           :style=\"checkStyle\">check</i>\r\n      </div>\r\n\r\n      <!-- 레이블 -->\r\n      <div class=\"check-box-text unselect\" :style=\"textStyle\"\r\n           @click.stop.prevent=\"toggleCheck\">\r\n        {{ text }}\r\n      </div>\r\n\r\n      <!-- 박스(우측) -->\r\n      <div v-if=\"boxAlign === 'right'\"\r\n           class=\"check-box unselect\"\r\n           :style=\"boxStyle\"\r\n           style=\"margin-left:4px\"\r\n           @click.stop.prevent=\"toggleCheck\">\r\n        <i v-if=\"checked\"\r\n           class=\"material-icons\"\r\n           :style=\"checkStyle\">check</i>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import FormMixin from '@/components/Mixins/FormMixin'\r\n\r\n  export default {\r\n    name: 'c-input-checkbox-textarea',\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n\r\n    props: {\r\n      value: {\r\n        type: Boolean,\r\n        required: false\r\n      },\r\n      label: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      text: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      textarea: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      boxAlign: {\r\n        type: String,\r\n        required: false,\r\n        default: 'left'\r\n      }\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        checked: this.value,\r\n      };\r\n    },\r\n\r\n    created() {\r\n      this.checked = this.value;\r\n    },\r\n\r\n    watch: {\r\n      value(n) {\r\n        this.checked = n;\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      textStyle() {\r\n        let deco = cloneItem(this.labelStyle);\r\n        delete deco.margin;\r\n        deco.color = this.brandColor.main;\r\n        deco.marginLeft = '4px';\r\n        return deco;\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      toggleCheck() {\r\n        this.checked = !this.checked;\r\n        this.$emit('update:value', this.checked);\r\n        this.$emit('onUpdate', {\r\n          name: this.name,\r\n          value: this.checked\r\n        });\r\n      },\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n  .check-box\r\n    .check-box-text\r\n      cursor pointer\r\n\r\n    .check-box-text\r\n      margin 0 !important\r\n\r\n    .check-box\r\n      display flex\r\n      align-items center\r\n      justify-content center\r\n      background-color white\r\n</style>\r\n"]}]}