{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputDateRange.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputDateRange.vue","mtime":1605259986000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.sub\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/mard/dev/grit12/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport PageMixin from \"@/components/Mixins/PageMixin\";\nimport FormMixin from '@/components/Mixins/FormMixin';\nexport default {\n  name: 'CInputDateRange',\n  components: {},\n  mixins: [PageMixin, FormMixin],\n  props: {\n    filterOptions: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      \"max\": 1,\n      \"days\": [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"],\n      \"dates\": [],\n      \"touch\": 0,\n      \"maximum\": 1,\n      \"minimum\": 1,\n      \"visible\": false,\n      \"calendar\": [],\n      \"end_date\": \"\",\n      \"start_date\": \"\",\n      \"currentDate\": undefined,\n      \"ordered_count\": 1,\n      placeHolder: '날짜 선택'\n    };\n  },\n  created: function created() {\n    this.currentDate = this.moment(); // this.$axios.get(`user/0/mapping/product/${this.$route.query.id}?fields=minimum,maximum`).then(res => {\n    //   this.minimum = res.data.minimum;\n    //   this.maximum = res.data.maximum;\n    // });\n\n    this.setDates();\n  },\n  methods: {\n    // 선택완료\n    clickOk: function clickOk() {\n      var _this = this;\n\n      //   this.$emit('clickResv', this.period);\n      this.filterOptions.set.forEach(function (item) {\n        if (item.operator === '__gte') item.value = _this.period.resv_date;\n        if (item.operator === '__lte') item.value = _this.period.resv_end_date;\n      }); // this.$store.commit('setSelectedResv', this.period);\n      // this.$emit('selectedLabel', 2, `${this.period.start_date_label} ~ ${this.period.end_date_label}`);\n\n      this.$emit('updateFilterOptions', this.filterOptions);\n      this.$emit('update.value', this.period);\n      this.$refs.schedulePeriodModal.close();\n    },\n    // 날짜 선택\n    clickDate: function clickDate(date) {\n      /* 갱신 이슈 */\n      date.uid = this.uuidv4();\n\n      if (date.prev || !date.enable) {\n        return;\n      } // 선택한 날짜가 최대 선택가능한 일 수 보다 넘치는 경우\n      // 선택한 날짜가 기존 날짜보다 전일 경우 예외처리\n\n\n      if (this.start_date.year >= date.year && this.start_date.month >= date.month && this.start_date.day >= date.day) {\n        this.touch = 1;\n        this.start_date = date;\n        this.end_date = date;\n      } // else if(this.calcPeriod(this.start_date, date) > this.maximum) {\n      //   this.touch = 1;\n      //   this.start_date = date;\n      //   this.end_date = date;\n      // }\n      // 1번쨰 터치할 경우\n      else if (this.touch === 0) {\n          this.touch += 1; // touch=1\n\n          this.start_date = date;\n          this.end_date = date;\n        } // 2번쨰 터치할 경우\n        else if (this.touch === 1) {\n            console.log('touch1'); // 같은 날짜 선택\n\n            if (this.start_date.year === date.year && this.start_date.month === date.month && this.start_date.day === date.day) {\n              this.end_date = date;\n            } // 다른 날짜 선택\n            else {\n                var start = this.start_date;\n                var end = date;\n                var start_date = this.dateFormat(this.dateToStr(start), 'date_3');\n                var end_date = this.dateFormat(this.dateToStr(end), 'date_3'); // 기간안에 예약가능한 날짜가 없을 경우 선택한 날짜 단일 선택으로 변경\n\n                for (var i = 0; i < this.calendar.length; i++) {\n                  var cal = this.calendar[i];\n\n                  for (var j = 0; j < cal.dates.length; j++) {\n                    var dates = cal.dates[j];\n                    var date_item = this.dateFormat(this.dateToStr(dates), 'date_3');\n\n                    if (this.moment(start_date).isBefore(date_item) && this.moment(date_item).isBefore(end_date)) {\n                      if (!dates.enable) {\n                        this.start_date = date;\n                        this.end_date = date;\n                        this.touch = 1;\n                        return;\n                      }\n                    }\n                  }\n                }\n\n                this.touch += 1; // touch=2  \n\n                this.end_date = date;\n              }\n          } // 3번쨰 터치할 경우\n          else if (this.touch === 2) {\n              this.start_date = date;\n              this.end_date = date;\n              this.touch = 1;\n            }\n    },\n    dateToStr: function dateToStr(date) {\n      if (date.day === '') return '';\n      return '%d-%02d-%02d'.format(date.year, date.month, date.day);\n    },\n    formattedDate: function formattedDate(date) {\n      return this.moment(this.dateToStr(date)).format('MM월 DD일(dd)');\n    },\n    btnStyle: function btnStyle(resv) {\n      var deco = {\n        borderRadius: '20px',\n        padding: '5px 20px',\n        textAlign: 'center',\n        marginBottom: '12px'\n      };\n\n      if (resv.remain === 0) {\n        deco.color = 'white';\n        deco.backgroundColor = '#ddd';\n      } else {\n        if (resv.selected) {\n          deco.color = 'white';\n          deco.backgroundColor = this.brandBgColor.brand.backgroundColor;\n        } else {\n          deco.color = this.brandColor.brand.color;\n        }\n\n        deco.border = this.brandBorder.brand.border;\n      }\n\n      return deco;\n    },\n    dayWrapStyle: function dayWrapStyle(date_target) {\n      var start = this.cloneItem(this.start_date);\n      var end = this.cloneItem(this.end_date);\n      var date_val = this.cloneItem(date_target); // let start_d = '%d-%02d-%0d'.format(start.year.toString(), start.month.toString(), start.day.toString());\n      // let end_d = '%d-%02d-%0d'.format(end.year.toString(), end.month.toString(), end.day.toString());\n      // let date_d = '%d-%02d-%0d'.format(date_val.year.toString(), date_val.month.toString(), date_val.day.toString());\n\n      var start_format = '';\n\n      if (start.year && start.month && start.day) {\n        start_format = '%d-%02d-%02d'.format(start.year.toString(), start.month.toString(), start.day.toString());\n      }\n\n      var end_format = '';\n\n      if (end.year && end.month && end.day) {\n        end_format = '%d-%02d-%02d'.format(end.year.toString(), end.month.toString(), end.day.toString());\n      }\n\n      var date_format = '';\n\n      if (date_val.year && date_val.month && date_val.day) {\n        date_format = '%d-%02d-%02d'.format(date_val.year.toString(), date_val.month.toString(), date_val.day.toString());\n      }\n\n      var start_date = this.moment(start_format).format('YYYY-MM-DD');\n      var end_date = this.moment(end_format).format('YYYY-MM-DD');\n      var date = this.moment(date_format).format('YYYY-MM-DD');\n      var deco = {}; // 선택한 날짜 기간에 스타일 추가\n\n      if (this.moment(start_date).isSameOrBefore(date) && this.moment(date).isSameOrBefore(end_date)) {\n        // console.log(start_date, end_date)\n        if (start_date === end_date) {\n          deco.justifyContent = 'center';\n        } // 선택 처음날짜\n        else if (start_date === date) {\n            deco.justifyContent = 'flex-end';\n          } // 선택 마지막날짜\n          else if (end_date === date) {\n              deco.justifyContent = 'flex-start';\n            }\n      }\n\n      return deco;\n    },\n    dayStyle: function dayStyle(date_target, idx) {\n      var sun = idx % 7 === 0 ? true : false;\n      var sat = idx % 7 === 6 ? true : false;\n      var start = this.cloneItem(this.start_date);\n      var end = this.cloneItem(this.end_date);\n      var date_val = this.cloneItem(date_target);\n      var start_format = '';\n\n      if (start.year && start.month && start.day) {\n        start_format = '%d-%02d-%02d'.format(start.year.toString(), start.month.toString(), start.day.toString());\n      }\n\n      var end_format = '';\n\n      if (end.year && end.month && end.day) {\n        end_format = '%d-%02d-%02d'.format(end.year.toString(), end.month.toString(), end.day.toString());\n      }\n\n      var date_format = '';\n\n      if (date_val.year && date_val.month && date_val.day) {\n        date_format = '%d-%02d-%02d'.format(date_val.year.toString(), date_val.month.toString(), date_val.day.toString());\n      }\n\n      var start_date = this.moment(start_format).format('YYYY-MM-DD');\n      var end_date = this.moment(end_format).format('YYYY-MM-DD');\n      var date = this.moment(date_format).format('YYYY-MM-DD'); // let start = this.cloneItem(this.start_date);\n      // let end = this.cloneItem(this.end_date);\n      // let date_val = this.cloneItem(date_target);\n      // if(start.month<10) start.month = '0' + start.month;\n      // if(start.day<10) start.day = '0' + start.day;\n      // if(end.month<10) end.month = '0' + end.month;\n      // if(end.day<10) end.day = '0' + end.day;\n      // if(date_val.month<10) date_val.month = '0' + date_val.month;\n      // if(date_val.day<10) date_val.day = '0' + date_val.day;\n      // let start_date = this.moment(`${start.year}-${start.month}-${start.day}`).format('YYYY-MM-DD');\n      // let end_date = this.moment(`${end.year}-${end.month}-${end.day}`).format('YYYY-MM-DD');\n      // let date = this.moment(`${date_val.year}-${date_val.month}-${date_val.day}`).format('YYYY-MM-DD');\n      // prev: 현재날짜 기준 이전날짜, 다음달 날짜\n      // enable: times 있을 경우 true\n\n      var deco = {\n        // borderRadius: '50%',\n        color: 'white',\n        width: '40px',\n        height: '40px',\n        lineHeight: '40px' // textAlign: 'center'\n\n      }; // 선택한 날짜 기간에 스타일 추가\n      // (date.day>=this.start_date.day && date.month===this.start_date.month && date.year===this.start_date.year) && \n      // (date.day<=this.end_date.day && date.month===this.end_date.month && date.year===this.end_date.year)\n\n      if (this.moment(start_date).isSameOrBefore(date) && this.moment(date).isSameOrBefore(end_date)) {\n        deco.backgroundColor = this.brandBgColor.brand.backgroundColor;\n        deco.color = 'white';\n        deco.width = '100%'; // 하루만 선택된 경우\n\n        if (start_date === end_date) {\n          deco.width = '40px';\n          deco.borderRadius = '8px';\n        } // 선택 처음날짜\n        else if (start_date === date) {\n            deco.borderTopLeftRadius = '8px';\n            deco.borderBottomLeftRadius = '8px';\n            deco.width = 'calc(40px + ((100% - 40px) / 2))';\n          } // 선택 마지막날짜\n          else if (end_date === date) {\n              deco.borderTopRightRadius = '8px';\n              deco.borderBottomRightRadius = '8px';\n              deco.width = 'calc(40px + ((100% - 40px) / 2))';\n            }\n      } else {\n        deco.color = this.brandColor.main.color; // deco.border = '1px solid #dddddd';\n\n        deco.lineHeight = '39px';\n        if (sun) deco.color = '#f45853';else if (sat) deco.color = '#3c93cf';\n      } // 이전날짜 비활성화 표시\n\n\n      if (date_val.prev) {\n        // deco.border = '1px solid #dddddd';\n        deco.color = '#ddd';\n        deco.lineHeight = '39px';\n        if (sun) deco.color = 'rgba(244, 88, 83, 0.3)';else if (sat) deco.color = 'rgba(60, 147, 207, 0.3)';\n      } else if (!date_val.enable) {\n        deco.color = '#e4dde4';\n      }\n\n      return deco;\n    },\n    setDates: function () {\n      var _setDates = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var currentDate, x, day, year, month, start_day, end_date, len, i, old, old_last, _i, date, monthly;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                currentDate = this.currentDate;\n\n                for (x = 0; x < 6; x++) {\n                  this.dates = [];\n                  day = 0;\n\n                  if (x > 0) {\n                    currentDate = currentDate.add(1, 'month');\n                  }\n\n                  year = currentDate.year();\n                  month = currentDate.month() + 1;\n                  start_day = currentDate.startOf('month').day();\n                  end_date = currentDate.endOf('month').date(); // console.log('year,month,start_day,end_date',year,month,start_day,end_date);\n                  // 6주일경우 42, 5주는 35\n\n                  len = 42;\n\n                  if (start_day + end_date <= 35) {\n                    len = 35;\n                  } // 이전달 날짜 (prev:true)\n\n\n                  for (i = start_day - 1; i >= 0; i--) {\n                    old = this.moment(currentDate);\n                    old.subtract(1, 'month');\n                    old_last = old.endOf('month').date();\n\n                    if (x === 0) {\n                      this.dates.push({\n                        year: old.year(),\n                        month: old.month() + 1,\n                        day: old_last - i,\n                        prev: true,\n                        uid: this.uuidv4()\n                      });\n                    } else {\n                      this.dates.push({\n                        year: old.year(),\n                        month: old.month() + 1,\n                        day: '',\n                        prev: true,\n                        uid: this.uuidv4()\n                      });\n                    }\n                  } // 현재달 날짜 (prev: 이전날짜는 prev: true)\n\n\n                  for (_i = 0; _i < len; _i++) {\n                    // console.log('i, day, start_day, end_date', i, day, start_day, end_date)\n                    if (_i >= start_day && day < end_date) {\n                      date = {\n                        year: year,\n                        month: month,\n                        day: ++day,\n                        enable: true,\n                        uid: this.uuidv4()\n                      }; // console.log('날짜',year, month, day)\n\n                      date.prev = this.moment('%d-%02d-%02d'.format(year, month, day + 1)).isBefore(this.moment());\n                      this.dates.push(date);\n                    }\n                  }\n\n                  monthly = \"\".concat(currentDate.year(), \"-\").concat(currentDate.month() + 1); // let url = `public/product/${this.$route.query.id}/schedule/monthly/${monthly}`;\n                  //test\n                  //url = 'http://localhost:8000/' + url;\n                  // await this.$axios.get(url).then(res => {\n                  //   res.data.dates.forEach(item => {\n                  //     let current = this.dates.filter(date_item => {\n                  //         return date_item.year === item.year &&\n                  //           date_item.month === item.month &&\n                  //           date_item.day === item.day;\n                  //       })[0];\n                  //     if(current && item.day>0 && item.remain > 0) {\n                  //       current.enable = true;\n                  //     }\n                  // // times가 있을 경우 loop 실행\n                  // // if(item.day>0 && item.times.length>0) \n                  // if(item.day>0) {\n                  //   item.times = item.times.filter(time => {\n                  //     return !time.break_time\n                  //   });\n                  //   item.times.forEach(item => {\n                  //     item.selected = false;\n                  //   });\n                  //   let date = this.dates.filter(date => {\n                  //     return date.year === item.year &&\n                  //       date.month === item.month &&\n                  //       date.day === item.day;\n                  //   })[0];\n                  //   date.enable = true;\n                  //   date.times = item.times;\n                  //   // if(date.day===15) {\n                  //   //   date.enable = false;\n                  //   // }\n                  //}\n                  //   });\n                  // });\n\n                  this.calendar.push({\n                    \"year\": year,\n                    \"month\": month,\n                    \"dates\": this.dates\n                  });\n                  if (x === 5) this.visible = true;\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setDates() {\n        return _setDates.apply(this, arguments);\n      }\n\n      return setDates;\n    }(),\n    calcPeriod: function calcPeriod(start_date, end_date) {\n      if (!start_date) {\n        return 0;\n      }\n\n      var resv_date = this.dateFormat(this.dateToStr(start_date), 'date_4');\n      var resv_end_date = this.dateFormat(this.dateToStr(end_date), 'date_4');\n      return this.moment(resv_end_date).diff(this.moment(resv_date), 'days') + 1;\n    }\n  },\n  computed: {\n    isIOS: function isIOS() {\n      if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i)) {\n        // ios13 이전 iPhone, iPad, iPod\n        return true;\n      } else if (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1) {\n        // iPad (ios13 버전 이상)\n        return true;\n      } else {\n        return false;\n      }\n    },\n    iconStyle: function iconStyle() {\n      if (this.iconCustomStyle) return this.iconCustomStyle;else return {\n        color: this.brandColor.sub.color\n      };\n    },\n    minPeriodDate: function minPeriodDate() {\n      var date = this.minimum;\n      return date > 1 ? \"\".concat(date - 1, \"\\uBC15 \").concat(date, \"\\uC77C\") : \"\\uBB34\\uBC15 \".concat(date, \"\\uC77C\"); //return date>1 ? `${date-1}박` : `무박`;\n    },\n    selectedDate: function selectedDate() {\n      var start_date = this.formattedDate(this.start_date);\n      var end_date = this.formattedDate(this.end_date);\n\n      if (start_date === end_date) {\n        return start_date;\n      } else {\n        return \"\".concat(start_date, \" - \").concat(end_date);\n      }\n    },\n    period: function period() {\n      var resv_date = this.dateFormat(this.dateToStr(this.start_date), 'date_4');\n      var resv_end_date = this.dateFormat(this.dateToStr(this.end_date), 'date_4');\n      return {\n        period: true,\n        resv_date: resv_date,\n        resv_end_date: resv_end_date,\n        start_date_label: \"\".concat(this.start_date.month, \"/\").concat(this.start_date.day),\n        end_date_label: \"\".concat(this.end_date.month, \"/\").concat(this.end_date.day),\n        days: this.moment(resv_end_date).diff(this.moment(resv_date), 'days')\n      };\n    },\n    btnEnable: function btnEnable() {\n      return this.period.days + 1 >= this.minimum;\n    },\n    btnColor: function btnColor() {\n      if (this.btnEnable) {\n        return {\n          color: this.brandColor.white,\n          bg: this.brandBgColor.brand\n        };\n      } else {\n        return {\n          color: this.brandColor.white,\n          bg: this.brandBgColor.help\n        };\n      }\n    },\n    customStyle: function customStyle() {\n      return {\n        borderRadius: '8px'\n      };\n    },\n    wrapScroll: function wrapScroll() {\n      return {\n        overflowY: 'auto',\n        height: 'calc(100% - 60px)' // backgroundColor: this.brandBgColor.main.backgroundColor\n\n      };\n    }\n  },\n  watch: {}\n};",{"version":3,"sources":["CInputDateRange.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n<div>\r\n\r\n  <!-- 레이블 -->\r\n  <div v-if=\"formType.label && label\" :style=\"labelStyle\">{{ label }}</div>\r\n\r\n  <!-- input 영역 -->\r\n  <div :style=\"inputStyle\" class=\"flex-between position-relative unselect\" @click=\"$refs.schedulePeriodModal.open()\">\r\n    <div class=\"flex-align\">\r\n      <i class=\"material-icons\" style=\"font-size: 20px; margin-right: 8px; color: #d6d6d6\">today</i>\r\n      <span v-if=\"start_date && end_date\">{{ `${period.resv_date} ~ ${period.resv_end_date}` }}</span>\r\n      <!-- <span v-else-if=\"placeholder\">{{ placeholder }}</span> -->\r\n      <span v-else>{{ placeHolder }}</span>\r\n    </div>\r\n    <i :style=\"iconStyle\" class=\"material-icons\">keyboard_arrow_down</i>\r\n  </div>\r\n\r\n  <sweet-modal ref=\"schedulePeriodModal\" overlay-theme=\"dark\">\r\n  <div style=\"height:75vh;padding-bottom:40px\">\r\n    <div class=\"size-20 bold margin-bottom-12\" :style=\"brandColor.main\"\r\n    style=\"padding:20px 16px 0\">날짜 선택</div>\r\n  <!-- 요일 -->\r\n    <div class=\"flex lp-days\" :style=\"brandColor.main\">\r\n      <div class=\"lp-day size-14 weight-500\"\r\n           v-for=\"(day,idx) in days\" :key=\"'day-'+idx\" :class=\"{'lp-day-sun': idx===0, 'lp-day-sat': idx===6}\">{{ day }}</div>\r\n      <div class=\"days-divider\"></div>\r\n    </div>\r\n\r\n    <div :style=\"[wrapScroll]\">\r\n        <div style=\"margin-bottom:50px;\" v-if=\"visible\">\r\n        <!-- 요일 -->\r\n        <!--<div class=\"flex lp-days\" :style=\"brandColor.main\">-->\r\n        <!--  <div class=\"lp-day size-14 weight-500\"-->\r\n        <!--       v-for=\"(day,idx) in days\" :key=\"'day-'+idx\" :class=\"{'lp-day-sun': idx===0, 'lp-day-sat': idx===6}\">{{ day }}</div>-->\r\n        <!--  <div class=\"days-divider\"></div>-->\r\n        <!--</div>-->\r\n        <div style=\"padding:70px 20px 100px 20px;\">\r\n        <!-- 일 -->\r\n        <div v-for=\"(cal, cal_idx) in calendar\" :key=\"`cal-${cal_idx}`\">\r\n        <div class=\"size-20 bold\">{{ cal.year }}년 {{ cal.month }}월</div>\r\n        <div class=\"flex wrap lp-dates\">\r\n            <div class=\"lp-date unselect position-relative\"\r\n                v-for=\"(date,idx) in cal.dates\"\r\n                :key=\"'date-wrap'+idx\"\r\n                @click=\"clickDate(date, idx)\"\r\n                :style=\"dayWrapStyle(date)\">\r\n            <div class=\"flex-center\" :style=\"dayStyle(date, idx)\" :key=\"'date'+idx\">\r\n                <!-- 일자 표시 -->\r\n                <div class=\"position-absolute size-14 weight-500 date-number\">{{ date.day > 0 ? date.day : '' }}</div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </div>\r\n\r\n        <fixed-bottom v-if=\"touch>0\" style=\"width:90%;\" :class=\"{'fixed-bottom-ie': this.isIE, 'fixed-bottom-ios': this.isIOS}\">\r\n        <div :style=\"[pagePadding, brandBgColor.white, {borderTop: brandBorder.main.border}]\" \r\n        style=\"padding-top: 20px; padding-bottom: 20px;\" :class=\"{'fixed-bottom-ie-content': this.isIE}\">\r\n\r\n            <div v-if=\"btnEnable\" class=\"size-14 weight-500 flex-center\" style=\"height: 48px; margin-bottom: 12px;\"\r\n            :style=\"[brandBgColor.primary, brandColor.white, radius]\" @click=\"clickOk\">{{ selectedDate }}</div>\r\n            \r\n            <div v-if=\"!btnEnable\" class=\"size-14 weight-500 flex-center\"\r\n            style=\"height: 48px; color: #9b9b9b; background-color: #dddddd; margin-bottom: 12px;\" :style=\"radius\" \r\n            @click.stop>최소 {{ minPeriodDate }}이상 선택해야 예약이 가능합니다</div>\r\n            \r\n            <!--<div v-if=\"!btnEnable\" :style=\"brandColor.sub\" class=\"size-12\">최소 {{ minPeriodDate }}이상 선택해야 예약이 가능합니다</div>-->\r\n            <!--<div :style=\"brandColor.sub\" class=\"size-12\" style=\"margin-top: 4px;\">최소 {{ minPeriodDate }}이상 선택해야 예약이 가능합니다</div>-->\r\n            \r\n            <div class=\"size-14 weight-500 flex-center\" style=\"height: 48px;\"\r\n            :style=\"[brandBgColor.main, brandColor.main, radius]\" @click=\"$refs.schedulePeriodModal.close()\">취소</div>\r\n\r\n        <!--<btn :color=\"btnColor.color\" :backgroundColor=\"btnColor.bg\"-->\r\n        <!--     :customStyle=\"customStyle\" @clicked=\"clickOk\" style=\"width:100px\">선택완료</btn>-->\r\n        </div>\r\n        </fixed-bottom>\r\n        </div>\r\n    </div>\r\n  </div>\r\n  </sweet-modal>\r\n</div>\r\n</template>\r\n<script>\r\nimport PageMixin from \"@/components/Mixins/PageMixin\"\r\nimport FormMixin from '@/components/Mixins/FormMixin';\r\n\r\nexport default {\r\n  name: 'CInputDateRange',\r\n  components: {\r\n    \r\n  },\r\n  mixins: [\r\n    PageMixin,\r\n    FormMixin\r\n  ],\r\n  props: {\r\n    filterOptions: {    \r\n        type: Object,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      \"max\": 1,\r\n      \"days\": [\r\n        \"일\",\r\n        \"월\",\r\n        \"화\",\r\n        \"수\",\r\n        \"목\",\r\n        \"금\",\r\n        \"토\"\r\n      ],\r\n      \"dates\": [],\r\n      \"touch\": 0,\r\n      \"maximum\": 1,\r\n      \"minimum\": 1,\r\n      \"visible\": false,\r\n      \"calendar\": [],\r\n      \"end_date\": \"\",\r\n      \"start_date\": \"\",\r\n      \"currentDate\": undefined,\r\n      \"ordered_count\": 1,\r\n      placeHolder: '날짜 선택',\r\n    }\r\n  },\r\n  created() {\r\n      this.currentDate = this.moment();\r\n      // this.$axios.get(`user/0/mapping/product/${this.$route.query.id}?fields=minimum,maximum`).then(res => {\r\n      //   this.minimum = res.data.minimum;\r\n      //   this.maximum = res.data.maximum;\r\n      // });\r\n      this.setDates();\r\n    },\r\n  \r\n  methods: {\r\n    // 선택완료\r\n    clickOk() {\r\n    //   this.$emit('clickResv', this.period);\r\n\r\n      this.filterOptions.set.forEach(item => {\r\n        if(item.operator==='__gte') item.value = this.period.resv_date;\r\n        if(item.operator==='__lte') item.value = this.period.resv_end_date;\r\n      });\r\n      // this.$store.commit('setSelectedResv', this.period);\r\n      // this.$emit('selectedLabel', 2, `${this.period.start_date_label} ~ ${this.period.end_date_label}`);\r\n      this.$emit('updateFilterOptions', this.filterOptions)\r\n      this.$emit('update.value', this.period);\r\n      this.$refs.schedulePeriodModal.close();\r\n    },\r\n    // 날짜 선택\r\n    clickDate(date) {\r\n      /* 갱신 이슈 */\r\n      date.uid = this.uuidv4();\r\n      \r\n      if(date.prev || !date.enable) {\r\n          return;\r\n      }\r\n      // 선택한 날짜가 최대 선택가능한 일 수 보다 넘치는 경우\r\n      \r\n      // 선택한 날짜가 기존 날짜보다 전일 경우 예외처리\r\n      if(this.start_date.year >= date.year && this.start_date.month >= date.month && this.start_date.day >= date.day) {\r\n        this.touch = 1;\r\n        this.start_date = date;\r\n        this.end_date = date;\r\n      }\r\n      // else if(this.calcPeriod(this.start_date, date) > this.maximum) {\r\n      //   this.touch = 1;\r\n      //   this.start_date = date;\r\n      //   this.end_date = date;\r\n      // }\r\n      // 1번쨰 터치할 경우\r\n      else if(this.touch===0) {\r\n        this.touch += 1; // touch=1\r\n        this.start_date = date;\r\n        this.end_date = date;\r\n      }\r\n      // 2번쨰 터치할 경우\r\n      else if(this.touch===1) {\r\n        console.log('touch1')\r\n        // 같은 날짜 선택\r\n        if(this.start_date.year === date.year && this.start_date.month === date.month && this.start_date.day === date.day) {\r\n          this.end_date = date; \r\n        }\r\n        // 다른 날짜 선택\r\n        else {\r\n          let start = this.start_date;\r\n          let end = date;\r\n          let start_date = this.dateFormat(this.dateToStr(start), 'date_3');\r\n          let end_date = this.dateFormat(this.dateToStr(end), 'date_3');\r\n          \r\n          // 기간안에 예약가능한 날짜가 없을 경우 선택한 날짜 단일 선택으로 변경\r\n          for(let i=0; i<this.calendar.length; i++) {\r\n            let cal = this.calendar[i];\r\n            for(let j=0; j<cal.dates.length; j++) {\r\n              let dates = cal.dates[j];\r\n              let date_item = this.dateFormat(this.dateToStr(dates), 'date_3');\r\n              \r\n              if(this.moment(start_date).isBefore(date_item) && this.moment(date_item).isBefore(end_date)) {\r\n                if(!dates.enable) {\r\n                  this.start_date = date;\r\n                  this.end_date = date;\r\n                  this.touch = 1;\r\n                  return;   \r\n                }\r\n              }\r\n            }\r\n          }\r\n          \r\n          this.touch += 1; // touch=2  \r\n          this.end_date = date;\r\n        }\r\n      }\r\n      // 3번쨰 터치할 경우\r\n      else if(this.touch===2) {\r\n        this.start_date = date;\r\n        this.end_date = date;\r\n        this.touch = 1;\r\n      }\r\n\r\n    },\r\n    dateToStr(date) {\r\n      if(date.day === '') return '';\r\n      return '%d-%02d-%02d'.format(date.year, date.month, date.day);\r\n    },\r\n    formattedDate(date) {\r\n     return this.moment(this.dateToStr(date)).format('MM월 DD일(dd)'); \r\n    },\r\n    btnStyle(resv) {\r\n        let deco = {\r\n          borderRadius: '20px',\r\n          padding: '5px 20px',\r\n          textAlign: 'center',\r\n          marginBottom: '12px'\r\n        };\r\n        if(resv.remain === 0) {\r\n          deco.color = 'white';\r\n          deco.backgroundColor = '#ddd';\r\n        }\r\n        else {\r\n          if(resv.selected) {\r\n            deco.color = 'white';\r\n            deco.backgroundColor = this.brandBgColor.brand.backgroundColor;\r\n          } else {\r\n            deco.color = this.brandColor.brand.color;\r\n          }\r\n          deco.border = this.brandBorder.brand.border;\r\n        }\r\n\r\n        return deco;\r\n      },\r\n    dayWrapStyle(date_target) {\r\n\r\n        let start = this.cloneItem(this.start_date);\r\n        let end = this.cloneItem(this.end_date);\r\n        let date_val = this.cloneItem(date_target);\r\n        \r\n        // let start_d = '%d-%02d-%0d'.format(start.year.toString(), start.month.toString(), start.day.toString());\r\n        // let end_d = '%d-%02d-%0d'.format(end.year.toString(), end.month.toString(), end.day.toString());\r\n        // let date_d = '%d-%02d-%0d'.format(date_val.year.toString(), date_val.month.toString(), date_val.day.toString());\r\n        \r\n        let start_format = '';\r\n        if (start.year && start.month && start.day) {\r\n          start_format = '%d-%02d-%02d'.format(start.year.toString(), start.month.toString(), start.day.toString());\r\n        }\r\n        \r\n        let end_format = '';\r\n        if (end.year && end.month && end.day) {\r\n          end_format = '%d-%02d-%02d'.format(end.year.toString(), end.month.toString(), end.day.toString());\r\n        }\r\n  \r\n        let date_format = '';\r\n        if (date_val.year && date_val.month && date_val.day) {\r\n          date_format = '%d-%02d-%02d'.format(date_val.year.toString(), date_val.month.toString(), date_val.day.toString());\r\n        }\r\n        \r\n        let start_date = this.moment(start_format).format('YYYY-MM-DD');\r\n        let end_date = this.moment(end_format).format('YYYY-MM-DD');\r\n        let date = this.moment(date_format).format('YYYY-MM-DD');\r\n        \r\n        let deco = {};\r\n        \r\n        // 선택한 날짜 기간에 스타일 추가\r\n        if(this.moment(start_date).isSameOrBefore(date) && this.moment(date).isSameOrBefore(end_date)) {\r\n          // console.log(start_date, end_date)\r\n          if (start_date === end_date) {\r\n            deco.justifyContent = 'center'\r\n          }\r\n          // 선택 처음날짜\r\n          else if(start_date === date) {\r\n            deco.justifyContent = 'flex-end';\r\n          }\r\n          // 선택 마지막날짜\r\n          else if(end_date === date) {\r\n            deco.justifyContent = 'flex-start';\r\n          }\r\n        }\r\n\r\n        return deco;\r\n      },\r\n    dayStyle(date_target, idx) {\r\n      \r\n      let sun = idx%7===0 ? true : false;\r\n      let sat = idx%7===6 ? true : false;\r\n      \r\n      let start = this.cloneItem(this.start_date);\r\n      let end = this.cloneItem(this.end_date);\r\n      let date_val = this.cloneItem(date_target);\r\n      \r\n      let start_format = '';\r\n      if (start.year && start.month && start.day) {\r\n        start_format = '%d-%02d-%02d'.format(start.year.toString(), start.month.toString(), start.day.toString());\r\n      }\r\n      \r\n      let end_format = '';\r\n      if (end.year && end.month && end.day) {\r\n        end_format = '%d-%02d-%02d'.format(end.year.toString(), end.month.toString(), end.day.toString());\r\n      }\r\n\r\n      let date_format = '';\r\n      if (date_val.year && date_val.month && date_val.day) {\r\n        date_format = '%d-%02d-%02d'.format(date_val.year.toString(), date_val.month.toString(), date_val.day.toString());\r\n      }\r\n\r\n      let start_date = this.moment(start_format).format('YYYY-MM-DD');\r\n      let end_date = this.moment(end_format).format('YYYY-MM-DD');\r\n      let date = this.moment(date_format).format('YYYY-MM-DD');\r\n      \r\n      \r\n      // let start = this.cloneItem(this.start_date);\r\n      // let end = this.cloneItem(this.end_date);\r\n      // let date_val = this.cloneItem(date_target);\r\n      \r\n      // if(start.month<10) start.month = '0' + start.month;\r\n      // if(start.day<10) start.day = '0' + start.day;\r\n      // if(end.month<10) end.month = '0' + end.month;\r\n      // if(end.day<10) end.day = '0' + end.day;\r\n      // if(date_val.month<10) date_val.month = '0' + date_val.month;\r\n      // if(date_val.day<10) date_val.day = '0' + date_val.day;\r\n      \r\n      // let start_date = this.moment(`${start.year}-${start.month}-${start.day}`).format('YYYY-MM-DD');\r\n      // let end_date = this.moment(`${end.year}-${end.month}-${end.day}`).format('YYYY-MM-DD');\r\n      // let date = this.moment(`${date_val.year}-${date_val.month}-${date_val.day}`).format('YYYY-MM-DD');\r\n      \r\n      \r\n      // prev: 현재날짜 기준 이전날짜, 다음달 날짜\r\n      // enable: times 있을 경우 true\r\n      \r\n        let deco = {\r\n          // borderRadius: '50%',\r\n          color: 'white',\r\n          width: '40px',\r\n          height: '40px',\r\n          lineHeight: '40px',\r\n          // textAlign: 'center'\r\n        };\r\n        // 선택한 날짜 기간에 스타일 추가\r\n        // (date.day>=this.start_date.day && date.month===this.start_date.month && date.year===this.start_date.year) && \r\n        // (date.day<=this.end_date.day && date.month===this.end_date.month && date.year===this.end_date.year)\r\n        \r\n        if(this.moment(start_date).isSameOrBefore(date) && this.moment(date).isSameOrBefore(end_date)) {\r\n          deco.backgroundColor = this.brandBgColor.brand.backgroundColor;\r\n          deco.color = 'white';\r\n          deco.width = '100%';\r\n          // 하루만 선택된 경우\r\n          if (start_date === end_date) {\r\n            deco.width  = '40px';\r\n            deco.borderRadius = '8px';\r\n          }\r\n          // 선택 처음날짜\r\n          else if(start_date === date) {\r\n            deco.borderTopLeftRadius = '8px';\r\n            deco.borderBottomLeftRadius = '8px';\r\n            deco.width = 'calc(40px + ((100% - 40px) / 2))';\r\n          }\r\n          // 선택 마지막날짜\r\n          else if(end_date === date) {\r\n            deco.borderTopRightRadius = '8px';\r\n            deco.borderBottomRightRadius = '8px';\r\n            deco.width = 'calc(40px + ((100% - 40px) / 2))';\r\n          }\r\n\r\n        }\r\n        else {\r\n          deco.color = this.brandColor.main.color;\r\n          // deco.border = '1px solid #dddddd';\r\n          deco.lineHeight = '39px';\r\n          \r\n          if (sun) deco.color = '#f45853';\r\n          else if (sat) deco.color = '#3c93cf';\r\n        }\r\n        // 이전날짜 비활성화 표시\r\n        if(date_val.prev) {\r\n          // deco.border = '1px solid #dddddd';\r\n          deco.color = '#ddd';\r\n          deco.lineHeight = '39px';\r\n          \r\n          if (sun) deco.color = 'rgba(244, 88, 83, 0.3)';\r\n          else if (sat) deco.color = 'rgba(60, 147, 207, 0.3)';\r\n        }\r\n        else if(!date_val.enable) {\r\n          deco.color = '#e4dde4';\r\n        }\r\n\r\n        return deco;\r\n      },\r\n    async setDates() {\r\n      let currentDate = this.currentDate;\r\n      for (let x=0; x<6; x++) {\r\n        this.dates = [];\r\n        let day = 0;\r\n        if(x>0) {\r\n          currentDate = currentDate.add(1, 'month');\r\n        }\r\n        let year = currentDate.year();\r\n        let month = currentDate.month()+1;\r\n        let start_day = currentDate.startOf('month').day();\r\n        let end_date = currentDate.endOf('month').date();\r\n        // console.log('year,month,start_day,end_date',year,month,start_day,end_date);\r\n        // 6주일경우 42, 5주는 35\r\n        let len = 42;\r\n        if(start_day + end_date <= 35) {\r\n          len = 35;\r\n        }\r\n      \r\n        // 이전달 날짜 (prev:true)\r\n        for(let i=start_day-1; i>=0; i--) {\r\n          let old = this.moment(currentDate);\r\n          old.subtract(1, 'month');\r\n          let old_last = old.endOf('month').date();\r\n          \r\n          if(x===0) {\r\n            this.dates.push({\r\n              year: old.year(),\r\n              month: old.month()+1,\r\n              day: old_last - i,\r\n              prev: true,\r\n              uid: this.uuidv4()\r\n            });\r\n          }\r\n          else {\r\n            this.dates.push({\r\n              year: old.year(),\r\n              month: old.month()+1,\r\n              day: '',\r\n              prev: true,\r\n              uid: this.uuidv4()\r\n            });\r\n          }\r\n        }\r\n        \r\n        // 현재달 날짜 (prev: 이전날짜는 prev: true)\r\n        for(let i=0; i< len; i++) {\r\n          // console.log('i, day, start_day, end_date', i, day, start_day, end_date)\r\n          if(i>=start_day && day<end_date) {\r\n            let date = {\r\n              year: year,\r\n              month: month,\r\n              day: ++day,\r\n              enable: true,\r\n              uid: this.uuidv4()\r\n            };\r\n            // console.log('날짜',year, month, day)\r\n            date.prev = this.moment('%d-%02d-%02d'.format(year,month,day+1)).isBefore(this.moment());\r\n            this.dates.push(date);\r\n          }\r\n        }\r\n\r\n        let monthly = `${currentDate.year()}-${currentDate.month()+1}`;\r\n        \r\n        // let url = `public/product/${this.$route.query.id}/schedule/monthly/${monthly}`;\r\n        \r\n        //test\r\n        //url = 'http://localhost:8000/' + url;\r\n        \r\n        // await this.$axios.get(url).then(res => {\r\n        //   res.data.dates.forEach(item => {\r\n        //     let current = this.dates.filter(date_item => {\r\n        //         return date_item.year === item.year &&\r\n        //           date_item.month === item.month &&\r\n        //           date_item.day === item.day;\r\n        //       })[0];\r\n\r\n        //     if(current && item.day>0 && item.remain > 0) {\r\n        //       current.enable = true;\r\n        //     }\r\n            \r\n            // // times가 있을 경우 loop 실행\r\n            // // if(item.day>0 && item.times.length>0) \r\n            // if(item.day>0) {\r\n            //   item.times = item.times.filter(time => {\r\n            //     return !time.break_time\r\n            //   });\r\n\r\n            //   item.times.forEach(item => {\r\n            //     item.selected = false;\r\n            //   });\r\n            //   let date = this.dates.filter(date => {\r\n            //     return date.year === item.year &&\r\n            //       date.month === item.month &&\r\n            //       date.day === item.day;\r\n            //   })[0];\r\n            //   date.enable = true;\r\n            //   date.times = item.times;\r\n            //   // if(date.day===15) {\r\n            //   //   date.enable = false;\r\n            //   // }\r\n            //}\r\n            \r\n        //   });\r\n        // });\r\n        \r\n        this.calendar.push({\"year\": year, \"month\": month, \"dates\": this.dates})\r\n        if(x===5) this.visible = true;\r\n      }\r\n    },\r\n    calcPeriod(start_date, end_date) {\r\n      if(!start_date) {\r\n        return 0;\r\n      }\r\n      let resv_date = this.dateFormat(this.dateToStr(start_date), 'date_4');\r\n      let resv_end_date = this.dateFormat(this.dateToStr(end_date), 'date_4');\r\n      return this.moment(resv_end_date).diff(this.moment(resv_date), 'days') + 1;\r\n    },\r\n    \r\n  },\r\n  computed: {\r\n    isIOS() {\r\n      if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i)) { // ios13 이전 iPhone, iPad, iPod\r\n        return true;\r\n      } else if (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1) { // iPad (ios13 버전 이상)\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n    iconStyle() {\r\n      if (this.iconCustomStyle) return this.iconCustomStyle;\r\n      else return {\r\n        color: this.brandColor.sub.color\r\n      };\r\n    },\r\n    minPeriodDate() {\r\n      let date = this.minimum;\r\n      return date>1 ? `${date-1}박 ${date}일` : `무박 ${date}일`;\r\n      //return date>1 ? `${date-1}박` : `무박`;\r\n    },\r\n    selectedDate() {\r\n      let start_date = this.formattedDate(this.start_date);\r\n      let end_date = this.formattedDate(this.end_date);\r\n      \r\n      if(start_date===end_date) {\r\n        return start_date;\r\n      }\r\n      else {\r\n        return `${start_date} - ${end_date}`;\r\n      }\r\n    },\r\n    period() {\r\n      let resv_date = this.dateFormat(this.dateToStr(this.start_date), 'date_4');\r\n      let resv_end_date = this.dateFormat(this.dateToStr(this.end_date), 'date_4');\r\n      return {\r\n        period: true,\r\n        resv_date: resv_date,\r\n        resv_end_date: resv_end_date,\r\n        start_date_label: `${this.start_date.month}/${this.start_date.day}`,\r\n        end_date_label: `${this.end_date.month}/${this.end_date.day}`,\r\n        days: this.moment(resv_end_date).diff(this.moment(resv_date), 'days')\r\n      }\r\n    },\r\n    btnEnable() {\r\n      return (this.period.days+1) >= this.minimum;\r\n    },\r\n    btnColor() {\r\n      if(this.btnEnable) {\r\n        return {\r\n          color: this.brandColor.white,\r\n          bg: this.brandBgColor.brand\r\n        }\r\n      } else {\r\n        return {\r\n          color: this.brandColor.white,\r\n          bg: this.brandBgColor.help\r\n        }\r\n      }\r\n    },\r\n    customStyle() {\r\n        return {\r\n          borderRadius: '8px'\r\n        }\r\n      },\r\n    wrapScroll() {\r\n      return {\r\n        overflowY: 'auto',\r\n        height: 'calc(100% - 60px)',\r\n        // backgroundColor: this.brandBgColor.main.backgroundColor\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    \r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.lp-month {\r\n  font-size: 15px;\r\n  margin: 0 12px;\r\n}\r\n.lp-days {\r\n  padding: 13px 20px;\r\n  /* border-top: 1px solid #ddd; */\r\n  border-bottom: 1px solid #ddd;\r\n  margin-bottom: 12px;\r\n  /* position: fixed; */\r\n  top: 50px;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1;\r\n  background-color: rgba(255,255,255,0.7);\r\n}\r\n.lp-day {\r\n  width: 14.2857%;\r\n  text-align: center;\r\n}\r\n.lp-day-sun {\r\n  color: #f45853;\r\n}\r\n.lp-day-sat {\r\n  color: #3c93cf;\r\n}\r\n.lp-dates {\r\n  margin-bottom: 20px;\r\n}\r\n.lp-date {\r\n  width: 14.2857%;\r\n  height: 14.2857%;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 8px 0;\r\n}\r\n.icon-arrow {\r\n  color: #fff;\r\n  background-color: #777;\r\n  border-radius: 50%;\r\n  font-size: 18px;\r\n}\r\n.box-resv {\r\n  padding: 12px 0;\r\n  border-top: 1px solid #ddd;\r\n}\r\n\r\n.date-number {\r\n  height: 100%;\r\n  width: 20px;\r\n  text-align: center;\r\n  top: 0;\r\n  left: calc(50% - 10px);\r\n}\r\n\r\n.fixed-bottom-ie {\r\n  transform: translateX(-50%) translateY(-60%) !important;\r\n  max-width: 33% !important;\r\n}\r\n.fixed-bottom-ie-content {\r\n  margin: 0 44px;\r\n}\r\n.fixed-bottom-ios {\r\n  position: absolute !important;\r\n}\r\n</style>\r\n\r\n"],"sourceRoot":"src/components/Components/Form"}]}