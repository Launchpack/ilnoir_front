{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputRangeDual.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputRangeDual.vue","mtime":1605259988000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.sub\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport vueSlider from 'vue-slider-component';\nimport FormMixin from \"@/components/Mixins/FormMixin\";\nimport 'vue-slider-component/theme/antd.css';\nexport default {\n  name: 'c-input-rangeDual',\n  components: {\n    vueSlider: vueSlider\n  },\n  mixins: [FormMixin],\n  props: {\n    min: {\n      type: [Number, String],\n      required: true\n    },\n    max: {\n      type: [Number, String],\n      required: true\n    },\n    unit: {\n      type: String,\n      required: false\n    },\n    interval: {\n      type: [Number, String],\n      required: true\n    }\n  },\n  mounted: function mounted() {\n    if (this.value) {\n      this.onChange();\n    }\n  },\n  watch: {\n    value: function value(n) {\n      this.inputValue = n;\n    }\n  },\n  data: function data() {\n    return {\n      inputValue: this.value,\n      delay: false\n    };\n  },\n  computed: {\n    computedInterval: function computedInterval() {\n      if (this.interval) return this.interval;else {\n        if (this.max > 100) return this.max / 100;else if (this.max > 10) return this.max / 10;else return 1;\n      }\n    },\n    bgStyle: function bgStyle() {\n      return this.brandBgColor.white;\n    },\n    dotStyle: function dotStyle() {\n      return {\n        border: '2px solid ' + this.getColor('브랜드 강조 색상'),\n        width: '100%',\n        height: '100%',\n        borderRadius: '100%',\n        backgroundColor: 'white'\n      };\n    },\n    processStyle: function processStyle() {\n      return this.brandBgColor.brand;\n    },\n    sliderStyle: function sliderStyle() {\n      return this.brandBgColor.brand;\n    },\n    tooltipStyle: function tooltipStyle() {\n      var processColor = this.getColor('브랜드 강조 색상');\n      return {\n        background: processColor,\n        border: \"1px solid \".concat(processColor)\n      };\n    },\n    selectedLabel: function selectedLabel() {\n      return \"\".concat(this.getLabel(this.inputValue[0]), \" ~ \").concat(this.getLabel(this.inputValue[1]));\n    },\n    unitStyle: function unitStyle() {\n      return this.brandColor.sub;\n    }\n  },\n  methods: {\n    onChange: function onChange() {\n      this.$emit('update:value', this.inputValue);\n      this.$emit('update:selectedValue', this.selectedLabel);\n    },\n    getLabel: function getLabel(value) {\n      var val = parseInt(value);\n      if (val === 0) return \"0\".concat(this.unit ? this.unit : '');\n      var txt = '';\n      var unit = 1000000000000;\n      var unitTextArray = ['조 ', '억 ', '만 '];\n      var utIdx = 0;\n\n      while (unit >= 10000) {\n        var divideVal = Math.floor(val / unit);\n\n        if (divideVal >= 1) {\n          txt += divideVal + unitTextArray[utIdx];\n          val = val - divideVal * unit;\n        }\n\n        utIdx++;\n        unit /= 10000;\n      }\n\n      if (val > 0 || val === '') txt += val;\n      return \"\".concat(txt, \" \").concat(this.unit ? this.unit : '');\n    }\n  }\n};",{"version":3,"sources":["CInputRangeDual.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div :style=\"containerStyle\" class=\"c-input-range-dual-container\r\n              c-root\r\n              position-relative\r\n              full-width\">\r\n\r\n    <div style=\"padding:0 24px\">\r\n      <!-- 레이블 -->\r\n      <div v-if=\"formType.label && label\" :style=\"labelStyle\">{{ label }}</div>\r\n\r\n      <vue-slider ref=\"slider\"\r\n                  v-model=\"inputValue\"\r\n                  :min=\"parseInt(min)\"\r\n                  :max=\"parseInt(max)\"\r\n                  :interval=\"computedInterval\"\r\n                  :height=\"8\"\r\n                  :dotSize=\"20\"\r\n                  :bgStyle=\"bgStyle\"\r\n                  :dotStyle=\"dotStyle\"\r\n                  :processStyle=\"processStyle\"\r\n                  :sliderStyle=\"sliderStyle\"\r\n                  :tooltipStyle=\"tooltipStyle\"\r\n                  tooltip=\"none\"\r\n                  @change=\"onChange\"\r\n      >\r\n        <template v-slot:dot=\"{ value, focus }\">\r\n          <div :style=\"dotStyle\"></div>\r\n        </template>\r\n\r\n      </vue-slider>\r\n      <!-- Label Number -->\r\n      <div class=\"unit\" :style=\"unitStyle\">{{ selectedLabel }}</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import vueSlider from 'vue-slider-component'\r\n  import FormMixin from \"@/components/Mixins/FormMixin\";\r\n  import 'vue-slider-component/theme/antd.css'\r\n\r\n\r\n  export default {\r\n    name: 'c-input-rangeDual',\r\n\r\n    components: {\r\n      vueSlider\r\n    },\r\n\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n\r\n    props: {\r\n      min: {\r\n        type: [Number, String],\r\n        required: true,\r\n      },\r\n      max: {\r\n        type: [Number, String],\r\n        required: true,\r\n      },\r\n      unit: {\r\n        type: String,\r\n        required: false,\r\n      },\r\n      interval: {\r\n        type: [Number, String],\r\n        required: true,\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      if(this.value) {\r\n        this.onChange();\r\n      }\r\n    },\r\n\r\n    watch: {\r\n      value(n) {\r\n        this.inputValue = n;\r\n      }\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        inputValue: this.value,\r\n        delay: false\r\n      };\r\n    },\r\n\r\n    computed: {\r\n      computedInterval() {\r\n        if(this.interval)  return this.interval;\r\n        else {\r\n          if(this.max > 100)\r\n            return this.max / 100;\r\n\r\n          else if(this.max > 10)\r\n            return this.max / 10;\r\n\r\n          else\r\n            return 1;\r\n        }\r\n      },\r\n      bgStyle() {\r\n        return this.brandBgColor.white;\r\n      },\r\n      dotStyle() {\r\n        return {\r\n          border: '2px solid '+this.getColor('브랜드 강조 색상'),\r\n          width: '100%',\r\n          height: '100%',\r\n          borderRadius: '100%',\r\n          backgroundColor:'white'\r\n        };\r\n      },\r\n      processStyle() {\r\n        return this.brandBgColor.brand;\r\n      },\r\n      sliderStyle() {\r\n        return this.brandBgColor.brand;\r\n      },\r\n      tooltipStyle() {\r\n        let processColor = this.getColor('브랜드 강조 색상');\r\n        return {\r\n          background: processColor,\r\n          border: `1px solid ${processColor}`\r\n        };\r\n      },\r\n      selectedLabel() {\r\n        return `${this.getLabel(this.inputValue[0])} ~ ${this.getLabel(this.inputValue[1])}`;\r\n      },\r\n      unitStyle() {\r\n        return this.brandColor.sub;\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      onChange() {\r\n        this.$emit('update:value', this.inputValue);\r\n        this.$emit('update:selectedValue', this.selectedLabel);\r\n      },\r\n      getLabel(value) {\r\n        let val = parseInt(value);\r\n        if(val === 0)\r\n          return `0${this.unit ? this.unit : ''}`;\r\n\r\n        let txt = '';\r\n        let unit = 1000000000000;\r\n\r\n        let unitTextArray = ['조 ','억 ','만 '];\r\n        let utIdx = 0;\r\n        while(unit >= 10000) {\r\n          let divideVal = Math.floor(val / unit);\r\n          if(divideVal>=1) {\r\n            txt += divideVal + unitTextArray[utIdx];\r\n            val = val - divideVal*unit;\r\n          }\r\n          utIdx++;\r\n          unit /= 10000;\r\n        }\r\n        if(val>0 || val === '')\r\n          txt += val;\r\n        return `${txt} ${this.unit ? this.unit : ''}`;\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n  .unit\r\n    font-size 0.9rem\r\n    margin-top 4px\r\n    text-align right\r\n</style>\r\n"],"sourceRoot":"src/components/Components/Form"}]}