{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js!/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/ilnoir/src/components/Components/Common/LocationComp.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Components/Common/LocationComp.vue","mtime":1605260011000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.index-of\";\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'LocationComp',\n  components: {},\n  mixins: [],\n  props: {\n    type: {\n      type: String,\n      required: false\n    },\n    currentStatus: {\n      type: Boolean,\n      required: false\n    },\n    changePosition: {\n      type: Object,\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      \"address\": {}\n    };\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    var current = this.$store.getters.currentPosition;\n    if (current && current.lng && current.lat) this.getAddress(current);else this.getAddress();\n  },\n  methods: {\n    getAddress: function getAddress(params) {\n      var _this = this;\n\n      /* 좌표 세팅 로직 시작 */\n      if (params === undefined) {\n        // navigator 로 현재 좌표 가져오기\n        if (navigator.geolocation) {\n          // GPS를 지원하면 navigator.geolocation 으로 현재 좌표 얻어오기\n          navigator.geolocation.getCurrentPosition(function (position) {\n            _this.address.latitude = position.coords.latitude;\n            _this.address.longitude = position.coords.longitude;\n            var location = {\n              lat: _this.address.latitude,\n              lng: _this.address.longitude\n            };\n\n            _this.$store.commit('setCurrentPosition', location);\n\n            _this.$store.commit('setCurrentAddress', _this.address);\n\n            _this.$emit('currentAddress', _this.address); // 다시 호출해서 좌표 업데이트하는 방식 - recursive\n\n\n            _this.getAddress(location);\n          }, function (error) {}, {\n            enableHighAccuracy: false,\n            maximumAge: Infinity,\n            timeout: 10000\n          });\n        } else {\n          console.log('GPS를 지원하지 않습니다');\n        }\n      } else {\n        this.address.latitude = params.lat;\n        this.address.longitude = params.lng;\n        var location = {\n          lat: this.address.latitude,\n          lng: this.address.longitude\n        };\n        this.$store.commit('setCurrentPosition', location);\n        this.$store.commit('setCurrentAddress', this.address);\n        this.$emit('currentAddress', this.address);\n      }\n      /* 좌표 세팅 로직 끝 */\n      // 가져온 좌표로 주소 받아오기\n\n\n      setTimeout(function () {\n        _this.$axios.get(\"public/service/geocode?latitude=\".concat(_this.address.latitude, \"&longitude=\").concat(_this.address.longitude)).then(function (res) {\n          if (res.status === 200) {\n            if (res.data.address) {\n              _this.address = res.data.address;\n              var _location = {\n                lat: _this.address.latitude,\n                lng: _this.address.longitude\n              };\n\n              _this.$store.commit('setCurrentPosition', _location);\n\n              _this.$store.commit('setCurrentAddress', _this.address);\n\n              _this.$emit('currentAddress', _this.address);\n            } // API 키가 없을 경우 예외처리, (사용하지 않을 경우) 서비스명으로 처리하도록 인자값 false 전달\n            // if (res.data.address === false) this.setFullAddress(false);\n            // else this.setFullAddress(true);\n            // 위치 업데이트 emit\n\n\n            _this.$emit('updatePosition'); // this.setFullAddress();\n\n          }\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }, 200);\n    },\n    clickMenu: function clickMenu() {\n      this.$root.$emit('openDrawer');\n    }\n  },\n  computed: {\n    logo: function logo() {\n      if (this.$store.getters.brand) return this.$store.getters.brand.logo;\n    },\n    searchPage: function searchPage() {\n      if (this.$route.path.indexOf('search') > -1) return true;else return false;\n    }\n  },\n  watch: {\n    currentStatus: function currentStatus(n) {\n      if (n) {\n        // 현재 위치로 지정\n        this.getAddress();\n        this.$emit('currentStatus');\n      }\n    },\n    changePosition: function changePosition(n) {\n      if (n) {\n        // 설정된 위치로 지정\n        this.getAddress(n);\n        this.$emit('changePosition');\n      }\n    }\n  }\n};",{"version":3,"sources":["LocationComp.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div class=\"flex-align unselect\" :style=\"[brandBgColor.white, radius]\"\n  style=\"width:256px; height:48px; padding: 0 16px;\" @click=\"$emit('clicked')\" >\n  <i class=\"material-icons size-18\" :style=\"brandColor.primary\" style=\"margin-right:4px;\">room</i>\n  <span class=\"ellipsis size-14 weight-500\" style=\"width:100%\"\n    :style=\"[brandColor.main]\">{{ address.full }}</span>\n</div>\n</template>\n<script>\n\nexport default {\n  name: 'LocationComp',\n  components: {\n\n  },\n  mixins: [\n\n  ],\n  props: {\n    type: {\n      type: String,\n      required: false,\n    },\n    currentStatus: {\n      type: Boolean,\n      required: false,\n    },\n    changePosition: {\n      type: Object,\n      required: false,\n    },\n\n  },\n  data() {\n    return {\n      \"address\": {}\n    }\n  },\n  created() {\n\n  },\n  mounted() {\n    let current = this.$store.getters.currentPosition;\n    if (current && current.lng && current.lat) this.getAddress(current);\n    else this.getAddress();\n  },\n  \n  methods: {\n    getAddress(params) {\n      /* 좌표 세팅 로직 시작 */\n      if (params === undefined) {\n        // navigator 로 현재 좌표 가져오기\n        if (navigator.geolocation) { // GPS를 지원하면 navigator.geolocation 으로 현재 좌표 얻어오기\n          navigator.geolocation.getCurrentPosition(position => {\n            this.address.latitude = position.coords.latitude;\n            this.address.longitude = position.coords.longitude;\n            \n            let location = {lat: this.address.latitude, lng: this.address.longitude};\n            this.$store.commit('setCurrentPosition', location);\n            this.$store.commit('setCurrentAddress', this.address);\n            this.$emit('currentAddress', this.address);\n            \n            // 다시 호출해서 좌표 업데이트하는 방식 - recursive\n            this.getAddress(location);\n          }, error => {}, {\n            enableHighAccuracy: false,\n            maximumAge:Infinity,\n            timeout: 10000\n          });\n        } \n        else {\n          console.log('GPS를 지원하지 않습니다');\n        }\n      } \n      else {\n        this.address.latitude = params.lat;\n        this.address.longitude = params.lng;\n        \n        let location = {lat: this.address.latitude, lng: this.address.longitude};\n        this.$store.commit('setCurrentPosition', location);\n        this.$store.commit('setCurrentAddress', this.address);\n        this.$emit('currentAddress', this.address);\n      }\n      /* 좌표 세팅 로직 끝 */\n\n      // 가져온 좌표로 주소 받아오기\n      setTimeout(() => {\n        this.$axios.get(`public/service/geocode?latitude=${this.address.latitude}&longitude=${this.address.longitude}`)\n          .then(res => {\n            if (res.status === 200) {\n              if (res.data.address) {\n                this.address = res.data.address;\n\n                let location = {lat: this.address.latitude, lng: this.address.longitude};\n                this.$store.commit('setCurrentPosition', location);                \n                this.$store.commit('setCurrentAddress', this.address);\n                this.$emit('currentAddress', this.address);\n              }\n\n              // API 키가 없을 경우 예외처리, (사용하지 않을 경우) 서비스명으로 처리하도록 인자값 false 전달\n              // if (res.data.address === false) this.setFullAddress(false);\n              // else this.setFullAddress(true);\n\n              // 위치 업데이트 emit\n              this.$emit('updatePosition');\n\n              // this.setFullAddress();\n            }\n          })\n          .catch(err => {\n            console.log(err);\n          })\n      }, 200)\n    },\n    clickMenu() {\n      this.$root.$emit('openDrawer')\n    }\n  },\n  computed: {\n    logo() {\n      if (this.$store.getters.brand) return this.$store.getters.brand.logo;\n    },\n    searchPage() {\n      if (this.$route.path.indexOf('search')>-1) return true;\n      else return false;\n    }\n  },\n  watch: {\n    currentStatus(n) {\n      if (n) {\n        // 현재 위치로 지정\n        this.getAddress();\n        this.$emit('currentStatus');\n      }\n    },\n    changePosition(n) {\n      if (n) {\n        // 설정된 위치로 지정\n        this.getAddress(n);\n        this.$emit('changePosition');\n      }\n    }\n  }\n}\n</script>\n<style scoped>\n.location {\n    height: 32px;\n    width: 180px;\n    padding: 6px;\n  }\n</style>\n\n"],"sourceRoot":"src/components/Components/Common"}]}