{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Page/ProductDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Page/ProductDetail.vue","mtime":1605259993000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\nimport ProductDetail from '@/components/Pages/ProductDetail';\nexport default {\n  components: {\n    ProductDetail: ProductDetail\n  },\n  data: function data() {\n    return {\n      enablePage: false,\n      componentName: '/',\n      category_id: 0,\n      category: {},\n      boards: [{\n        \"id\": 25367,\n        \"name\": \"ProductDetail\",\n        \"template_name\": \"\",\n        \"route__id\": 10614,\n        \"activated\": true,\n        \"login_required\": false,\n        \"grade\": 0,\n        \"partner_grade\": 0,\n        \"category1\": null,\n        \"category2\": null,\n        \"category3\": null\n      }]\n    };\n  },\n  watch: {\n    componentName: function componentName(n) {\n      if (n === '') {\n        if (!this.isLogin) {\n          this.$router.replace('/signin');\n        } else {\n          var partner_grade = this.boards.map(function (item) {\n            return item.partner_grade;\n          }).reduce(function (p, c) {\n            return p > c ? c : p;\n          });\n          var grade = this.boards.map(function (item) {\n            return item.grade;\n          }).reduce(function (p, c) {\n            return p > c ? c : p;\n          }); // 파트너 등급 설정 된 페이지가 있을 경우\n\n          if (partner_grade > 0) {\n            // 파트너가 아닌 경우\n            if (!this.user.partner) {\n              this.$router.replace('/partner_signup');\n            } // 파트너일땐, 등급 안맞는 페이지로 이동\n            else {\n                this.$router.replace('/wrong_partner_grade?order=' + partner_grade);\n              }\n          } else if (grade > 0) {\n            this.$router.replace('/wrong_grade?order=' + grade);\n          }\n        }\n      }\n    },\n    '$route': function $route() {\n      this.findName();\n    }\n  },\n  created: function created() {\n    this.findName();\n  },\n  methods: {\n    findName: function findName() {\n      var _this = this;\n\n      this.getProductCategories().then(function (res) {\n        if (res === 'ok') {\n          _this.enablePage = true;\n          _this.componentName = _this.getComponentName();\n        }\n      });\n    },\n    getProductCategories: function getProductCategories() {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        if (_this2.$route.path === '/product_detail') {\n          _this2.$axios.get(\"/user/0/mapping/product/\".concat(_this2.$route.query.id, \"?fields=category1,category2,category3\")).then(function (cat_res) {\n            if (cat_res.status === 200) {\n              _this2.category = cat_res.data;\n\n              if (cat_res.data.category3) {\n                _this2.category_id = cat_res.data.category3;\n              } else if (cat_res.data.category2) {\n                _this2.category_id = cat_res.data.category2;\n              } else if (cat_res.data.category1) {\n                _this2.category_id = cat_res.data.category1;\n              }\n            }\n\n            resolve('ok');\n          }).catch(function () {\n            resolve('ok');\n          });\n        } else {\n          resolve('ok');\n        }\n      });\n    },\n    getComponentName: function getComponentName() {\n      if (this.isLogin) {\n        var name = '';\n\n        if (this.user.grade) {\n          for (var i = this.user.grade.order; i >= 1; i--) {\n            name = this.getBoardsUserGrade(i);\n\n            if (name !== '') {\n              break;\n            }\n          }\n        } else {\n          name = this.getBoardsUserLogin();\n        }\n\n        if (name === '') {\n          name = this.getBoardsGuest();\n        }\n\n        return name;\n      } else {\n        return this.getBoardsGuest();\n      }\n    },\n    getName: function getName(board) {\n      if (board.template_name !== '') {\n        return this.dashToPascal(\"\".concat(board.template_name).concat(board.name));\n      } else {\n        return board.name;\n      }\n    },\n    dashToPascal: function dashToPascal(value) {\n      var camel = value.replace(/([-_][a-z])/ig, function ($1) {\n        return $1.toUpperCase().replace('-', '').replace('_', '');\n      });\n      return camel[0].toUpperCase() + camel.substring(1);\n    },\n    getBoardsGuest: function getBoardsGuest() {\n      var board = this.boards.filter(function (item) {\n        return item.activated && item.login_required === false;\n      });\n      board = this.getCategories(board, true, 0);\n      return board.length === 0 ? '' : this.getName(board[0]);\n    },\n    getBoardsUserLogin: function getBoardsUserLogin() {\n      var board = this.boards.filter(function (item) {\n        return item.activated && item.login_required === true && (item.grade === 1 || !item.grade);\n      });\n      board = this.getCategories(board, false, 1);\n      return board.length === 0 ? '' : this.getName(board[0]);\n    },\n    getBoardsUserGrade: function getBoardsUserGrade(grade) {\n      var board = this.boards.filter(function (item) {\n        return item.activated && item.login_required === true && item.grade === grade;\n      });\n      board = this.getCategories(board, false, grade);\n      return board.length === 0 ? '' : this.getName(board[0]);\n    },\n    getCategories: function getCategories(boards, guest, grade) {\n      var _this3 = this;\n\n      if (['/product', '/search', '/product_detail', '/filter'].indexOf(this.$route.path) === -1 || boards.length === 0) {\n        return boards;\n      } // 해당 카테고리 페이지가 있는 경우 반환\n\n\n      var category_id = this.$route.query.gnb ? this.$route.query.gnb : this.$route.query.tab ? this.$route.query.tab : this.$route.query.category;\n      var cat_board = [];\n\n      if (this.$route.query.category3) {\n        cat_board = boards.filter(function (item) {\n          return item.category3 === Number(_this3.$route.query.category3);\n        });\n\n        if (cat_board.length > 0) {\n          category_id = this.$route.query.category3;\n        }\n      }\n\n      if (cat_board.length === 0 && this.$route.query.category2) {\n        cat_board = boards.filter(function (item) {\n          return item.category2 === Number(_this3.$route.query.category2);\n        });\n\n        if (cat_board.length > 0) {\n          category_id = this.$route.query.category2;\n        }\n      }\n\n      if (cat_board.length === 0 && this.$route.query.category1) {\n        cat_board = boards.filter(function (item) {\n          return item.category1 === Number(_this3.$route.query.category1);\n        });\n\n        if (cat_board.length > 0) {\n          category_id = this.$route.query.category1;\n        }\n      }\n\n      if (this.category_id > 0) {\n        category_id = this.category_id;\n      } // query로 tab 또는 category로 id 가져온게 없는 경우\n\n\n      if (category_id === undefined) {\n        // 카테고리 설정 없는 보드 존재할 경우\n        var board_all = boards.filter(function (item) {\n          return !item.category1;\n        });\n\n        if (board_all.length > 0) {\n          return board_all;\n        } else {\n          return [];\n        }\n      }\n\n      category_id = parseInt(category_id);\n      cat_board = boards.filter(function (item) {\n        return item.category1 === category_id || item.category2 === category_id || item.category3 === category_id;\n      }); // 현재 카테고리와 일치하는 카테고리가 없는 경우, 부모 카테고리로 된 보드 찾기\n\n      if (cat_board.length === 0) {\n        cat_board = boards.filter(function (item) {\n          return item.category1 === _this3.category.category1 && item.category2 === _this3.category.category2;\n        });\n\n        if (cat_board.length === 0) {\n          cat_board = boards.filter(function (item) {\n            return item.category1 === _this3.category.category1;\n          });\n        }\n\n        if (cat_board.length === 0) {\n          cat_board = boards.filter(function (item) {\n            return !item.category1;\n          });\n        }\n      } // 해당 보드가 없는 경우\n\n\n      if (cat_board.length === 0) {\n        return [];\n      } else {\n        if (guest) {\n          // 비회원일 때, 상위 회원등급에 해당 카테고리 있는 경우 빈값\n          if (this.getBoardsUserLogin() !== '') {\n            return [];\n          } else {\n            var hasUpperGrade = false;\n\n            for (var i = 1; i <= 10; i++) {\n              var upper_board = this.getBoardsUserGrade(i);\n\n              if (upper_board !== '') {\n                hasUpperGrade = true;\n                break;\n              }\n            }\n\n            if (hasUpperGrade) {\n              return [];\n            }\n          }\n        } // 상위등급에서 해당 카테고리가 있는 경우\n\n\n        if (!guest && grade > 1) {\n          var _hasUpperGrade = false;\n\n          for (var _i = grade + 1; _i <= 10; _i++) {\n            var _upper_board = this.getBoardsUserGrade(_i);\n\n            if (_upper_board !== '') {\n              _hasUpperGrade = true;\n            }\n          }\n\n          if (_hasUpperGrade) {\n            // 하위등급에 해당 카테고리가 없는 경우\n            var hasLowerGrade = false;\n\n            for (var _i2 = grade - 1; _i2 > 0; _i2--) {\n              var lower_board = this.getBoardsUserGrade(_i2);\n\n              if (lower_board !== '') {\n                hasLowerGrade = true;\n              }\n            }\n\n            if (hasLowerGrade === false) {\n              return [];\n            }\n          }\n        }\n\n        return cat_board;\n      }\n    }\n  }\n};",{"version":3,"sources":["ProductDetail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <component v-if=\"enablePage\" :is=\"componentName\"></component>\n</template>\n\n<script>\n  import ProductDetail from '@/components/Pages/ProductDetail'\n\n  export default {\n    components: { ProductDetail },\n    data() {\n      return {\n        enablePage: false,\n        componentName: '/',\n        category_id: 0,\n        category: {},\n        boards: [{\"id\": 25367, \"name\": \"ProductDetail\", \"template_name\": \"\", \"route__id\": 10614, \"activated\": true, \"login_required\": false, \"grade\": 0, \"partner_grade\": 0, \"category1\": null, \"category2\": null, \"category3\": null}]\n      }\n    },\n    watch: {\n      componentName(n) {\n        if(n === '') {\n          if(!this.isLogin) {\n            this.$router.replace('/signin');\n          }\n          else {\n            let partner_grade = this.boards.map(item=>{ return item.partner_grade }).reduce((p,c) => { return p > c ? c : p; });\n            let grade = this.boards.map(item=>{ return item.grade }).reduce((p,c) => { return p > c ? c : p; });\n\n\n            // 파트너 등급 설정 된 페이지가 있을 경우\n            if(partner_grade > 0) {\n              // 파트너가 아닌 경우\n              if(!this.user.partner) {\n                this.$router.replace('/partner_signup');\n              }\n              // 파트너일땐, 등급 안맞는 페이지로 이동\n              else {\n                this.$router.replace('/wrong_partner_grade?order='+partner_grade);\n              }\n            }\n            else if(grade > 0) {\n              this.$router.replace('/wrong_grade?order='+grade);\n            }\n          }\n        }\n      },\n      '$route'() {\n        this.findName();\n      }\n    },\n    created() {\n      this.findName();\n    },\n    methods: {\n      findName() {\n        this.getProductCategories().then(res => {\n          if (res === 'ok') {\n            this.enablePage = true;\n            this.componentName = this.getComponentName();\n          }\n        });\n      },\n      getProductCategories() {\n        return new Promise((resolve)=>{\n          if(this.$route.path === '/product_detail') {\n            this.$axios.get(`/user/0/mapping/product/${this.$route.query.id}?fields=category1,category2,category3`).then(cat_res=>{\n              if(cat_res.status === 200) {\n                this.category = cat_res.data;\n                if(cat_res.data.category3) {\n                  this.category_id = cat_res.data.category3;\n                } else if(cat_res.data.category2) {\n                  this.category_id = cat_res.data.category2;\n                } else if(cat_res.data.category1) {\n                  this.category_id = cat_res.data.category1;\n                }\n              }\n              resolve('ok');\n            }).catch(()=>{\n              resolve('ok');\n            });\n          }\n          else {\n            resolve('ok');\n          }\n        });\n      },\n      getComponentName() {\n        if(this.isLogin) {\n          let name = '';\n          if(this.user.grade) {\n            for(let i=this.user.grade.order; i>=1; i--) {\n              name = this.getBoardsUserGrade(i);\n              if(name!=='') {\n                break;\n              }\n            }\n          }\n          else {\n            name = this.getBoardsUserLogin();\n          }\n\n          if(name === '') {\n            name = this.getBoardsGuest();\n          }\n          return name;\n        }\n        else {\n          return this.getBoardsGuest();\n        }\n      },\n      getName(board) {\n        if(board.template_name !== '') {\n          return this.dashToPascal(`${board.template_name}${board.name}`);\n        } else {\n          return board.name;\n        }\n      },\n      dashToPascal(value) {\n        let camel = value.replace(/([-_][a-z])/ig, ($1) => {\n          return $1.toUpperCase()\n            .replace('-', '')\n            .replace('_', '');\n        });\n        return camel[0].toUpperCase() + camel.substring(1);\n      },\n      getBoardsGuest() {\n        let board = this.boards.filter(item=>{ return item.activated && item.login_required === false });\n        board = this.getCategories(board, true, 0);\n        return board.length === 0 ? '' : this.getName(board[0]);\n      },\n      getBoardsUserLogin() {\n        let board = this.boards.filter(item=>{ return item.activated && item.login_required === true && (item.grade === 1 || !item.grade) });\n        board = this.getCategories(board, false, 1);\n        return board.length === 0 ? '' : this.getName(board[0]);\n      },\n      getBoardsUserGrade(grade) {\n        let board = this.boards.filter(item=>{ return item.activated && item.login_required === true && item.grade === grade });\n        board = this.getCategories(board, false, grade);\n        return board.length === 0 ? '' : this.getName(board[0]);\n      },\n      \n      getCategories(boards, guest, grade) {\n          if((['/product','/search','/product_detail','/filter'].indexOf(this.$route.path)===-1) || boards.length === 0) {\n            return boards;\n          }\n    \n          // 해당 카테고리 페이지가 있는 경우 반환\n          let category_id = this.$route.query.gnb ? this.$route.query.gnb : this.$route.query.tab ? this.$route.query.tab : this.$route.query.category;\n          \n          let cat_board = [];\n          if(this.$route.query.category3) {\n            cat_board = boards.filter(item => { return item.category3 === Number(this.$route.query.category3) })\n            if(cat_board.length>0) {\n              category_id = this.$route.query.category3;\n            }\n          }\n          if(cat_board.length === 0 && this.$route.query.category2) {\n            cat_board = boards.filter(item => { return item.category2 === Number(this.$route.query.category2) })\n            if(cat_board.length>0) {\n              category_id = this.$route.query.category2;\n            }\n          }\n          if(cat_board.length === 0 && this.$route.query.category1) {\n            cat_board = boards.filter(item => { return item.category1 === Number(this.$route.query.category1) })\n            if(cat_board.length>0) {\n              category_id = this.$route.query.category1;\n            }\n          }\n          \n          if(this.category_id>0) {\n            category_id = this.category_id;\n          }\n    \n          // query로 tab 또는 category로 id 가져온게 없는 경우\n          if(category_id === undefined) {\n            // 카테고리 설정 없는 보드 존재할 경우\n            let board_all = boards.filter(item=>{ return !item.category1 });\n            if(board_all.length>0) {    \n              return board_all;\n            } else {\n              return [];\n            }\n          }\n          category_id = parseInt(category_id);\n          cat_board = boards.filter(item=>{ return item.category1 === category_id || item.category2 === category_id || item.category3 === category_id });\n          // 현재 카테고리와 일치하는 카테고리가 없는 경우, 부모 카테고리로 된 보드 찾기\n          if(cat_board.length === 0) {\n            cat_board = boards.filter(item => { return item.category1 === this.category.category1 && item.category2 === this.category.category2 });\n    \n            if (cat_board.length === 0) {\n              cat_board = boards.filter(item => { return item.category1 === this.category.category1 });\n            }\n            \n            if (cat_board.length === 0) {\n              cat_board = boards.filter(item=>{ return !item.category1});\n            }\n          }\n    \n          // 해당 보드가 없는 경우\n          if(cat_board.length === 0) {\n            return [];\n          }\n          else {\n            if(guest) {\n              // 비회원일 때, 상위 회원등급에 해당 카테고리 있는 경우 빈값\n              if(this.getBoardsUserLogin() !== '') {\n                return [];\n              } \n              else {\n                let hasUpperGrade = false;\n                for(let i = 1; i<=10; i++ ) {\n                  let upper_board = this.getBoardsUserGrade(i);\n                  if(upper_board !== '') {\n                    hasUpperGrade = true;\n                    break;\n                  }\n                }\n                if(hasUpperGrade) {\n                  return [];\n                }\n              }\n            }\n    \n            // 상위등급에서 해당 카테고리가 있는 경우\n            if(!guest && grade > 1) {\n              let hasUpperGrade = false;\n              for(let i = grade+1; i<=10; i++ ) {\n                let upper_board = this.getBoardsUserGrade(i);\n                if(upper_board !== '') {\n                  hasUpperGrade = true;\n                }\n              }\n              if(hasUpperGrade) {\n                // 하위등급에 해당 카테고리가 없는 경우\n                let hasLowerGrade = false;\n                for(let i = grade-1; i>0; i-- ) {\n                  let lower_board = this.getBoardsUserGrade(i);\n                  if(lower_board !== '') {\n                    hasLowerGrade = true;\n                  }\n                }\n                if(hasLowerGrade === false) {\n                  return [];\n                }\n              }\n            }        \n            return cat_board;\n          }\n        }\n    }\n  }\n</script>"],"sourceRoot":"src/components/Page"}]}