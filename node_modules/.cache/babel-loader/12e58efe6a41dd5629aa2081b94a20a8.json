{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Button/BtnFindlocation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Button/BtnFindlocation.vue","mtime":1605259981000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.trim\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { SweetModal } from 'sweet-modal-vue';\nimport SearchMap from \"../Common/SearchMap\";\nexport default {\n  name: \"BtnFindlocation\",\n  props: {\n    styles: {\n      type: Object,\n      required: false,\n      default: function _default() {\n        return {\n          container: {\n            backgroundColor: '',\n            color: ''\n          }\n        };\n      }\n    }\n  },\n  components: {\n    SearchMap: SearchMap,\n    SweetModal: SweetModal\n  },\n  data: function data() {\n    return {\n      title: '',\n      address: {\n        latitude: 35.0,\n        longitude: 128.0\n      },\n      vMap: false\n    };\n  },\n  created: function created() {\n    this.updateAddress(this.$store.getters.currentPosition);\n  },\n  watch: {\n    vMap: function vMap(n) {\n      this.$emit('vMap', n);\n    }\n  },\n  computed: {\n    fullStyle: function fullStyle() {\n      var deco = {\n        position: 'fixed',\n        width: '100%',\n        height: '100vh',\n        maxWidth: this.$store.getters.deviceWidth + 'px',\n        zIndex: '10',\n        backgroundColor: '#ffffff',\n        top: 0,\n        left: 0,\n        right: 0\n      };\n      return deco;\n    },\n    buttonStyle: function buttonStyle() {\n      var color = 'white';\n      if (this.styles.container.color) color = this.styles.container.color;\n      var deco = {\n        color: color,\n        padding: '4px 0'\n      };\n\n      if (this.styles.container.backgroundColor) {\n        deco.backgroundColor = this.styles.container.backgroundColor;\n      }\n\n      return deco;\n    }\n  },\n  methods: {\n    clickTitle: function clickTitle() {\n      this.$refs.locModal.open();\n    },\n    searchByLocation: function searchByLocation() {\n      this.$refs.locModal.close();\n      this.updateAddress();\n    },\n    clickMap: function clickMap() {\n      this.$refs.locModal.close();\n      this.vMap = true;\n    },\n    clickBtnCurrent: function clickBtnCurrent(center) {\n      var _this = this;\n\n      this.updateAddress({\n        lat: center._lat,\n        lng: center._lng\n      });\n      setTimeout(function () {\n        _this.vMap = false;\n      }, 500);\n    },\n    updateAddress: function updateAddress(params) {\n      var _this2 = this;\n\n      /* 좌표 세팅 로직 시작 */\n      if (params === undefined) {\n        // navigator 로 현재 좌표 가져오기\n        if (navigator.geolocation) {\n          // GPS를 지원하면 navigator.geolocation 으로 현재 좌표 얻어오기\n          navigator.geolocation.getCurrentPosition(function (position) {\n            _this2.address.latitude = position.coords.latitude;\n            _this2.address.longitude = position.coords.longitude;\n            var location = {\n              lat: _this2.address.latitude,\n              lng: _this2.address.longitude\n            };\n\n            _this2.$store.commit('setCurrentPosition', location); // 다시 호출해서 좌표 업데이트하는 방식 - recursive\n\n\n            _this2.updateAddress(location);\n          }, function (error) {//let location = {lat: this.address.latitude, lng: this.address.longitude};\n            //this.updateProductList();\n            // 다시 호출해서 좌표 업데이트하는 방식 - recursive\n            //this.updateAddress(location);\n          }, {\n            enableHighAccuracy: false,\n            maximumAge: Infinity,\n            timeout: 10000\n          });\n        } else {\n          console.log('GPS를 지원하지 않습니다');\n        }\n      } else {\n        this.address.latitude = params.lat;\n        this.address.longitude = params.lng;\n        var location = {\n          lat: this.address.latitude,\n          lng: this.address.longitude\n        };\n        this.$store.commit('setCurrentPosition', location);\n      }\n      /* 좌표 세팅 로직 끝 */\n      // 가져온 좌표로 주소 받아오기\n\n\n      setTimeout(function () {\n        _this2.$axios.get(\"public/service/geocode?latitude=\".concat(_this2.address.latitude, \"&longitude=\").concat(_this2.address.longitude)).then(function (res) {\n          if (res.status === 200) {\n            if (res.data.address) {\n              _this2.address = res.data.address;\n            } // API 키가 없을 경우 예외처리, (사용하지 않을 경우) 서비스명으로 처리하도록 인자값 false 전달\n            // console.log(res.data.address);\n            // if (res.data.address === false) this.setFullAddress(false);\n            // else this.setFullAddress(true);\n            // 위치 업데이트 emit\n\n\n            _this2.$emit('updatePosition');\n\n            _this2.setFullAddress();\n          }\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }, 200);\n    },\n    setFullAddress: function setFullAddress() {\n      if (this.address.sido) {\n        this.title = '%s %s %s'.format(this.address.sido.replace('특별시', '').replace('광역시', '').replace('특별자치도', '').replace('특별자치시', ''), this.address.sigungu, this.address.dong);\n      } // 주소를 얻어오는 동안 서비스명으로 처리. 받아오는 sido, sigungu, dong 이 없을 경우 '  '(공백두칸) 상태\n\n\n      if (this.title.trim() === '') this.title = this.$store.getters.service.title;\n    }\n  }\n};",{"version":3,"sources":["BtnFindlocation.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div v-if=\"title && title !== ''\">\r\n    <div @click=\"clickTitle\" class=\"flex-center unselect\" :style=\"buttonStyle\">\r\n      <div>{{ title }}</div>\r\n      <i class=\"material-icons\" style=\"margin-left:4px\">{{ $refs.locModal && $refs.locModal.is_open ? 'arrow_drop_up' : 'arrow_drop_down' }}</i>\r\n    </div>\r\n    <sweet-modal ref=\"locModal\" overlay-theme=\"dark\">\r\n      <div style=\"padding:20px\">\r\n        <div class=\"p-card-title text-center\" style=\"margin-bottom:20px\">위치 지정</div>\r\n        <div class=\"grid-box\" >\r\n          <div class=\"col-6\" style=\"padding-right:6px\" @click=\"searchByLocation\">\r\n            <div class=\"box text-center\">\r\n              <i class=\"material-icons\" :style=\"brandColor.brand\">my_location</i>\r\n              <div class=\"p-card-subtitleSmall\" :style=\"brandColor.main\">내 위치 지정</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-6\" style=\"padding-left:6px\" @click=\"clickMap\">\r\n            <div class=\"box text-center\">\r\n              <i class=\"material-icons\" :style=\"brandColor.brand\">pin_drop</i>\r\n              <div class=\"p-card-subtitleSmall\" :style=\"brandColor.main\">지도로 위치지정</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </sweet-modal>\r\n\r\n    <!-- 지도에서 위치 찾기 -->\r\n    <div :style=\"fullStyle\" v-if=\"vMap\">\r\n      <search-map @close=\"vMap=false\" @clickBtnCurrent=\"clickBtnCurrent\"></search-map>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import { SweetModal } from 'sweet-modal-vue';\r\n  import SearchMap from \"../Common/SearchMap\";\r\n  export default {\r\n    name: \"BtnFindlocation\",\r\n\r\n    props: {\r\n      styles: {\r\n        type: Object,\r\n        required: false,\r\n        default: function() {\r\n          return {\r\n            container: {\r\n              backgroundColor: '',\r\n              color: '',\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    components: {\r\n      SearchMap,\r\n      SweetModal\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        title: '',\r\n        address: {\r\n          latitude: 35.0,\r\n          longitude: 128.0\r\n        },\r\n        vMap: false\r\n      }\r\n    },\r\n\r\n    created() {\r\n      this.updateAddress(this.$store.getters.currentPosition);\r\n    },\r\n\r\n    watch: {\r\n      vMap(n) {\r\n        this.$emit('vMap', n);\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      fullStyle() {\r\n        let deco = {\r\n          position: 'fixed',\r\n          width: '100%',\r\n          height: '100vh',\r\n          maxWidth: this.$store.getters.deviceWidth+'px',\r\n          zIndex: '10',\r\n          backgroundColor: '#ffffff',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0\r\n        }\r\n        return deco;\r\n      },\r\n      buttonStyle() {\r\n        let color = 'white';\r\n        if(this.styles.container.color) color = this.styles.container.color;\r\n        let deco = {\r\n          color: color,\r\n          padding: '4px 0'\r\n        }\r\n\r\n        if(this.styles.container.backgroundColor) {\r\n          deco.backgroundColor = this.styles.container.backgroundColor;\r\n        }\r\n\r\n        return deco;\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      clickTitle() {\r\n        this.$refs.locModal.open();\r\n      },\r\n      searchByLocation() {\r\n        this.$refs.locModal.close();\r\n        this.updateAddress();\r\n      },\r\n      clickMap() {\r\n        this.$refs.locModal.close();\r\n        this.vMap = true;\r\n      },\r\n      clickBtnCurrent(center) {\r\n        this.updateAddress({lat: center._lat, lng: center._lng});\r\n        setTimeout(()=>{\r\n          this.vMap = false;\r\n        },500);\r\n      },\r\n      updateAddress(params) {\r\n        /* 좌표 세팅 로직 시작 */\r\n        if (params === undefined) {\r\n          // navigator 로 현재 좌표 가져오기\r\n          if (navigator.geolocation) { // GPS를 지원하면 navigator.geolocation 으로 현재 좌표 얻어오기\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n              this.address.latitude = position.coords.latitude;\r\n              this.address.longitude = position.coords.longitude;\r\n              let location = {lat: this.address.latitude, lng: this.address.longitude};\r\n              this.$store.commit('setCurrentPosition', location);\r\n              // 다시 호출해서 좌표 업데이트하는 방식 - recursive\r\n              this.updateAddress(location);\r\n            }, error => {\r\n              //let location = {lat: this.address.latitude, lng: this.address.longitude};\r\n              //this.updateProductList();\r\n              // 다시 호출해서 좌표 업데이트하는 방식 - recursive\r\n              //this.updateAddress(location);\r\n            }, {\r\n              enableHighAccuracy: false,\r\n              maximumAge:Infinity,\r\n              timeout: 10000\r\n            });\r\n\r\n          }\r\n          else {\r\n            console.log('GPS를 지원하지 않습니다');\r\n          }\r\n        }\r\n        else {\r\n          this.address.latitude = params.lat;\r\n          this.address.longitude = params.lng;\r\n          let location = {lat: this.address.latitude, lng: this.address.longitude};\r\n          this.$store.commit('setCurrentPosition', location);\r\n        }\r\n        /* 좌표 세팅 로직 끝 */\r\n\r\n        // 가져온 좌표로 주소 받아오기\r\n        setTimeout(() => {\r\n          this.$axios.get(`public/service/geocode?latitude=${this.address.latitude}&longitude=${this.address.longitude}`)\r\n            .then(res => {\r\n              if (res.status === 200) {\r\n                if (res.data.address) {\r\n                  this.address = res.data.address;\r\n                }\r\n\r\n                // API 키가 없을 경우 예외처리, (사용하지 않을 경우) 서비스명으로 처리하도록 인자값 false 전달\r\n                // console.log(res.data.address);\r\n                // if (res.data.address === false) this.setFullAddress(false);\r\n                // else this.setFullAddress(true);\r\n\r\n                // 위치 업데이트 emit\r\n                this.$emit('updatePosition');\r\n\r\n                this.setFullAddress();\r\n              }\r\n            })\r\n            .catch(err => {\r\n              console.log(err);\r\n            })\r\n        }, 200)\r\n      },\r\n\r\n      setFullAddress() {\r\n        if(this.address.sido) {\r\n          this.title = '%s %s %s'.format(\r\n            this.address.sido.replace('특별시', '').replace('광역시', '').replace('특별자치도', '').replace('특별자치시', ''),\r\n            this.address.sigungu, this.address.dong);\r\n        }\r\n\r\n        // 주소를 얻어오는 동안 서비스명으로 처리. 받아오는 sido, sigungu, dong 이 없을 경우 '  '(공백두칸) 상태\r\n        if (this.title.trim() === '')\r\n          this.title = this.$store.getters.service.title;\r\n      }\r\n    }\r\n  }\r\n</script>\r\n<style lang=\"stylus\" scoped>\r\n  .box\r\n    border 1px solid #ddd\r\n    border-radius 4px\r\n    padding 16px 0\r\n  .box i\r\n    margin-bottom 6px\r\n</style>"],"sourceRoot":"src/components/Components/Button"}]}