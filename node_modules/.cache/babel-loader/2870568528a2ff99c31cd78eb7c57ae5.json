{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js!/Users/mard/dev/ilnoir/node_modules/eslint-loader/index.js??ref--13-0!/Users/mard/dev/ilnoir/src/utils/helper/format-helper.js","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/utils/helper/format-helper.js","mtime":1605259992000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/ilnoir/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _slicedToArray from \"/Users/mard/dev/ilnoir/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport tinycolor from 'tinycolor2';\nimport moment from 'moment';\nimport numeral from 'numeral';\n\nfunction rgbaToHex(rgba) {\n  if (rgba.a === 1) return tinycolor(rgba).toHexString().toUpperCase();\n  return tinycolor(rgba).toHex8String().toUpperCase();\n}\n\nfunction dateFormat(dateString, format) {\n  var date = moment(dateString);\n  return date.format(format);\n}\n/**\r\n * '32x16' string to object.\r\n * @param {string} sizeString  - A string formatted as '32x16'\r\n * @returns {Object} - { width: int, height: int }\r\n */\n\n\nfunction parseSize(sizeString) {\n  var arr = sizeString.split('x');\n  var size = {\n    width: parseInt(arr[0]),\n    height: parseInt(arr[1])\n  };\n  return size;\n}\n/**\r\n * 't0-e-text' string to camel case string.\r\n * @param {string} str  - A string as 't0-e-text'\r\n * @returns {string} - 't0EText'\r\n */\n\n\nfunction camelize(str) {\n  return str.replace(/\\W+(.)/g, function (match, chr) {\n    return chr.toUpperCase();\n  });\n}\n\nfunction camelToDash(str) {\n  return str.replace(/(^[A-Z])/, function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        first = _ref2[0];\n\n    return first.toLowerCase();\n  }).replace(/([A-Z])/g, function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        letter = _ref4[0];\n\n    return \"-\".concat(letter.toLowerCase());\n  });\n} // 문자열 모든 공백 제거\n\n\nfunction removeStringSpace(str) {\n  return str.replace(/(\\s*)/g, '');\n}\n\nfunction currency(num) {\n  return currencyNum(num) + '원';\n}\n\nfunction currencyWon(num) {\n  num = parseInt(num);\n  return '₩' + numeral(num).format('0,0');\n}\n\nfunction currencyNum(num) {\n  num = parseInt(num);\n  return numeral(num).format('0,0');\n}\n\nfunction currencyKor(value, unit) {\n  if (!unit) unit = '원';\n  var val = parseInt(value);\n  if (val === 0) return \"0\".concat(unit);\n  var txt = '';\n  var max_unit = 1000000000000;\n  var unitTextArray = ['조 ', '억 ', '만 '];\n  var utIdx = 0;\n\n  while (max_unit >= 10000) {\n    var divideVal = Math.floor(val / max_unit);\n\n    if (divideVal >= 1) {\n      txt += numeral(divideVal).format('0,0') + unitTextArray[utIdx];\n      val = val - divideVal * max_unit;\n    }\n\n    utIdx++;\n    max_unit /= 10000;\n  }\n\n  if (val > 0 || val === '') {\n    txt += numeral(val).format('0,0');\n  } else if (val === 0) {\n    var txtArray = txt.split('');\n    txtArray.pop();\n    txt = txtArray.join('');\n  }\n\n  return \"\".concat(txt).concat(unit ? unit : '');\n}\n\nfunction thousand(num) {\n  num = parseInt(num);\n  if (num > 1000) return numeral(num).format('0.0a');else return numeral(num).format('0a');\n}\n\nexport { rgbaToHex, dateFormat, parseSize, camelize, camelToDash, removeStringSpace, currency, currencyWon, currencyNum, currencyKor, thousand };",{"version":3,"sources":["/Users/mard/dev/ilnoir/src/utils/helper/format-helper.js"],"names":["tinycolor","moment","numeral","rgbaToHex","rgba","a","toHexString","toUpperCase","toHex8String","dateFormat","dateString","format","date","parseSize","sizeString","arr","split","size","width","parseInt","height","camelize","str","replace","match","chr","camelToDash","first","toLowerCase","letter","removeStringSpace","currency","num","currencyNum","currencyWon","currencyKor","value","unit","val","txt","max_unit","unitTextArray","utIdx","divideVal","Math","floor","txtArray","pop","join","thousand"],"mappings":"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","sourcesContent":["import tinycolor from 'tinycolor2'\r\nimport moment from 'moment'\r\nimport numeral from 'numeral'\r\n\r\nfunction rgbaToHex(rgba) {\r\n  if (rgba.a === 1)\r\n    return tinycolor(rgba).toHexString().toUpperCase();\r\n  return tinycolor(rgba).toHex8String().toUpperCase();\r\n}\r\n\r\nfunction dateFormat(dateString, format) {\r\n  let date = moment(dateString);\r\n  return date.format(format);\r\n}\r\n\r\n/**\r\n * '32x16' string to object.\r\n * @param {string} sizeString  - A string formatted as '32x16'\r\n * @returns {Object} - { width: int, height: int }\r\n */\r\nfunction parseSize(sizeString) {\r\n  const arr = sizeString.split('x');\r\n  let size = {\r\n    width: parseInt(arr[0]),\r\n    height: parseInt(arr[1])\r\n  };\r\n  return size;\r\n}\r\n\r\n/**\r\n * 't0-e-text' string to camel case string.\r\n * @param {string} str  - A string as 't0-e-text'\r\n * @returns {string} - 't0EText'\r\n */\r\n\r\nfunction camelize(str) {\r\n  return str.replace(/\\W+(.)/g, function(match, chr)\r\n  {\r\n    return chr.toUpperCase();\r\n  });\r\n}\r\n\r\nfunction camelToDash(str) {\r\n  return str.replace(/(^[A-Z])/, ([first]) => first.toLowerCase())\r\n    .replace(/([A-Z])/g, ([letter]) => `-${letter.toLowerCase()}`)\r\n}\r\n\r\n// 문자열 모든 공백 제거\r\nfunction removeStringSpace(str) {\r\n  return str.replace(/(\\s*)/g,'');\r\n}\r\n\r\nfunction currency(num) {\r\n  return currencyNum(num) + '원';\r\n}\r\n\r\nfunction currencyWon(num) {\r\n  num = parseInt(num);\r\n  return '₩' + numeral(num).format('0,0');\r\n}\r\n\r\nfunction currencyNum(num) {\r\n  num = parseInt(num);\r\n  return numeral(num).format('0,0');\r\n}\r\n\r\nfunction currencyKor(value, unit) {\r\n  if(!unit)\r\n    unit = '원';\r\n  let val = parseInt(value);\r\n  if(val === 0)\r\n    return `0${unit}`;\r\n\r\n  let txt = '';\r\n  let max_unit = 1000000000000;\r\n\r\n  let unitTextArray = ['조 ','억 ','만 '];\r\n  let utIdx = 0;\r\n  while(max_unit >= 10000) {\r\n    let divideVal = Math.floor(val / max_unit);\r\n    if(divideVal>=1) {\r\n      txt += numeral(divideVal).format('0,0') + unitTextArray[utIdx];\r\n      val = val - divideVal*max_unit;\r\n    }\r\n    utIdx++;\r\n    max_unit /= 10000;\r\n  }\r\n  if(val>0 || val === '') {\r\n    txt += numeral(val).format('0,0');\r\n\r\n  } else if (val === 0) {\r\n    let txtArray = txt.split('');\r\n    txtArray.pop();\r\n    txt = txtArray.join('');\r\n  }\r\n  return `${txt}${unit ? unit : ''}`;\r\n}\r\n\r\nfunction thousand(num) {\r\n  num = parseInt(num);\r\n  if(num > 1000)\r\n    return numeral(num).format('0.0a');\r\n  else\r\n    return numeral(num).format('0a');\r\n}\r\n\r\nexport {\r\n  rgbaToHex,\r\n  dateFormat,\r\n  parseSize,\r\n  camelize,\r\n  camelToDash,\r\n  removeStringSpace,\r\n  currency,\r\n  currencyWon,\r\n  currencyNum,\r\n  currencyKor,\r\n  thousand\r\n}\r\n"]}]}