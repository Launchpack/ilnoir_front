{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputCheckboxGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputCheckboxGroup.vue","mtime":1605259986000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FormMixin from '@/components/Mixins/FormMixin';\nexport default {\n  name: 'CInputCheckboxGroup',\n  mixins: [FormMixin],\n  props: {\n    options: {\n      type: Array,\n      required: true\n    },\n    value: {\n      type: Array,\n      required: false\n    },\n    label: {\n      type: String,\n      required: false\n    },\n    boxWrapStyle: {\n      type: Object,\n      required: false\n    },\n    boxWrapLastStyle: {\n      type: Object,\n      required: false\n    },\n    boxLableSelectedStyle: {\n      type: Object,\n      required: false\n    },\n    boxLableUnselectedStyle: {\n      type: Object,\n      required: false\n    },\n    aligns: {\n      type: String,\n      required: false,\n      default: 'left'\n    }\n  },\n  data: function data() {\n    return {\n      align: 'left',\n      selectedValue: []\n    };\n  },\n  created: function created() {\n    if (this.value === undefined) this.selectedValue = [];else this.selectedValue = this.value;\n  },\n  watch: {\n    value: function value(n) {\n      if (this.value === undefined) this.selectedValue = [];else this.selectedValue = this.value;\n    },\n    selectedValue: function selectedValue(n) {\n      this.$emit('update:value', n);\n    }\n  },\n  methods: {\n    unselectBoxStyle: function unselectBoxStyle(item) {\n      if (this.isChecked(item) !== true) {\n        return {\n          borderRadius: '3px',\n          border: this.brandBorder.main.border\n        };\n      }\n    },\n    boxWrapStyles: function boxWrapStyles(item, idx) {\n      var deco = {};\n\n      if (this.boxWrapStyle) {\n        deco = this.boxWrapStyle;\n\n        if (idx === this.options.length - 1) {\n          if (this.boxWrapLastStyle) deco = this.boxWrapLastStyle;\n        }\n      } else {\n        deco.marginRight = '24px';\n        deco.marginBottom = '12px';\n\n        if (idx === this.options.length - 1) {\n          deco.marginRight = '0';\n        }\n      }\n\n      return deco;\n    },\n    itemLabelStyle: function itemLabelStyle(item) {\n      var deco = {\n        color: this.brandColor.main.color\n      };\n\n      if (this.isChecked(item)) {\n        if (this.boxLableSelectedStyle) deco = this.boxLableSelectedStyle;else deco.color = this.brandColor.brand.color;\n      } else {\n        if (this.boxLableUnselectedStyle) deco = this.boxLableUnselectedStyle;else deco.color = this.brandColor.main.color;\n      }\n\n      return deco;\n    },\n    toggleCheck: function toggleCheck(item) {\n      if (!this.selectedValue.includes(item['value'])) {\n        this.selectedValue.push(item['value']);\n      } else {\n        var index = this.selectedValue.indexOf(item['value']);\n\n        if (index >= 0) {\n          this.selectedValue.remove(index);\n        }\n      }\n    },\n    isChecked: function isChecked(item) {\n      if (!this.selectedValue.includes(item['value'])) return false;else return true;\n    }\n  }\n};",{"version":3,"sources":["CInputCheckboxGroup.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div :style=\"containerStyle\">\r\n    <!-- 레이블 -->\r\n    <div v-if=\"formType.label && label\" :style=\"labelStyle\">{{ label }}</div>\r\n\r\n    <div :style=\"listStyle\" class=\"full-width\" style=\"margin-top:12px\">\r\n      <div v-for=\"(item, idx) in options\"\r\n           :key=\"`check-box-${idx}`\"\r\n           class=\"flex-between\" :style=\"boxWrapStyles(item,idx)\">\r\n\r\n        <div class=\"flex-align full-width\">\r\n        <!-- 박스(좌측) -->\r\n        <div v-if=\"aligns==='left'\"\r\n             class=\"check-box unselect position-relative\"\r\n             :style=\"[boxStyle, unselectBoxStyle(item)]\"\r\n             style=\"margin-right:4px\"\r\n             @click.stop.prevent=\"toggleCheck(item)\">\r\n          <i v-if=\"isChecked(item)\"\r\n             class=\"material-icons position-absolute flex-center full-width full-height\" style=\"top:0;left:0\"\r\n             :style=\"checkStyle\">check</i>\r\n        </div>\r\n\r\n        <!-- 레이블 -->\r\n        <div class=\"check-box-text\"\r\n             @click.stop.prevent=\"toggleCheck(item)\"\r\n             :style=\"itemLabelStyle(item)\">\r\n          {{ item['label'] }}\r\n        </div>\r\n\r\n        <!-- 박스(우측) -->\r\n        <div v-if=\"aligns==='right'\"\r\n             class=\"check-box unselect position-relative\"\r\n             :style=\"[boxStyle, unselectBoxStyle(item)]\"\r\n             style=\"margin-left:4px\"\r\n             @click.stop.prevent=\"toggleCheck(item)\">\r\n          <i v-if=\"item.value\"\r\n             class=\"material-icons position-absolute flex-center full-width full-height\" style=\"top:0;left:0\"\r\n             :style=\"checkStyle\">check</i>\r\n        </div>\r\n        </div>\r\n\r\n        <i v-if=\"aligns==='check' && isChecked(item)\" class=\"material-icons size-15 bold\" :style=\"brandColor.brand\">check</i>\r\n        \r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import FormMixin from '@/components/Mixins/FormMixin'\r\n\r\n  export default {\r\n    name: 'CInputCheckboxGroup',\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n    props: {\r\n      options: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      value: {\r\n        type: Array,\r\n        required: false\r\n      },\r\n      label: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      boxWrapStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      boxWrapLastStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      boxLableSelectedStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      boxLableUnselectedStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      aligns: {\r\n        type: String,\r\n        required: false,\r\n        default: 'left'\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        align: 'left',\r\n        selectedValue: []\r\n      }\r\n    },\r\n    created() {\r\n      if (this.value===undefined) this.selectedValue = [];\r\n      else this.selectedValue = this.value;\r\n    },\r\n    watch: {\r\n      value(n) {\r\n        if (this.value===undefined) this.selectedValue = [];\r\n        else this.selectedValue = this.value;\r\n      },\r\n      selectedValue(n) {\r\n        this.$emit('update:value', n);\r\n      }\r\n    },\r\n    methods: {\r\n      unselectBoxStyle(item) {\r\n        if (this.isChecked(item) !== true) {\r\n          return {\r\n            borderRadius: '3px',\r\n            border: this.brandBorder.main.border\r\n          }\r\n        }\r\n      },\r\n      boxWrapStyles(item,idx) {\r\n        let deco = {};\r\n        if(this.boxWrapStyle) {\r\n          deco = this.boxWrapStyle;\r\n          if(idx===this.options.length-1) {\r\n            if(this.boxWrapLastStyle) deco = this.boxWrapLastStyle;\r\n          }\r\n        }\r\n\r\n        else {\r\n          deco.marginRight = '24px';\r\n          deco.marginBottom = '12px';\r\n          if(idx===this.options.length-1) {\r\n            deco.marginRight = '0';\r\n          }\r\n        }\r\n        return deco;\r\n      },\r\n      itemLabelStyle(item) {\r\n        let deco = {\r\n          color: this.brandColor.main.color\r\n        };\r\n          if(this.isChecked(item)) {\r\n            if(this.boxLableSelectedStyle) deco = this.boxLableSelectedStyle;\r\n            else deco.color = this.brandColor.brand.color;\r\n          } else {\r\n            if(this.boxLableUnselectedStyle) deco = this.boxLableUnselectedStyle;\r\n            else deco.color = this.brandColor.main.color;\r\n          }\r\n\r\n        return deco;\r\n      },\r\n      toggleCheck(item) {\r\n        if (!this.selectedValue.includes(item['value'])) {\r\n          this.selectedValue.push(item['value']);\r\n        }\r\n        else {\r\n          let index = this.selectedValue.indexOf(item['value'])\r\n          if (index >= 0) {\r\n            this.selectedValue.remove(index);\r\n          }\r\n        }\r\n      },\r\n      isChecked(item) {\r\n        if (!this.selectedValue.includes(item['value'])) return false;\r\n        else return true;\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n  .check-box\r\n  .check-box-text\r\n    cursor pointer\r\n\r\n  .check-box-label\r\n    cursor pointer\r\n\r\n  .check-box\r\n      display flex\r\n      align-items center\r\n      justify-content center\r\n      background-color white\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/Components/Form"}]}