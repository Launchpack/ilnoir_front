{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Common/PinchImage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Common/PinchImage.vue","mtime":1605259984000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar DBCLICK_TIME = 200;\nexport default {\n  props: {\n    src: {\n      type: String,\n      required: true\n    },\n    alt: String,\n    minZoom: {\n      type: Number,\n      default: 1\n    },\n    maxZoom: {\n      type: Number,\n      default: 2.25\n    }\n  },\n  data: function data() {\n    return {\n      zoom: 1,\n      minZoomBounce: .015,\n      maxZoomBounce: .015,\n      speed: .5,\n      lastX: null,\n      lastY: null,\n      x: 0,\n      y: 0,\n      zoomCenter: {\n        x: 0,\n        y: 0\n      },\n      width: 414,\n      height: window.innerHeight,\n      lastTouchTime: null,\n      clickTimer: null,\n      inMovement: false,\n      transition: {\n        transform: null,\n        origin: \"transform-origin 400ms linear\"\n      }\n    };\n  },\n  computed: {\n    zoomStyles: function zoomStyles() {\n      var transition = '';\n      if (this.transition.transform) transition += this.transition.transform;\n      if (this.transition.origin) transition += (transition.length > 0 ? ', ' : '') + this.transition.origin;\n      return {\n        transform: \"scale(\".concat(this.zoom, \") translate3d(\").concat(this.x, \"px, \").concat(this.y, \"px, 0px)\"),\n        transformOrigin: \"\".concat(this.zoomCenter.x, \"px \").concat(this.zoomCenter.y, \"px 0px\"),\n        transition: transition\n      };\n    }\n  },\n  methods: {\n    start: function start(event) {\n      event.preventDefault();\n\n      if (event.touches.length === 2) {\n        this.handlePinchStart(event);\n      } else if (event.touches.length === 1) {\n        this.handleTapStart(event);\n      }\n    },\n    end: function end(event) {\n      event.preventDefault();\n\n      if (!this.inMovement && this.zoom <= this.minZoom) {\n        var timeDiff = event.timeStamp - this.lastTouchTime;\n\n        if (timeDiff > DBCLICK_TIME) {\n          this.resetZoom();\n        }\n      } else {\n        this.lastX = 0;\n        this.lastY = 0;\n      }\n\n      if (event.touches.length === 0) {\n        if (this.zoom <= 1) {\n          this.lastTouchTime = event.timeStamp;\n        }\n      }\n    },\n    move: function move(event) {\n      event.preventDefault();\n\n      if (event.touches.length === 2) {\n        this.handlePinchMove(event);\n      } else {\n        this.handlePanMove(event);\n      }\n    },\n    resetZoom: function resetZoom() {\n      var _this = this;\n\n      console.log('reset'); //this.transition.transform = \"transform 200ms linear\";\n\n      this.zoom = 1;\n      this.zoomCenter.x = 0;\n      this.zoomCenter.y = 0;\n      this.x = 0;\n      this.y = 0;\n      setTimeout(function () {\n        _this.transition.transform = null;\n      }, 200);\n    },\n    handlePinchStart: function handlePinchStart(event) {\n      var _this$getTouchCenter = this.getTouchCenter(this.getTouchesCenter(event.touches[0], event.touches[1])),\n          x = _this$getTouchCenter.x,\n          y = _this$getTouchCenter.y;\n\n      if (this.zoom < this.maxZoom) {\n        this.zoomCenter.x = x;\n        this.zoomCenter.y = y;\n      }\n\n      this.lastDistance = this.getZoomDistance(event.touches[0], event.touches[1]);\n    },\n    handlePinchMove: function handlePinchMove(event) {\n      var zoom = this.getZoomDistance(event.touches[0], event.touches[1]);\n      var last = zoom / this.lastDistance;\n      var scale = this.calcZoom(this.minZoom - this.minZoomBounce, this.maxZoom + this.maxZoomBounce, this.zoom * last);\n\n      if (this.zoom < this.maxZoom || this.zoom >= this.maxZoom && scale < this.zoom) {\n        this.zoom = scale;\n      }\n\n      this.lastDistance = zoom;\n    },\n    handlePanMove: function handlePanMove(event) {\n      if (this.zoom > 1) {\n        var touch = event.touches[0];\n        var x = touch.clientX;\n        var y = touch.clientY;\n\n        if (!this.lastX || !this.lastY) {\n          this.lastX = x;\n          this.lastY = y;\n          return null;\n        } else {\n          var rect = this.$refs.image.getBoundingClientRect();\n          var diffX = (x - this.lastX) * this.speed;\n          var diffY = (y - this.lastY) * this.speed;\n          this.transition.transform = null; //apply transform\n\n          this.x += diffX;\n          this.y += diffY; //bounds\n\n          if (rect.left > 0 && diffX > 0) {\n            this.x -= diffX;\n          }\n\n          if (rect.right < this.width && diffX < 0) {\n            this.x -= diffX;\n          }\n\n          if (rect.top > 0 && diffY > 0) {\n            this.y -= diffY;\n          }\n\n          if (rect.bottom < this.height && diffY < 0) {\n            this.y -= diffY;\n          } //to calc the next move\n\n\n          this.lastX = x;\n          this.lastY = y;\n        }\n      }\n    },\n    handleTapStart: function handleTapStart(event) {\n      var touch = event.touches[0];\n      var x = touch.clientX;\n      var y = touch.clientY;\n\n      if (!this.lastX || !this.lastY) {\n        this.lastX = x;\n        this.lastY = y;\n      }\n\n      if (this.lastTouchTime) {\n        var timeDiff = event.timeStamp - this.lastTouchTime;\n\n        if (timeDiff < DBCLICK_TIME) {\n          this.handleDoubleTap(event.touches[0]);\n          this.lastX = null;\n          this.lastY = null;\n        }\n      }\n\n      this.lastTouchTime = event.timeStamp;\n    },\n    handleDoubleTap: function handleDoubleTap(touch) {\n      var _this2 = this;\n\n      var _this$getTouchCenter2 = this.getTouchCenter({\n        x: touch.clientX,\n        y: touch.clientY\n      }),\n          x = _this$getTouchCenter2.x,\n          y = _this$getTouchCenter2.y;\n\n      clearTimeout(this.clickTimeout);\n      this.inMovement = true;\n      this.transition.origin = \"transform-origin 400ms linear\";\n      this.transition.transform = \"transform 200ms linear\";\n\n      if (this.zoom > this.minZoom) {\n        this.zoom = 1;\n        this.x = 0;\n        this.y = 0;\n        this.clickTimeout = setTimeout(function () {\n          _this2.zoomCenter.x = 0;\n          _this2.zoomCenter.y = 0;\n          _this2.inMovement = false;\n        }, 200);\n      } else {\n        this.transition.origin = null;\n        this.zoomCenter.x = x;\n        this.zoomCenter.y = y;\n        this.clickTimeout = setTimeout(function () {\n          _this2.transition.origin = \"transform-origin 400ms linear\";\n          _this2.zoom = _this2.maxZoom;\n          _this2.inMovement = false;\n        }, 200);\n      }\n    },\n    getTouchCenter: function getTouchCenter(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n      var rect = this.$el.getBoundingClientRect();\n      return {\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    },\n    calcZoom: function calcZoom(e, t, n) {\n      return Math.min(t, Math.max(e, n));\n    },\n    getZoomDistance: function getZoomDistance(e, t) {\n      return Math.sqrt(Math.pow(e.clientY - t.clientY, 2) + Math.pow(e.clientX - t.clientX, 2));\n    },\n    getTouchesCenter: function getTouchesCenter(touch1, touch2) {\n      return {\n        x: (touch1.clientX + touch2.clientX) / 2,\n        y: (touch1.clientY + touch2.clientY) / 2\n      };\n    },\n    bounds: function bounds() {\n      var rect = this.$refs.image.getBoundingClientRect();\n      console.log(rect);\n      console.log({\n        x: this.x,\n        y: this.y,\n        zoom: this.zoom\n      });\n\n      if (rect.left < 0) {\n        this.x = 0;\n      } else if (rect.right > this.width) {\n        this.x = 0;\n      }\n\n      if (rect.top < 0) {\n        this.y = 0;\n      } else if (rect.bottom > this.height) {\n        this.y = 0;\n      }\n\n      console.log({\n        x: this.x,\n        y: this.y\n      });\n    }\n  }\n};",{"version":3,"sources":["PinchImage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"pinch-wrapper\"\r\n       :style=\"zoomStyles\"\r\n       @touchstart=\"start\"\r\n       @touchmove=\"move\"\r\n       @touchend=\"end\">\r\n    <img :src=\"src\" :alt=\"alt\" class=\"pinch-img\" ref=\"image\"/>\r\n  </div>\r\n</template>\r\n\r\n<script type=\"text/babel\">\r\n  const DBCLICK_TIME = 200;\r\n  export default {\r\n    props: {\r\n      src: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      alt: String,\r\n      minZoom: {\r\n        type: Number,\r\n        default: 1\r\n      },\r\n      maxZoom: {\r\n        type: Number,\r\n        default: 2.25\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        zoom: 1,\r\n        minZoomBounce: .015,\r\n        maxZoomBounce: .015,\r\n        speed: .5,\r\n        lastX: null,\r\n        lastY: null,\r\n        x: 0,\r\n        y: 0,\r\n        zoomCenter: {\r\n          x: 0,\r\n          y: 0\r\n        },\r\n        width: 414,\r\n        height: window.innerHeight,\r\n        lastTouchTime: null,\r\n        clickTimer: null,\r\n        inMovement: false,\r\n        transition: {\r\n          transform: null,\r\n          origin: \"transform-origin 400ms linear\"\r\n        }\r\n      }\r\n    },\r\n    computed: {\r\n      zoomStyles() {\r\n        let transition = '';\r\n        if(this.transition.transform) transition += this.transition.transform;\r\n        if(this.transition.origin) transition += (transition.length > 0 ? ', ' : '') + this.transition.origin;\r\n        return {\r\n          transform: `scale(${this.zoom}) translate3d(${this.x}px, ${this.y}px, 0px)`,\r\n          transformOrigin: `${this.zoomCenter.x}px ${this.zoomCenter.y}px 0px`,\r\n          transition\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      start(event) {\r\n        event.preventDefault();\r\n        if(event.touches.length === 2) {\r\n          this.handlePinchStart(event);\r\n        }\r\n        else if(event.touches.length === 1) {\r\n          this.handleTapStart(event);\r\n        }\r\n      },\r\n      end(event) {\r\n        event.preventDefault();\r\n        if(!this.inMovement && this.zoom <= this.minZoom) {\r\n          const timeDiff = event.timeStamp - this.lastTouchTime;\r\n          if(timeDiff > DBCLICK_TIME) {\r\n            this.resetZoom();\r\n          }\r\n        }\r\n        else {\r\n          this.lastX = 0;\r\n          this.lastY = 0;\r\n        }\r\n        if(event.touches.length === 0) {\r\n          if(this.zoom <= 1) {\r\n            this.lastTouchTime = event.timeStamp;\r\n          }\r\n        }\r\n      },\r\n      move(event) {\r\n        event.preventDefault();\r\n        if(event.touches.length === 2) {\r\n          this.handlePinchMove(event);\r\n        }\r\n        else {\r\n          this.handlePanMove(event);\r\n        }\r\n      },\r\n      resetZoom() {\r\n        console.log('reset');\r\n        //this.transition.transform = \"transform 200ms linear\";\r\n        this.zoom = 1;\r\n        this.zoomCenter.x = 0;\r\n        this.zoomCenter.y = 0;\r\n        this.x = 0;\r\n        this.y = 0;\r\n        setTimeout(() => {\r\n          this.transition.transform = null;\r\n        }, 200);\r\n      },\r\n      handlePinchStart(event) {\r\n        const {x,y} = this.getTouchCenter(\r\n          this.getTouchesCenter(event.touches[0], event.touches[1])\r\n        );\r\n        if(this.zoom < this.maxZoom) {\r\n          this.zoomCenter.x = x;\r\n          this.zoomCenter.y = y;\r\n        }\r\n        this.lastDistance = this.getZoomDistance(event.touches[0], event.touches[1]);\r\n      },\r\n      handlePinchMove(event) {\r\n        const zoom  = this.getZoomDistance(event.touches[0], event.touches[1]);\r\n        const last  = (zoom / this.lastDistance);\r\n        const scale = this.calcZoom(this.minZoom - this.minZoomBounce, this.maxZoom + this.maxZoomBounce, this.zoom * last);\r\n        if(this.zoom < this.maxZoom || (this.zoom >= this.maxZoom && scale < this.zoom)) {\r\n          this.zoom = scale;\r\n        }\r\n        this.lastDistance = zoom;\r\n      },\r\n      handlePanMove(event) {\r\n        if(this.zoom > 1) {\r\n          const touch = event.touches[0];\r\n          const x = touch.clientX;\r\n          const y = touch.clientY;\r\n          if (!this.lastX || !this.lastY) {\r\n            this.lastX = x;\r\n            this.lastY = y;\r\n            return null;\r\n          }\r\n          else {\r\n            const rect = this.$refs.image.getBoundingClientRect();\r\n            let diffX = (x - this.lastX) * this.speed;\r\n            let diffY = (y - this.lastY) * this.speed;\r\n            this.transition.transform = null;\r\n            //apply transform\r\n            this.x += diffX;\r\n            this.y += diffY;\r\n            //bounds\r\n            if(rect.left > 0 && diffX > 0) {\r\n              this.x -= diffX;\r\n            }\r\n            if(rect.right < this.width && diffX < 0) {\r\n              this.x -= diffX;\r\n            }\r\n            if(rect.top > 0 && diffY > 0) {\r\n              this.y -= diffY;\r\n            }\r\n            if(rect.bottom < this.height && diffY < 0) {\r\n              this.y -= diffY;\r\n            }\r\n            //to calc the next move\r\n            this.lastX = x;\r\n            this.lastY = y;\r\n          }\r\n        }\r\n      },\r\n      handleTapStart(event) {\r\n        const touch = event.touches[0];\r\n        const x = touch.clientX;\r\n        const y = touch.clientY;\r\n        if(!this.lastX || !this.lastY) {\r\n          this.lastX = x;\r\n          this.lastY = y;\r\n        }\r\n        if(this.lastTouchTime) {\r\n          const timeDiff = event.timeStamp - this.lastTouchTime;\r\n          if(timeDiff < DBCLICK_TIME) {\r\n            this.handleDoubleTap(event.touches[0]);\r\n            this.lastX = null;\r\n            this.lastY = null;\r\n          }\r\n        }\r\n        this.lastTouchTime = event.timeStamp;\r\n      },\r\n      handleDoubleTap(touch) {\r\n        let {x,y} = this.getTouchCenter({ x:touch.clientX, y: touch.clientY });\r\n        clearTimeout(this.clickTimeout);\r\n        this.inMovement = true;\r\n        this.transition.origin    = \"transform-origin 400ms linear\";\r\n        this.transition.transform = \"transform 200ms linear\";\r\n        if(this.zoom > this.minZoom) {\r\n          this.zoom = 1;\r\n          this.x = 0;\r\n          this.y = 0;\r\n          this.clickTimeout = setTimeout(() => {\r\n            this.zoomCenter.x = 0;\r\n            this.zoomCenter.y = 0;\r\n            this.inMovement = false;\r\n          }, 200);\r\n        }\r\n        else {\r\n          this.transition.origin = null;\r\n          this.zoomCenter.x = x;\r\n          this.zoomCenter.y = y;\r\n          this.clickTimeout = setTimeout(() => {\r\n            this.transition.origin = \"transform-origin 400ms linear\";\r\n            this.zoom              = this.maxZoom;\r\n            this.inMovement = false;\r\n          }, 200);\r\n        }\r\n      },\r\n      getTouchCenter({x, y}) {\r\n        const rect = this.$el.getBoundingClientRect();\r\n        return {\r\n          x: x - rect.left,\r\n          y: y - rect.top\r\n        }\r\n      },\r\n      calcZoom(e, t, n) {\r\n        return Math.min(t, Math.max(e, n))\r\n      },\r\n      getZoomDistance(e, t) {\r\n        return Math.sqrt(Math.pow(e.clientY - t.clientY, 2) + Math.pow(e.clientX - t.clientX, 2));\r\n      },\r\n      getTouchesCenter(touch1, touch2) {\r\n        return {\r\n          x: (touch1.clientX + touch2.clientX) / 2,\r\n          y: (touch1.clientY + touch2.clientY) / 2\r\n        }\r\n      },\r\n      bounds() {\r\n        const rect = this.$refs.image.getBoundingClientRect();\r\n        console.log(rect);\r\n        console.log({x:this.x,y:this.y,zoom:this.zoom});\r\n        if(rect.left < 0) {\r\n          this.x = 0;\r\n        }\r\n        else if(rect.right > this.width) {\r\n          this.x = 0;\r\n        }\r\n        if(rect.top < 0) {\r\n          this.y = 0;\r\n        }\r\n        else if(rect.bottom > this.height) {\r\n          this.y = 0;\r\n        }\r\n        console.log({x:this.x,y:this.y});\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n  .pinch-wrapper {\r\n    position: relative;\r\n    display: block;\r\n    height: 100%;\r\n    width: 100%;\r\n    align-items: stretch;\r\n    border-width: 0;\r\n    border-style: solid;\r\n    box-sizing: border-box;\r\n    flex-basis: auto;\r\n    flex-direction: column;\r\n    flex-shrink: 0;\r\n    margin: 0;\r\n    padding: 0;\r\n    background-color: transparent;\r\n    color: inherit;\r\n    font: inherit;\r\n    text-align: inherit;\r\n    text-decoration: none;\r\n    list-style: none;\r\n    min-height: 0;\r\n    min-width: 0;\r\n  }\r\n  .pinch-wrapper:hover {\r\n    will-change: transform;\r\n  }\r\n  .pinch-img {\r\n    position: absolute;\r\n    width: auto !important;\r\n    height: auto !important;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n    object-position: center;\r\n    margin: auto;\r\n  }\r\n</style>"],"sourceRoot":"src/components/Components/Common"}]}