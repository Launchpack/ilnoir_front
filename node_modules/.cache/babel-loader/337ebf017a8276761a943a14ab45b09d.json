{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputCheckboxArray.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputCheckboxArray.vue","mtime":1605259986000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FormMixin from '@/components/Mixins/FormMixin';\nexport default {\n  name: 'c-input-checkboxArray',\n  mixins: [FormMixin],\n  props: {\n    value: {\n      type: Boolean,\n      required: false\n    },\n    label: {\n      type: String,\n      required: false\n    },\n    boxAlign: {\n      type: String,\n      required: false,\n      default: 'left'\n    },\n    items: {\n      type: Array,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      checked: false\n    };\n  },\n  methods: {\n    toggleCheck: function toggleCheck() {\n      this.checked = !this.checked;\n      this.$emit('update:value', this.checked);\n    },\n    spanStyle: function spanStyle(item) {\n      if (item.styles) return item.styles.container;\n    },\n    toggleLink: function toggleLink(linkType, link) {\n      if (linkType === 'page' || linkType === undefined) {\n        this.routerPush(link);\n      } else {\n        this.$root.$emit('page_' + linkType, link);\n      }\n    },\n    rootemit: function rootemit(val) {\n      this.$root.$emit(val);\n    }\n  },\n  computed: {\n    lineStyle: function lineStyle() {\n      return {\n        border: '1px solid rgb(221, 221, 221)'\n      };\n    }\n  }\n};",{"version":3,"sources":["CInputCheckboxArray.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,OAAA,SAAA,MAAA,+BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,uBADA;AAEA,EAAA,MAAA,EAAA,CACA,SADA,CAFA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KALA;AASA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KATA;AAcA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA;AAFA;AAdA,GANA;AA0BA,EAAA,IA1BA,kBA0BA;AACA,WAAA;AACA,MAAA,OAAA,EAAA;AADA,KAAA;AAGA,GA9BA;AAiCA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,WAAA,OAAA,GAAA,CAAA,KAAA,OAAA;AACA,WAAA,KAAA,CAAA,cAAA,EAAA,KAAA,OAAA;AACA,KAJA;AAKA,IAAA,SALA,qBAKA,IALA,EAKA;AACA,UAAA,IAAA,CAAA,MAAA,EAAA,OAAA,IAAA,CAAA,MAAA,CAAA,SAAA;AACA,KAPA;AAQA,IAAA,UARA,sBAQA,QARA,EAQA,IARA,EAQA;AACA,UAAA,QAAA,KAAA,MAAA,IAAA,QAAA,KAAA,SAAA,EAAA;AACA,aAAA,UAAA,CAAA,IAAA;AACA,OAFA,MAEA;AACA,aAAA,KAAA,CAAA,KAAA,CAAA,UAAA,QAAA,EAAA,IAAA;AACA;AAEA,KAfA;AAgBA,IAAA,QAhBA,oBAgBA,GAhBA,EAgBA;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,GAAA;AACA;AAlBA,GAjCA;AAqDA,EAAA,QAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,aAAA;AACA,QAAA,MAAA,EAAA;AADA,OAAA;AAGA;AALA;AArDA,CAAA","sourcesContent":["<template>\r\n  <div :style=\"containerStyle\" class=\"position-relative\r\n              flex-align\r\n              wrap\r\n              full-width\">\r\n    <!-- 박스(좌측) -->\r\n    <div v-if=\"boxAlign==='left'\"\r\n         class=\"check-box unselect\"\r\n         :style=\"[boxStyle,lineStyle]\"\r\n         style=\"margin-right:4px\"\r\n         @click.stop.prevent=\"toggleCheck\">\r\n      <i v-if=\"checked\"\r\n         class=\"material-icons\"\r\n         :style=\"checkStyle\">check</i>\r\n    </div>\r\n\r\n    <!-- 레이블 -->\r\n    <div class=\"check-box-text\"\r\n         :style=\"labelStyle\">\r\n      <span v-for=\"(item, idx) in items\" :key=\"'item-'+idx\" :style=\"spanStyle(item)\">\r\n        <span v-if=\"item.link\" @click=\"toggleLink(item.linkType, item.link)\">{{ item.text }}</span>\r\n        <span v-else-if=\"item.rootemit\" @click=\"rootemit(item.rootemit)\">{{ item.text }}</span>\r\n        <span v-else>{{ item.text }}</span>\r\n      </span>\r\n    </div>\r\n\r\n    <!-- 박스(우측) -->\r\n    <div v-if=\"boxAlign==='right'\"\r\n         class=\"check-box unselect\"\r\n         :style=\"boxStyle\"\r\n         style=\"margin-left:4px\"\r\n         @click.stop.prevent=\"toggleCheck\">\r\n      <i v-if=\"checked\"\r\n         class=\"material-icons\"\r\n         :style=\"checkStyle\">check</i>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import FormMixin from '@/components/Mixins/FormMixin'\r\n\r\n  export default {\r\n    name: 'c-input-checkboxArray',\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n\r\n    props: {\r\n      value: {\r\n        type: Boolean,\r\n        required: false\r\n      },\r\n      label: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      boxAlign: {\r\n        type: String,\r\n        required: false,\r\n        default: 'left'\r\n      },\r\n      items: {\r\n        type: Array,\r\n        required: true\r\n      }\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        checked: false,\r\n      };\r\n    },\r\n\r\n\r\n    methods: {\r\n      toggleCheck() {\r\n        this.checked = !this.checked;\r\n        this.$emit('update:value', this.checked)\r\n      },\r\n      spanStyle(item) {\r\n        if(item.styles) return item.styles.container;\r\n      },\r\n      toggleLink(linkType, link) {\r\n        if(linkType === 'page' || linkType === undefined) {\r\n          this.routerPush(link);\r\n        } else {\r\n          this.$root.$emit('page_'+linkType, link);\r\n        }\r\n        \r\n      },\r\n      rootemit(val) {\r\n        this.$root.$emit(val);\r\n      }\r\n    },\r\n    computed: {\r\n      lineStyle() {\r\n        return {\r\n          border: '1px solid rgb(221, 221, 221)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n  .check-box\r\n  .check-box-text\r\n    cursor pointer\r\n\r\n  .check-box-text\r\n    margin 0 4px !important\r\n\r\n  .check-box\r\n    display flex\r\n    align-items center\r\n    justify-content center\r\n    background-color white\r\n</style>\r\n"],"sourceRoot":"src/components/Components/Form"}]}