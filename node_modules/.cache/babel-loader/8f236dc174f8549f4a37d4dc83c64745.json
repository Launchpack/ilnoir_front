{"remainingRequest":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js!/Users/mard/dev/ilnoir/node_modules/eslint-loader/index.js??ref--13-0!/Users/mard/dev/ilnoir/src/components/Mixins/ImageUploaderMixin.js","dependencies":[{"path":"/Users/mard/dev/ilnoir/src/components/Mixins/ImageUploaderMixin.js","mtime":1605259991000},{"path":"/Users/mard/dev/ilnoir/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/ilnoir/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/ilnoir/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var EXIF = require('exif-js');\n\nexport default {\n  methods: {\n    getFixedImage: function getFixedImage(file, rawImage) {\n      var _this = this;\n\n      EXIF.getData(file, function () {\n        try {\n          var orientation = EXIF.getTag(file, \"Orientation\");\n          var canvas = document.createElement('canvas');\n\n          if (orientation < 5 || orientation === undefined) {\n            canvas.width = rawImage.width;\n            canvas.height = rawImage.height;\n          } else {\n            canvas.width = rawImage.height;\n            canvas.height = rawImage.width;\n          }\n\n          document.body.appendChild(canvas);\n          var ctx = canvas.getContext('2d'); // 파일 사본일경우 exif가 없어서 orientation이 undefined이다\n          // orientation 없을 경우\n\n          if (orientation !== undefined) {\n            if (orientation < 5) ctx.translate(rawImage.width * 0.5, rawImage.height * 0.5);else if (orientation === 6) ctx.translate(rawImage.height, 0);else ctx.translate(0, rawImage.width);\n\n            switch (orientation) {\n              case 2:\n                // horizontal flip\n                ctx.scale(-1, 1);\n                break;\n\n              case 3:\n                // 180° rotate left\n                ctx.rotate(Math.PI);\n                break;\n\n              case 4:\n                // vertical flip\n                ctx.scale(1, -1);\n                break;\n\n              case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n\n              case 6:\n                // 90° rotate right\n                ctx.rotate(0.5 * Math.PI);\n                break;\n\n              case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(-1, 1);\n                break;\n\n              case 8:\n                // 90° rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                break;\n            }\n\n            if (orientation < 5) ctx.translate(-rawImage.width * 0.5, -rawImage.height * 0.5);\n          }\n\n          ctx.drawImage(rawImage, 0, 0);\n\n          var resizeImg = _this.resizeImage(canvas); //canvas.remove();\n\n\n          canvas.parentNode.removeChild(canvas); // after action\n          // CInputImgUpload\n\n          _this.file = resizeImg;\n\n          _this.$emit('update:value', _this.file);\n        } catch (e) {\n          return console.log(e);\n        }\n      });\n    },\n    resizeImage: function resizeImage(image) {\n      var maxWidth = 1200;\n      var maxHeight = 1200;\n      var quality = 1.0;\n      var scale = this.getNewScale(image, maxWidth, maxHeight);\n      var scaledWidth = image.width / scale;\n      var scaledHeight = image.height / scale;\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = scaledWidth;\n      canvas.height = scaledHeight;\n      context.drawImage(image, 0, 0, scaledWidth, scaledHeight);\n      return canvas.toDataURL('image/jpeg', quality);\n    },\n    getNewScale: function getNewScale(image, maxWidth, maxHeight) {\n      if (image.width <= maxWidth && image.height <= maxHeight) {\n        return 1;\n      }\n\n      var isLandscape = image.width > image.height;\n      var dimension = isLandscape ? image.width : image.height;\n      return dimension / (isLandscape ? maxWidth : maxHeight);\n    }\n  }\n};",{"version":3,"sources":["/Users/mard/dev/ilnoir/src/components/Mixins/ImageUploaderMixin.js"],"names":["EXIF","require","methods","getFixedImage","file","rawImage","getData","orientation","getTag","canvas","document","createElement","undefined","width","height","body","appendChild","ctx","getContext","translate","scale","rotate","Math","PI","drawImage","resizeImg","resizeImage","parentNode","removeChild","$emit","e","console","log","image","maxWidth","maxHeight","quality","getNewScale","scaledWidth","scaledHeight","context","toDataURL","isLandscape","dimension"],"mappings":"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","sourcesContent":["var EXIF = require('exif-js');\r\n\r\nexport default {\r\n  methods: {\r\n    getFixedImage(file, rawImage) {\r\n      EXIF.getData(file, () => {\r\n        try {\r\n          const orientation = EXIF.getTag(file, \"Orientation\");\r\n          const canvas = document.createElement('canvas');\r\n\r\n\r\n          if(orientation < 5 || orientation ===undefined) {\r\n            canvas.width = rawImage.width;\r\n            canvas.height = rawImage.height;\r\n          }\r\n          else {\r\n            canvas.width = rawImage.height;\r\n            canvas.height = rawImage.width;\r\n          }\r\n\r\n          document.body.appendChild(canvas);\r\n\r\n          const ctx = canvas.getContext('2d');\r\n\r\n          // 파일 사본일경우 exif가 없어서 orientation이 undefined이다\r\n\r\n          // orientation 없을 경우\r\n          if(orientation !== undefined) {\r\n\r\n            if (orientation < 5)\r\n              ctx.translate(rawImage.width * 0.5, rawImage.height * 0.5);\r\n            else if(orientation === 6)\r\n              ctx.translate(rawImage.height , 0);\r\n            else\r\n              ctx.translate(0, rawImage.width);\r\n\r\n            switch (orientation) {\r\n              case 2:\r\n                // horizontal flip\r\n                ctx.scale(-1, 1);\r\n                break\r\n              case 3:\r\n                // 180° rotate left\r\n                ctx.rotate(Math.PI);\r\n                break\r\n              case 4:\r\n                // vertical flip\r\n                ctx.scale(1, -1);\r\n                break\r\n              case 5:\r\n                // vertical flip + 90 rotate right\r\n                ctx.rotate(0.5 * Math.PI);\r\n                ctx.scale(1, -1);\r\n                break\r\n              case 6:\r\n                // 90° rotate right\r\n                ctx.rotate(0.5 * Math.PI);\r\n                break\r\n              case 7:\r\n                // horizontal flip + 90 rotate right\r\n                ctx.rotate(0.5 * Math.PI);\r\n                ctx.scale(-1, 1);\r\n                break\r\n              case 8:\r\n                // 90° rotate left\r\n                ctx.rotate(-0.5 * Math.PI);\r\n                break\r\n            }\r\n            if (orientation < 5)\r\n              ctx.translate(-rawImage.width * 0.5, -rawImage.height * 0.5);\r\n          }\r\n\r\n          ctx.drawImage(rawImage, 0, 0);\r\n\r\n          const resizeImg = this.resizeImage(canvas);\r\n          //canvas.remove();\r\n          canvas.parentNode.removeChild(canvas);\r\n\r\n          // after action\r\n          // CInputImgUpload\r\n          this.file = resizeImg;\r\n          this.$emit('update:value', this.file);\r\n        } catch (e) {\r\n          return console.log(e);\r\n        }\r\n      });\r\n    },\r\n    resizeImage(image){\r\n      let maxWidth = 1200;\r\n      let maxHeight = 1200;\r\n      let quality = 1.0;\r\n\r\n      const scale = this.getNewScale(image, maxWidth, maxHeight);\r\n      const scaledWidth = image.width / scale;\r\n      const scaledHeight = image.height / scale;\r\n\r\n      const canvas = document.createElement('canvas');\r\n      const context = canvas.getContext('2d');\r\n      canvas.width = scaledWidth;\r\n      canvas.height = scaledHeight;\r\n      context.drawImage(image, 0, 0, scaledWidth, scaledHeight);\r\n      return canvas.toDataURL('image/jpeg', quality)\r\n    },\r\n    getNewScale(image, maxWidth, maxHeight){\r\n      if (image.width <= maxWidth && image.height <= maxHeight) {\r\n        return 1\r\n      }\r\n      const isLandscape = image.width > image.height;\r\n      const dimension = isLandscape ? image.width : image.height;\r\n      return dimension / (isLandscape ? maxWidth : maxHeight)\r\n    },\r\n  }\r\n}\r\n"]}]}