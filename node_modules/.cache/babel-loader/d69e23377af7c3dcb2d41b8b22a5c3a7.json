{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputCheckboxTextarea.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputCheckboxTextarea.vue","mtime":1605259986000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FormMixin from '@/components/Mixins/FormMixin';\nexport default {\n  name: 'c-input-checkbox-textarea',\n  mixins: [FormMixin],\n  props: {\n    value: {\n      type: Boolean,\n      required: false\n    },\n    label: {\n      type: String,\n      required: false\n    },\n    text: {\n      type: String,\n      required: true\n    },\n    textarea: {\n      type: String,\n      required: true\n    },\n    boxAlign: {\n      type: String,\n      required: false,\n      default: 'left'\n    }\n  },\n  data: function data() {\n    return {\n      checked: this.value\n    };\n  },\n  created: function created() {\n    this.checked = this.value;\n  },\n  watch: {\n    value: function value(n) {\n      this.checked = n;\n    }\n  },\n  computed: {\n    textStyle: function textStyle() {\n      var deco = cloneItem(this.labelStyle);\n      delete deco.margin;\n      deco.color = this.brandColor.main;\n      deco.marginLeft = '4px';\n      return deco;\n    }\n  },\n  methods: {\n    toggleCheck: function toggleCheck() {\n      this.checked = !this.checked;\n      this.$emit('update:value', this.checked);\n      this.$emit('onUpdate', {\n        name: this.name,\n        value: this.checked\n      });\n    }\n  }\n};",{"version":3,"sources":["CInputCheckboxTextarea.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,OAAA,SAAA,MAAA,+BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,2BADA;AAEA,EAAA,MAAA,EAAA,CACA,SADA,CAFA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KALA;AASA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KATA;AAaA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KAbA;AAiBA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA;AAHA;AAjBA,GANA;AA8BA,EAAA,IA9BA,kBA8BA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,KAAA;AADA,KAAA;AAGA,GAlCA;AAoCA,EAAA,OApCA,qBAoCA;AACA,SAAA,OAAA,GAAA,KAAA,KAAA;AACA,GAtCA;AAwCA,EAAA,KAAA,EAAA;AACA,IAAA,KADA,iBACA,CADA,EACA;AACA,WAAA,OAAA,GAAA,CAAA;AACA;AAHA,GAxCA;AA8CA,EAAA,QAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,UAAA,IAAA,GAAA,SAAA,CAAA,KAAA,UAAA,CAAA;AACA,aAAA,IAAA,CAAA,MAAA;AACA,MAAA,IAAA,CAAA,KAAA,GAAA,KAAA,UAAA,CAAA,IAAA;AACA,MAAA,IAAA,CAAA,UAAA,GAAA,KAAA;AACA,aAAA,IAAA;AACA;AAPA,GA9CA;AAwDA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,WAAA,OAAA,GAAA,CAAA,KAAA,OAAA;AACA,WAAA,KAAA,CAAA,cAAA,EAAA,KAAA,OAAA;AACA,WAAA,KAAA,CAAA,UAAA,EAAA;AACA,QAAA,IAAA,EAAA,KAAA,IADA;AAEA,QAAA,KAAA,EAAA,KAAA;AAFA,OAAA;AAIA;AARA;AAxDA,CAAA","sourcesContent":["<template>\r\n  <div :style=\"containerStyle\" class=\"full-width\">\r\n    <!-- 레이블 -->\r\n    <div v-if=\"formType.label && label\" :style=\"labelStyle\">{{ label }}</div>\r\n\r\n    <!-- text area -->\r\n    <div v-html=\"textarea\" class=\"full-width\" style=\"height:100px;overflow-y:scroll; border: 1px solid #ddd; padding:12px; margin:12px 0\"></div>\r\n\r\n    <div class=\"flex-align\">\r\n      <!-- 박스(좌측) -->\r\n      <div v-if=\"boxAlign === 'left'\"\r\n           class=\"check-box unselect\"\r\n           :style=\"boxStyle\"\r\n           style=\"margin-right:4px\"\r\n           @click.stop.prevent=\"toggleCheck\">\r\n        <i v-if=\"checked\"\r\n           class=\"material-icons\"\r\n           :style=\"checkStyle\">check</i>\r\n      </div>\r\n\r\n      <!-- 레이블 -->\r\n      <div class=\"check-box-text unselect\" :style=\"textStyle\"\r\n           @click.stop.prevent=\"toggleCheck\">\r\n        {{ text }}\r\n      </div>\r\n\r\n      <!-- 박스(우측) -->\r\n      <div v-if=\"boxAlign === 'right'\"\r\n           class=\"check-box unselect\"\r\n           :style=\"boxStyle\"\r\n           style=\"margin-left:4px\"\r\n           @click.stop.prevent=\"toggleCheck\">\r\n        <i v-if=\"checked\"\r\n           class=\"material-icons\"\r\n           :style=\"checkStyle\">check</i>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import FormMixin from '@/components/Mixins/FormMixin'\r\n\r\n  export default {\r\n    name: 'c-input-checkbox-textarea',\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n\r\n    props: {\r\n      value: {\r\n        type: Boolean,\r\n        required: false\r\n      },\r\n      label: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      text: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      textarea: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      boxAlign: {\r\n        type: String,\r\n        required: false,\r\n        default: 'left'\r\n      }\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        checked: this.value,\r\n      };\r\n    },\r\n\r\n    created() {\r\n      this.checked = this.value;\r\n    },\r\n\r\n    watch: {\r\n      value(n) {\r\n        this.checked = n;\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      textStyle() {\r\n        let deco = cloneItem(this.labelStyle);\r\n        delete deco.margin;\r\n        deco.color = this.brandColor.main;\r\n        deco.marginLeft = '4px';\r\n        return deco;\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      toggleCheck() {\r\n        this.checked = !this.checked;\r\n        this.$emit('update:value', this.checked);\r\n        this.$emit('onUpdate', {\r\n          name: this.name,\r\n          value: this.checked\r\n        });\r\n      },\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n  .check-box\r\n    .check-box-text\r\n      cursor pointer\r\n\r\n    .check-box-text\r\n      margin 0 !important\r\n\r\n    .check-box\r\n      display flex\r\n      align-items center\r\n      justify-content center\r\n      background-color white\r\n</style>\r\n"],"sourceRoot":"src/components/Components/Form"}]}