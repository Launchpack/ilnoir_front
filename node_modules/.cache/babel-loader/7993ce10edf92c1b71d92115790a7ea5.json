{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Button/IconCircleLike.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Button/IconCircleLike.vue","mtime":1605259982000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"IconCircleLike\",\n  props: {\n    id: {\n      type: Number,\n      required: false\n    },\n    value: {\n      // 좋아요 여부 (props로 넘기지 않을 경우 api 호출)\n      required: false\n    },\n    likeType: {\n      type: String,\n      required: true\n    },\n    size: {\n      type: Number,\n      default: 24\n    },\n    color: {\n      type: String,\n      default: 'sub'\n    },\n    activeColor: {\n      type: String,\n      default: 'brand'\n    },\n    count: {\n      // 숫자표시\n      type: Number,\n      required: false\n    },\n    countCustomStyle: {\n      type: Object,\n      required: false\n    },\n    menuTitle: {\n      type: String,\n      default: '마이페이지 > 즐겨찾기'\n    },\n    text: {\n      type: String,\n      required: false\n    },\n    hover: {\n      type: Boolean,\n      required: false\n    },\n    width: {\n      type: Number,\n      required: false,\n      default: 48\n    },\n    height: {\n      type: Number,\n      required: false,\n      default: 48\n    },\n    borderRadius: {\n      type: Number,\n      default: 8\n    },\n    border: {\n      type: String,\n      required: false\n    },\n    containStyle: {\n      type: Object,\n      required: false\n    },\n    textStyle: {\n      type: Object,\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      icon: 'favorite_border',\n      isLike: false,\n      url: '',\n      computedCount: undefined,\n      mouseHover: false\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    if (this.count !== undefined) this.computedCount = this.count;\n    if (!this.isLogin) return;\n    var id = this.$route.query.id;\n    if (this.id) id = this.id;\n    this.url = \"user/\".concat(this.$store.getters.user.user_id, \"/\").concat(this.likeType, \"/\").concat(id, \"/islike\"); // 좋아요 값 props로 넘길 경우\n\n    if (this.value !== undefined) this.isLike = this.value; // props로 넘기지 않을 경우 각각 api 호출\n    else {\n        this.$axios.get(this.url).then(function (res) {\n          _this.isLike = res.data.is_liked;\n        });\n      }\n  },\n  computed: {\n    iconStyle: function iconStyle() {\n      var color = this.isLike ? this.activeColor : this.color;\n      var deco = {};\n      deco.fontSize = this.size.toString() + 'px';\n      deco.height = this.size.toString() + 'px';\n      deco.textAlign = 'center';\n      deco.color = this.brandColor[color].color;\n      return deco;\n    },\n    iconWrapStyle: function iconWrapStyle() {\n      var deco = {\n        backgroundColor: \"\".concat(this.getColor('기본 배경 색상')) // border: `1px solid ${this.getColor('기본 테두리선 색상')}`\n\n      }; // 버튼 안에 글자 있을때\n\n      if (this.text) {\n        deco.borderRadius = \"\".concat(this.borderRadius, \"px\"), deco.textAlign = 'center', deco.border = \"1px solid \".concat(this.getColor('기본 테두리선 색상'));\n\n        if (this.$store.getters.device === 'mobile') {\n          deco.padding = '4px 8px';\n        } else {\n          deco.padding = '8px 28px', deco.height = '56px';\n        }\n      } // 버튼 안에 아이콘만 있을 때\n      else {\n          // 마우스 오버 사용할 때\n          if (this.hover) {\n            if (!this.mouseHover) {\n              deco.width = '42px', deco.height = '42px', deco.borderRadius = \"\".concat(this.borderRadius, \"px\");\n            }\n\n            if (this.mouseHover) {\n              deco.width = '44px', deco.height = '44px', deco.borderRadius = \"\".concat(this.borderRadius, \"px\"), deco.boxShadow = '0 3px 6px 0 rgba(0, 0, 0, 0.16)';\n            }\n          } // 마우스 오버 사용하지 않을 때\n          else {\n              if (this.width) deco.width = \"\".concat(this.width, \"px\");\n              if (this.height) deco.height = \"\".concat(this.height, \"px\");\n              if (this.borderRadius) deco.borderRadius = \"\".concat(this.borderRadius, \"px\");\n              if (this.border) deco.border = \"\".concat(this.border);\n            }\n        }\n\n      return deco;\n    },\n    countStyle: function countStyle() {\n      var deco = {};\n      deco.color = this.brandColor.main.color;\n      deco.fontSize = '11px';\n      deco.textAlign = 'center';\n      if (this.countCustomStyle) deco = this.countCustomStyle;\n      return deco;\n    },\n    letterStyle: function letterStyle() {\n      return {\n        marginLeft: '6px',\n        whiteSpace: 'pre',\n        color: this.getColor('보조 내용 색상')\n      };\n    }\n  },\n  methods: {\n    hoverMouse: function hoverMouse() {\n      this.mouseHover = true;\n    },\n    leaveMouse: function leaveMouse() {\n      this.mouseHover = false;\n    },\n    clickBtn: function clickBtn() {\n      var _this2 = this;\n\n      if (!this.isLogin) {\n        this.toast('찜하시려면 로그인이 필요합니다');\n        return;\n      }\n\n      this.$axios.post(this.url.replace('islike', 'like')).then(function () {\n        _this2.isLike = !_this2.isLike;\n\n        _this2.$emit('liked', _this2.isLike);\n\n        if (_this2.isLike) {\n          if (_this2.likeType === 'product') _this2.toast('상품을 찜하였습니다.\\n' + _this2.menuTitle + '에서 \\n' + '확인하실 수 있습니다._icon_favorite');else if (_this2.likeType === 'partner') _this2.toast('파트너를 찜하였습니다.\\n' + _this2.menuTitle + '에서 \\n' + '확인하실 수 있습니다._icon_favorite');\n        } // 클릭 공통 emit\n\n\n        _this2.$emit('click'); // 카운트 숫자 있을 경우\n\n\n        if (!_this2.isLike) _this2.computedCount -= 1;else _this2.computedCount += 1;\n        if (_this2.computedCount < 0) _this2.computedCount = 0;\n      });\n    }\n  }\n};",{"version":3,"sources":["IconCircleLike.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"flex-center unselect\" @click.stop.prevent=\"clickBtn\" \r\n    :style=\"[containStyle ? containStyle : iconWrapStyle]\"\r\n    @mouseover=\"hoverMouse\"\r\n    @mouseleave=\"leaveMouse\">\r\n    <i class=\"material-icons\"\r\n      :style=\"iconStyle\"\r\n      >{{ isLike ? 'favorite' : 'favorite_border' }}</i>\r\n    <div v-if=\"text\" :style=\"[textStyle ? textStyle : letterStyle]\">{{ text }}</div>\r\n    <div v-if=\"count!==undefined&&computedCount!==undefined\"\r\n        class=\"full-width\" :style=\"countStyle\">{{ computedCount }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: \"IconCircleLike\",\r\n    props: {\r\n      id: {\r\n        type: Number,\r\n        required: false\r\n      },\r\n      value: {        // 좋아요 여부 (props로 넘기지 않을 경우 api 호출)\r\n        required: false\r\n      },\r\n      likeType: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      size: {\r\n        type: Number,\r\n        default: 24\r\n      },\r\n      color: {\r\n        type: String,\r\n        default: 'sub'\r\n      },\r\n      activeColor: {\r\n        type: String,\r\n        default: 'brand'\r\n      },\r\n      count: {          // 숫자표시\r\n        type: Number,\r\n        required: false\r\n      },\r\n      countCustomStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      menuTitle: {\r\n        type: String,\r\n        default: '마이페이지 > 즐겨찾기'\r\n      },\r\n      text: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      hover: {\r\n        type: Boolean,\r\n        required: false\r\n      },\r\n      width: {\r\n        type: Number,\r\n        required: false,\r\n        default: 48\r\n      },\r\n      height: {\r\n        type: Number,\r\n        required: false,\r\n        default: 48\r\n      },\r\n      borderRadius: {\r\n        type: Number,\r\n        default: 8\r\n      },\r\n      border: {\r\n        type: String,\r\n        required: false,\r\n      },\r\n      containStyle: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      textStyle: {\r\n        type: Object,\r\n        required: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        icon: 'favorite_border',\r\n        isLike: false,\r\n        url: '',\r\n        computedCount: undefined,\r\n        mouseHover: false\r\n      }\r\n    },\r\n    created() {\r\n      if (this.count !== undefined) this.computedCount = this.count;\r\n\r\n      if(!this.isLogin) return;\r\n\r\n      let id = this.$route.query.id;\r\n      if (this.id) id = this.id;\r\n      this.url = `user/${this.$store.getters.user.user_id}/${this.likeType}/${id}/islike`;\r\n\r\n      // 좋아요 값 props로 넘길 경우\r\n      if (this.value!==undefined) this.isLike = this.value;\r\n      // props로 넘기지 않을 경우 각각 api 호출\r\n      else {\r\n        this.$axios.get(this.url).then(res => {\r\n          this.isLike = res.data.is_liked;\r\n        });\r\n      }\r\n    },\r\n    computed: {\r\n      iconStyle() {\r\n        let color = this.isLike ? this.activeColor : this.color;\r\n        let deco = {};\r\n        deco.fontSize = (this.size).toString()+'px';\r\n        deco.height = (this.size).toString()+'px';\r\n        deco.textAlign = 'center';\r\n        deco.color = this.brandColor[color].color;\r\n\r\n        return deco;\r\n      },\r\n      iconWrapStyle() {\r\n        let deco = {\r\n          backgroundColor: `${this.getColor('기본 배경 색상')}`,\r\n          // border: `1px solid ${this.getColor('기본 테두리선 색상')}`\r\n        };\r\n        // 버튼 안에 글자 있을때\r\n        if(this.text) {\r\n          deco.borderRadius = `${this.borderRadius}px`,\r\n          deco.textAlign = 'center',\r\n          deco.border = `1px solid ${this.getColor('기본 테두리선 색상')}`\r\n          if(this.$store.getters.device==='mobile') {\r\n            deco.padding = '4px 8px'\r\n          }\r\n          else {\r\n            deco.padding = '8px 28px',\r\n            deco.height = '56px'\r\n          }\r\n        }\r\n\r\n        // 버튼 안에 아이콘만 있을 때\r\n        else {\r\n          // 마우스 오버 사용할 때\r\n          if(this.hover) {\r\n            if(!this.mouseHover) {\r\n              deco.width = '42px',\r\n              deco.height = '42px',\r\n              deco.borderRadius = `${this.borderRadius}px`\r\n            }\r\n            if(this.mouseHover) {\r\n              deco.width = '44px',\r\n              deco.height = '44px',\r\n              deco.borderRadius = `${this.borderRadius}px`,\r\n              deco.boxShadow = '0 3px 6px 0 rgba(0, 0, 0, 0.16)'\r\n            }\r\n          }\r\n\r\n          // 마우스 오버 사용하지 않을 때\r\n          else {\r\n            if(this.width) deco.width = `${this.width}px`\r\n            if(this.height) deco.height = `${this.height}px`\r\n            if(this.borderRadius) deco.borderRadius = `${this.borderRadius}px`\r\n            if(this.border) deco.border = `${this.border}`\r\n          }\r\n          \r\n        }\r\n        \r\n        return deco;\r\n      },\r\n      \r\n\r\n      countStyle() {\r\n        let deco = {};\r\n\r\n        deco.color = this.brandColor.main.color;\r\n        deco.fontSize = '11px';\r\n        deco.textAlign = 'center';\r\n\r\n        if (this.countCustomStyle) deco = this.countCustomStyle;\r\n\r\n        return deco;\r\n      },\r\n      letterStyle() {\r\n        return {\r\n          marginLeft: '6px',\r\n          whiteSpace: 'pre',\r\n          color: this.getColor('보조 내용 색상')\r\n        }\r\n      }\r\n\r\n    },\r\n\r\n    methods: {\r\n      hoverMouse() {\r\n        this.mouseHover = true;\r\n      },\r\n      leaveMouse() {\r\n        this.mouseHover = false;\r\n      },\r\n      clickBtn() {\r\n        if(!this.isLogin) {\r\n          this.toast('찜하시려면 로그인이 필요합니다')\r\n          return;\r\n        }\r\n\r\n        this.$axios.post(this.url.replace('islike','like'))\r\n          .then(() => {\r\n            this.isLike = !this.isLike;\r\n            this.$emit('liked', this.isLike)\r\n\r\n            if (this.isLike) {\r\n              if (this.likeType === 'product')\r\n                this.toast('상품을 찜하였습니다.\\n' +\r\n                  this.menuTitle + '에서 \\n' +\r\n                  '확인하실 수 있습니다._icon_favorite');\r\n              else if (this.likeType === 'partner')\r\n                this.toast('파트너를 찜하였습니다.\\n' +\r\n                  this.menuTitle + '에서 \\n' +\r\n                  '확인하실 수 있습니다._icon_favorite');\r\n            }\r\n\r\n            // 클릭 공통 emit\r\n            this.$emit('click');\r\n\r\n            // 카운트 숫자 있을 경우\r\n            if (!this.isLike) this.computedCount -= 1;\r\n            else this.computedCount += 1;\r\n\r\n            if (this.computedCount<0) this.computedCount = 0;\r\n          });\r\n      }\r\n    }\r\n\r\n  }\r\n</script>\r\n"],"sourceRoot":"src/components/Components/Button"}]}