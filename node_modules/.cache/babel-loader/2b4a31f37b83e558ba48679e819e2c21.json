{"remainingRequest":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js!/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mard/dev/grit12/src/components/Components/Form/CInputText.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mard/dev/grit12/src/components/Components/Form/CInputText.vue","mtime":1605259989000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mard/dev/grit12/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mard/dev/grit12/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _typeof from \"/Users/mard/dev/grit12/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FormMixin from '@/components/Mixins/FormMixin';\nexport default {\n  mixins: [FormMixin],\n  props: {\n    type: {\n      type: String,\n      required: false,\n      default: 'text'\n    },\n    deleteIcon: {\n      type: Boolean,\n      required: false\n    },\n    validate: {\n      type: Object,\n      required: false\n    },\n    prefix: {\n      type: String,\n      required: false\n    },\n    containStyle: {\n      type: Object,\n      required: false\n    }\n  },\n  created: function created() {\n    if (this.value) {\n      this.inputValue = this.value;\n\n      if (this.type === 'number') {\n        if (_typeof(this.inputValue) === String) {\n          this.inputValue = this.inputValue.replace(/-/gi, '');\n        }\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.computeInputStyle();\n\n    if (this.validate) {\n      this.valid = this.validate;\n    }\n  },\n  data: function data() {\n    return {\n      inputValue: '',\n      errorMsg: '',\n      keyup: false,\n      valid: {\n        valid_required: false,\n        error_msg: '',\n        max_length: 100,\n        min_length: 0,\n        alpha_s: true,\n        alpha_g: true,\n        special: true,\n        num: true\n      },\n      computedInputStyle: undefined,\n      minMsg: ''\n    };\n  },\n  watch: {\n    value: function value(n) {\n      this.inputValue = n;\n    }\n  },\n  computed: {\n    maxLength: function maxLength() {\n      if (this.validate) return this.validate.max_length ? this.validate.max_length : 50;\n    },\n    inputFormStyle: function inputFormStyle() {\n      var deco = {};\n      deco.color = this.inputStyle.color;\n      return deco;\n    },\n    iconStyle: function iconStyle() {\n      var styles = this.cloneItem(this.styles.input.icon);\n      var deco = this.decoToStyle(styles);\n      deco.position = 'absolute';\n      if (this.styles[this.type].icon.direction === 'left') deco.right = 'unset';else if (this.styles[this.type].icon.direction === 'right') deco.left = 'unset';\n      return deco;\n    },\n    errorStyle: function errorStyle() {\n      var deco = {\n        color: this.brandBgColor.alert\n      };\n      return deco;\n    },\n    disableStyle: function disableStyle() {\n      return {\n        borderRadius: this.inputStyle.borderRadius ? this.inputStyle.borderRadius : '0'\n      };\n    }\n  },\n  methods: {\n    computeInputStyle: function computeInputStyle() {\n      var deco = this.inputStyle;\n      /*let color = this.getColor('기본 테두리선 색상');\n      if(this.errorMsg !== '') {\n       color = this.brandBgColor.alert.backgroundColor;\n      }\n       switch (this.formType && this.formType.input) {\n        case 'round':\n          deco.borderRadius = this.radius.borderRadius;\n          deco.border = `1px solid ${color}`;\n          break;\n        case 'underline':\n          deco.borderBottom = `1px solid ${color}`;\n          break;\n      }*/\n\n      deco.fontfamily = 'Noto Sans CJK kr';\n      this.computedInputStyle = deco;\n    },\n    onKeyup: function onKeyup(value) {\n      this.inputValue = value;\n\n      if (this.type === 'phone') {\n        this.inputValue = autoHyphenPhone(this.inputValue);\n      } // 숫자 타입일 때, 최대값이 설정된 경우 그 값이상 못 올라가도록 설정\n      else if (this.type === 'number') {\n          if (this.validate.enable_option) {\n            this.inputValue.replace('-', '');\n            var min = this.validate.min;\n            var max = this.validate.max ? this.validate.max : this.validate.max_length;\n\n            if (min && min > 0) {\n              if (min > parseInt(this.inputValue)) {\n                this.minMsg = \"\".concat(min, \" \\uC774\\uC0C1\\uC758 \\uC22B\\uC790\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\");\n              } else this.minMsg = '';\n            }\n\n            if (max && max > 0) {\n              if (parseInt(this.inputValue) > max) {\n                this.inputValue = max;\n                this.toast(\"\\uCD5C\\uB300 \".concat(max, \"\\uAE4C\\uC9C0\\uC758 \\uC22B\\uC790\\uB9CC \\uC785\\uB825\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"));\n              }\n            }\n          }\n        }\n\n      this.$emit('update:value', this.inputValue);\n    },\n    chkValid: function chkValid() {\n      if (this.minMsg) this.errorMsg = this.minMsg;else this.errorMsg = ''; // validation이 필수가 아닌 경우\n\n      if (!this.validate.valid_required) return;\n      var props = {\n        value: this.value,\n        type: this.type,\n        validate: this.validate\n      };\n      this.errorMsg = this.isValid(props, this.name);\n      this.validate.error_msg = this.errorMsg; // this.valid.error_msg = this.errorMsg;\n\n      this.computeInputStyle();\n    },\n    clear: function clear() {\n      this.inputValue = '';\n      this.$emit('update:value', this.inputValue);\n    }\n  }\n};",{"version":3,"sources":["CInputText.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA,OAAA,SAAA,MAAA,+BAAA;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CACA,SADA,CADA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KADA;AAMA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA;AAFA,KANA;AAUA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KAVA;AAcA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KAdA;AAkBA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AAlBA,GALA;AA6BA,EAAA,OA7BA,qBA6BA;AACA,QAAA,KAAA,KAAA,EAAA;AACA,WAAA,UAAA,GAAA,KAAA,KAAA;;AACA,UAAA,KAAA,IAAA,KAAA,QAAA,EAAA;AACA,YAAA,QAAA,KAAA,UAAA,MAAA,MAAA,EAAA;AACA,eAAA,UAAA,GAAA,KAAA,UAAA,CAAA,OAAA,CAAA,KAAA,EAAA,EAAA,CAAA;AACA;AACA;AACA;AACA,GAtCA;AAwCA,EAAA,OAxCA,qBAwCA;AACA,SAAA,iBAAA;;AACA,QAAA,KAAA,QAAA,EAAA;AACA,WAAA,KAAA,GAAA,KAAA,QAAA;AACA;AACA,GA7CA;AA+CA,EAAA,IA/CA,kBA+CA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA;AAEA,MAAA,QAAA,EAAA,EAFA;AAGA,MAAA,KAAA,EAAA,KAHA;AAIA,MAAA,KAAA,EAAA;AACA,QAAA,cAAA,EAAA,KADA;AAEA,QAAA,SAAA,EAAA,EAFA;AAGA,QAAA,UAAA,EAAA,GAHA;AAIA,QAAA,UAAA,EAAA,CAJA;AAKA,QAAA,OAAA,EAAA,IALA;AAMA,QAAA,OAAA,EAAA,IANA;AAOA,QAAA,OAAA,EAAA,IAPA;AAQA,QAAA,GAAA,EAAA;AARA,OAJA;AAcA,MAAA,kBAAA,EAAA,SAdA;AAeA,MAAA,MAAA,EAAA;AAfA,KAAA;AAiBA,GAjEA;AAmEA,EAAA,KAAA,EAAA;AACA,IAAA,KADA,iBACA,CADA,EACA;AACA,WAAA,UAAA,GAAA,CAAA;AACA;AAHA,GAnEA;AAyEA,EAAA,QAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,UAAA,KAAA,QAAA,EACA,OAAA,KAAA,QAAA,CAAA,UAAA,GAAA,KAAA,QAAA,CAAA,UAAA,GAAA,EAAA;AACA,KAJA;AAKA,IAAA,cALA,4BAKA;AACA,UAAA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,CAAA,KAAA,GAAA,KAAA,UAAA,CAAA,KAAA;AACA,aAAA,IAAA;AACA,KATA;AAUA,IAAA,SAVA,uBAUA;AACA,UAAA,MAAA,GAAA,KAAA,SAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,WAAA,CAAA,MAAA,CAAA;AACA,MAAA,IAAA,CAAA,QAAA,GAAA,UAAA;AACA,UAAA,KAAA,MAAA,CAAA,KAAA,IAAA,EAAA,IAAA,CAAA,SAAA,KAAA,MAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,KACA,IAAA,KAAA,MAAA,CAAA,KAAA,IAAA,EAAA,IAAA,CAAA,SAAA,KAAA,OAAA,EAAA,IAAA,CAAA,IAAA,GAAA,OAAA;AACA,aAAA,IAAA;AACA,KAjBA;AAmBA,IAAA,UAnBA,wBAmBA;AACA,UAAA,IAAA,GAAA;AACA,QAAA,KAAA,EAAA,KAAA,YAAA,CAAA;AADA,OAAA;AAGA,aAAA,IAAA;AACA,KAxBA;AAyBA,IAAA,YAzBA,0BAyBA;AACA,aAAA;AACA,QAAA,YAAA,EAAA,KAAA,UAAA,CAAA,YAAA,GAAA,KAAA,UAAA,CAAA,YAAA,GAAA;AADA,OAAA;AAGA;AA7BA,GAzEA;AAyGA,EAAA,OAAA,EAAA;AACA,IAAA,iBADA,+BACA;AACA,UAAA,IAAA,GAAA,KAAA,UAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAA,IAAA,CAAA,UAAA,GAAA,kBAAA;AAEA,WAAA,kBAAA,GAAA,IAAA;AACA,KAtBA;AAuBA,IAAA,OAvBA,mBAuBA,KAvBA,EAuBA;AACA,WAAA,UAAA,GAAA,KAAA;;AAEA,UAAA,KAAA,IAAA,KAAA,OAAA,EAAA;AACA,aAAA,UAAA,GAAA,eAAA,CAAA,KAAA,UAAA,CAAA;AACA,OAFA,CAGA;AAHA,WAIA,IAAA,KAAA,IAAA,KAAA,QAAA,EAAA;AACA,cAAA,KAAA,QAAA,CAAA,aAAA,EAAA;AACA,iBAAA,UAAA,CAAA,OAAA,CAAA,GAAA,EAAA,EAAA;AACA,gBAAA,GAAA,GAAA,KAAA,QAAA,CAAA,GAAA;AACA,gBAAA,GAAA,GAAA,KAAA,QAAA,CAAA,GAAA,GAAA,KAAA,QAAA,CAAA,GAAA,GAAA,KAAA,QAAA,CAAA,UAAA;;AACA,gBAAA,GAAA,IAAA,GAAA,GAAA,CAAA,EAAA;AACA,kBAAA,GAAA,GAAA,QAAA,CAAA,KAAA,UAAA,CAAA,EAAA;AACA,qBAAA,MAAA,aAAA,GAAA;AACA,eAFA,MAGA,KAAA,MAAA,GAAA,EAAA;AACA;;AAEA,gBAAA,GAAA,IAAA,GAAA,GAAA,CAAA,EAAA;AACA,kBAAA,QAAA,CAAA,KAAA,UAAA,CAAA,GAAA,GAAA,EAAA;AACA,qBAAA,UAAA,GAAA,GAAA;AACA,qBAAA,KAAA,wBAAA,GAAA;AACA;AACA;AACA;AACA;;AAEA,WAAA,KAAA,CAAA,cAAA,EAAA,KAAA,UAAA;AACA,KApDA;AAqDA,IAAA,QArDA,sBAqDA;AACA,UAAA,KAAA,MAAA,EAAA,KAAA,QAAA,GAAA,KAAA,MAAA,CAAA,KACA,KAAA,QAAA,GAAA,EAAA,CAFA,CAGA;;AACA,UAAA,CAAA,KAAA,QAAA,CAAA,cAAA,EAAA;AAEA,UAAA,KAAA,GAAA;AACA,QAAA,KAAA,EAAA,KAAA,KADA;AAEA,QAAA,IAAA,EAAA,KAAA,IAFA;AAGA,QAAA,QAAA,EAAA,KAAA;AAHA,OAAA;AAMA,WAAA,QAAA,GAAA,KAAA,OAAA,CAAA,KAAA,EAAA,KAAA,IAAA,CAAA;AACA,WAAA,QAAA,CAAA,SAAA,GAAA,KAAA,QAAA,CAbA,CAcA;;AACA,WAAA,iBAAA;AACA,KArEA;AAsEA,IAAA,KAtEA,mBAsEA;AACA,WAAA,UAAA,GAAA,EAAA;AACA,WAAA,KAAA,CAAA,cAAA,EAAA,KAAA,UAAA;AACA;AAzEA;AAzGA,CAAA","sourcesContent":["<template>\r\n  <div :style=\"containStyle ? containStyle : containerStyle\">\r\n    <!-- 레이블 -->\r\n    <div class=\"flex-align\" v-if=\"formType.label && label\">\r\n      <div :style=\"labelStyle\">{{ label }}</div>\r\n      <div v-if=\"type==='number'\">\r\n        <div v-if=\"validate.enable_option\"\r\n          :style=\"[labelStyle,brandColor.help]\" style=\"padding-left:4px\">({{ validate.min }}~{{ validate.max }} 사이 숫자만 입력)</div>\r\n        <div v-else\r\n          :style=\"[labelStyle,brandColor.help]\" style=\"padding-left:4px\">(숫자만 입력)</div>\r\n      </div>\r\n    </div>\r\n    <!-- description -->\r\n    <div v-if=\"formType.description && description\">\r\n      <div :style=\"descriptionStyle\">{{ description }}</div>\r\n    </div>\r\n\r\n    <!-- 인풋 -->\r\n    <div class=\"flex-align full-width position-relative\">\r\n      <!-- 아이콘 -->\r\n      <!--<i v-if=\"icon.enable\"\r\n        class=\"material-icons\"\r\n        :style=\"iconStyle\">\r\n        {{ properties.icon }}\r\n      </i>-->\r\n\r\n      <!-- input -->\r\n      <div\r\n        class=\"flex-align full-width\"\r\n        :class=\"{'input-disabled': disabled===true}\"\r\n        :style=\"disableStyle\"\r\n      >\r\n        <div v-if=\"prefix\" :style=\"brandColor.brand\" style=\"padding-right: 8px\">{{ prefix }}</div>\r\n\r\n        <input\r\n          class=\"input\"\r\n          :style=\"computedInputStyle\"\r\n          ref=\"input\"\r\n          :type=\"type\"\r\n          :value=\"inputValue\"\r\n          min=\"0\"\r\n          :maxlength=\"maxLength\"\r\n          @keyup.enter=\"$emit('onEnter')\"\r\n          @blur=\"chkValid\"\r\n          :placeholder=\"placeholder\"\r\n          @input=\"e => onKeyup(e.target.value)\"\r\n          :readonly=\"disabled===true\"\r\n        />\r\n\r\n        <div v-if=\"formType.unit && unit\" :style=\"unitStyle\" style=\"margin-left: 8px\">{{ unit }}</div>\r\n\r\n      </div>\r\n\r\n      <!-- 삭제 아이콘 -->\r\n      <i\r\n        v-if=\"deleteIcon\r\n              && value\"\r\n        class=\"material-icons unselect\"\r\n        :style=\"deleteIconStyle\"\r\n        @click=\"clear\"\r\n      >clear</i>\r\n    </div>\r\n\r\n    <!-- 에러메세지 -->\r\n    <div\r\n      v-if=\"errorMsg!=='' && !formType.vErrorNotShown\"\r\n      :style=\"errorStyle\"\r\n      class=\"lp-error-msg\"\r\n    >{{ errorMsg }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import FormMixin from '@/components/Mixins/FormMixin';\r\n  \r\n  export default {\r\n    mixins: [\r\n      FormMixin\r\n    ],\r\n\r\n    props: {\r\n      type: {\r\n        type: String,\r\n        required: false,\r\n        default: 'text'\r\n      },\r\n      deleteIcon: {\r\n        type: Boolean,\r\n        required: false\r\n      },\r\n      validate: {\r\n        type: Object,\r\n        required: false\r\n      },\r\n      prefix: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      containStyle: {\r\n        type: Object,\r\n        required: false\r\n      }\r\n    },\r\n\r\n    created() {\r\n      if(this.value) {\r\n        this.inputValue = this.value;\r\n        if(this.type === 'number') {\r\n          if(typeof(this.inputValue) === String) {\r\n            this.inputValue = this.inputValue.replace(/-/gi, '');\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.computeInputStyle();\r\n      if(this.validate) {\r\n        this.valid = this.validate;\r\n      }\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        inputValue: '',\r\n        errorMsg: '',\r\n        keyup: false,\r\n        valid: {\r\n          valid_required: false,\r\n          error_msg: '',\r\n          max_length:100,\r\n          min_length:0,\r\n          alpha_s: true,\r\n          alpha_g: true,\r\n          special: true,\r\n          num: true\r\n        },\r\n        computedInputStyle: undefined,\r\n        minMsg: ''\r\n      };\r\n    },\r\n\r\n    watch: {\r\n      value(n) {\r\n        this.inputValue = n;\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      maxLength() {\r\n        if (this.validate) \r\n          return this.validate.max_length ? this.validate.max_length : 50;\r\n      },\r\n      inputFormStyle() {\r\n        let deco = {};\r\n        deco.color = this.inputStyle.color;\r\n        return deco;\r\n      },\r\n      iconStyle() {\r\n        let styles = this.cloneItem(this.styles.input.icon);\r\n        let deco = this.decoToStyle(styles);\r\n        deco.position = 'absolute';\r\n        if (this.styles[this.type].icon.direction==='left') deco.right = 'unset';\r\n        else if (this.styles[this.type].icon.direction==='right') deco.left = 'unset';\r\n        return deco;\r\n      },\r\n\r\n      errorStyle() {\r\n        let deco = {\r\n          color: this.brandBgColor.alert\r\n        };\r\n        return deco;\r\n      },\r\n      disableStyle() {\r\n        return {\r\n          borderRadius: this.inputStyle.borderRadius ? this.inputStyle.borderRadius : '0'\r\n        }\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      computeInputStyle() {\r\n        let deco = this.inputStyle;\r\n\r\n        /*let color = this.getColor('기본 테두리선 색상');\r\n        if(this.errorMsg !== '') {\r\n         color = this.brandBgColor.alert.backgroundColor;\r\n        }\r\n\r\n        switch (this.formType && this.formType.input) {\r\n          case 'round':\r\n            deco.borderRadius = this.radius.borderRadius;\r\n            deco.border = `1px solid ${color}`;\r\n            break;\r\n          case 'underline':\r\n            deco.borderBottom = `1px solid ${color}`;\r\n            break;\r\n        }*/\r\n\r\n        deco.fontfamily = 'Noto Sans CJK kr';\r\n\r\n        this.computedInputStyle = deco;\r\n      },\r\n      onKeyup(value) {\r\n        this.inputValue = value;\r\n\r\n        if (this.type === 'phone') {\r\n          this.inputValue= autoHyphenPhone(this.inputValue);\r\n        }\r\n        // 숫자 타입일 때, 최대값이 설정된 경우 그 값이상 못 올라가도록 설정\r\n        else if(this.type === 'number') {\r\n          if(this.validate.enable_option) {\r\n            this.inputValue.replace('-','');\r\n            let min = this.validate.min;\r\n            let max = this.validate.max ? this.validate.max : this.validate.max_length;\r\n            if(min && min > 0) {\r\n              if(min > parseInt(this.inputValue)) {\r\n                this.minMsg = `${min} 이상의 숫자를 입력해주세요`\r\n              }\r\n              else this.minMsg = '';\r\n            }\r\n\r\n            if(max && max > 0) {\r\n              if(parseInt(this.inputValue) > max) {\r\n                this.inputValue= max;\r\n                this.toast(`최대 ${max}까지의 숫자만 입력할 수 있습니다`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        this.$emit('update:value', this.inputValue);\r\n      },\r\n      chkValid() {\r\n        if(this.minMsg) this.errorMsg = this.minMsg;\r\n        else this.errorMsg = '';\r\n        // validation이 필수가 아닌 경우\r\n        if (!this.validate.valid_required) return;\r\n\r\n        let props = {\r\n          value: this.value,\r\n          type: this.type,\r\n          validate: this.validate\r\n        }\r\n\r\n        this.errorMsg = this.isValid(props, this.name);\r\n        this.validate.error_msg = this.errorMsg;\r\n        // this.valid.error_msg = this.errorMsg;\r\n        this.computeInputStyle();\r\n      },\r\n      clear() {\r\n        this.inputValue = '';\r\n        this.$emit('update:value', this.inputValue);\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" type=\"stylus\" scoped>\r\n\r\n  .c-input-text-container\r\n    width 100%\r\n\r\n  .label\r\n    display block\r\n\r\n  input\r\n    border 0\r\n    flex 1\r\n    background-color transparent\r\n    -webkit-appearance 'none'\r\n    -webkit-border-radius 0\r\n\r\n  textarea:focus\r\n  input:focus\r\n    outline none\r\n\r\n  .lp-error-msg\r\n    color #e80000\r\n    font-size 0.7rem\r\n    margin-top 4px\r\n    width: 100%\r\n\r\n  textarea\r\n    width 100%\r\n    height 100%\r\n    overflow hidden\r\n    border 0\r\n    resize none\r\n\r\n  .input-disabled\r\n    background-color #eee\r\n    color #777\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/Components/Form"}]}